{"version":3,"sources":["../node_modules/ccxt/ccxt.js","../node_modules/ccxt/js/base/errors.js","../node_modules/ccxt/js/base/Exchange.js","../node_modules/crypto-js/core.js","../node_modules/crypto-js/cipher-core.js","../node_modules/crypto-js/evpkdf.js","../node_modules/crypto-js/enc-base64.js","../node_modules/crypto-js/md5.js","../node_modules/ccxt/js/foxbit.js","../node_modules/ccxt/js/liqui.js","../node_modules/crypto-js/x64-core.js","../node_modules/ccxt/js/okcoinusd.js","../node_modules/ccxt/js/base/functions.js","../node_modules/crypto-js/sha1.js","../node_modules/crypto-js/hmac.js","../node_modules/ccxt/js/acx.js","../node_modules/crypto-js/sha256.js","../node_modules/crypto-js/sha512.js","../node_modules/qs/lib/utils.js","../node_modules/qs/lib/formats.js","../node_modules/ccxt/js/_1btcxe.js","../node_modules/ccxt/js/bitfinex.js","../node_modules/ccxt/js/bittrex.js","../node_modules/ccxt/js/btcbox.js","../node_modules/ccxt/js/btcturk.js","../node_modules/ccxt/js/bter.js","../node_modules/ccxt/js/zb.js","../node_modules/ccxt/js/fybse.js","../node_modules/ccxt/js/hitbtc.js","../node_modules/ccxt/js/huobipro.js","../node_modules/ccxt/js/qryptos.js","../node_modules/process/browser.js","../node_modules/crypto-js/index.js","../node_modules/crypto-js/lib-typedarrays.js","../node_modules/crypto-js/enc-utf16.js","../node_modules/crypto-js/sha224.js","../node_modules/crypto-js/sha384.js","../node_modules/crypto-js/sha3.js","../node_modules/crypto-js/ripemd160.js","../node_modules/crypto-js/pbkdf2.js","../node_modules/crypto-js/mode-cfb.js","../node_modules/crypto-js/mode-ctr.js","../node_modules/crypto-js/mode-ctr-gladman.js","../node_modules/crypto-js/mode-ofb.js","../node_modules/crypto-js/mode-ecb.js","../node_modules/crypto-js/pad-ansix923.js","../node_modules/crypto-js/pad-iso10126.js","../node_modules/crypto-js/pad-iso97971.js","../node_modules/crypto-js/pad-zeropadding.js","../node_modules/crypto-js/pad-nopadding.js","../node_modules/crypto-js/format-hex.js","../node_modules/crypto-js/aes.js","../node_modules/crypto-js/tripledes.js","../node_modules/crypto-js/rc4.js","../node_modules/crypto-js/rabbit.js","../node_modules/crypto-js/rabbit-legacy.js","../node_modules/qs/lib/index.js","../node_modules/qs/lib/stringify.js","../node_modules/qs/lib/parse.js","../node_modules/ccxt/js/base/throttle.js","../node_modules/fetch-ponyfill/build/fetch-browser.js","../node_modules/ccxt/js/base/Market.js","../node_modules/ccxt/js/_1broker.js","../node_modules/ccxt/js/allcoin.js","../node_modules/ccxt/js/anxpro.js","../node_modules/ccxt/js/binance.js","../node_modules/ccxt/js/bit2c.js","../node_modules/ccxt/js/bitbay.js","../node_modules/ccxt/js/bitcoincoid.js","../node_modules/ccxt/js/bitfinex2.js","../node_modules/ccxt/js/bitflyer.js","../node_modules/ccxt/js/bithumb.js","../node_modules/ccxt/js/bitlish.js","../node_modules/ccxt/js/bitmarket.js","../node_modules/ccxt/js/bitmex.js","../node_modules/ccxt/js/bitso.js","../node_modules/ccxt/js/bitstamp.js","../node_modules/ccxt/js/bitstamp1.js","../node_modules/ccxt/js/bl3p.js","../node_modules/ccxt/js/bleutrade.js","../node_modules/ccxt/js/btcchina.js","../node_modules/ccxt/js/btcexchange.js","../node_modules/ccxt/js/btcmarkets.js","../node_modules/ccxt/js/btctradeua.js","../node_modules/ccxt/js/btcx.js","../node_modules/ccxt/js/bxinth.js","../node_modules/ccxt/js/ccex.js","../node_modules/ccxt/js/cex.js","../node_modules/ccxt/js/chbtc.js","../node_modules/ccxt/js/chilebit.js","../node_modules/ccxt/js/coincheck.js","../node_modules/ccxt/js/coinfloor.js","../node_modules/ccxt/js/coingi.js","../node_modules/ccxt/js/coinmarketcap.js","../node_modules/ccxt/js/coinmate.js","../node_modules/ccxt/js/coinsecure.js","../node_modules/ccxt/js/coinspot.js","../node_modules/ccxt/js/cryptopia.js","../node_modules/ccxt/js/dsx.js","../node_modules/ccxt/js/exmo.js","../node_modules/ccxt/js/flowbtc.js","../node_modules/ccxt/js/fybsg.js","../node_modules/ccxt/js/gatecoin.js","../node_modules/ccxt/js/gateio.js","../node_modules/ccxt/js/gdax.js","../node_modules/ccxt/js/gemini.js","../node_modules/ccxt/js/getbtc.js","../node_modules/ccxt/js/hitbtc2.js","../node_modules/ccxt/js/huobi.js","../node_modules/ccxt/js/huobicny.js","../node_modules/ccxt/js/independentreserve.js","../node_modules/ccxt/js/itbit.js","../node_modules/ccxt/js/jubi.js","../node_modules/ccxt/js/kraken.js","../node_modules/ccxt/js/kucoin.js","../node_modules/ccxt/js/kuna.js","../node_modules/ccxt/js/lakebtc.js","../node_modules/ccxt/js/livecoin.js","../node_modules/ccxt/js/luno.js","../node_modules/ccxt/js/mercado.js","../node_modules/ccxt/js/mixcoins.js","../node_modules/ccxt/js/nova.js","../node_modules/ccxt/js/okcoincny.js","../node_modules/ccxt/js/okex.js","../node_modules/ccxt/js/paymium.js","../node_modules/ccxt/js/poloniex.js","../node_modules/ccxt/js/quadrigacx.js","../node_modules/ccxt/js/quoine.js","../node_modules/ccxt/js/southxchange.js","../node_modules/ccxt/js/surbitcoin.js","../node_modules/ccxt/js/therock.js","../node_modules/ccxt/js/tidex.js","../node_modules/ccxt/js/urdubit.js","../node_modules/ccxt/js/vaultoro.js","../node_modules/ccxt/js/vbtc.js","../node_modules/ccxt/js/virwox.js","../node_modules/ccxt/js/wex.js","../node_modules/ccxt/js/xbtce.js","../node_modules/ccxt/js/yobit.js","../node_modules/ccxt/js/yunbi.js","../node_modules/ccxt/js/zaif.js"],"names":["Exchange","require","functions","errors","version","ccxtVersion","exchanges","module","exports","Object","assign","keys"],"mappings":";;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;EA0BA,aAEA;AAEA,KAAMA,UAAY,mBAAAC,CAAS,GAAT,CAAlB,CACA,KAAMC,WAAY,mBAAAD,CAAS,GAAT,CAAlB,CACA,KAAME,QAAY,mBAAAF,CAAS,GAAT,CAAlB,CAEA;AACA;AAEA,KAAMG,SAAU,UAAhB,CAEAJ,SAASK,WAAT,CAAuBD,OAAvB,CAEA;AAEA,KAAME,WAAY,CACd,WAA2B,mBAAAL,CAAS,GAAT,CADb,CAEd,UAA2B,mBAAAA,CAAS,GAAT,CAFb,CAGd,MAA2B,mBAAAA,CAAS,GAAT,CAHb,CAId,UAA2B,mBAAAA,CAAS,GAAT,CAJb,CAKd,SAA2B,mBAAAA,CAAS,GAAT,CALb,CAMd,UAA2B,mBAAAA,CAAS,GAAT,CANb,CAOd,QAA2B,mBAAAA,CAAS,GAAT,CAPb,CAQd,SAA2B,mBAAAA,CAAS,GAAT,CARb,CASd,cAA2B,mBAAAA,CAAS,GAAT,CATb,CAUd,WAA2B,mBAAAA,CAAS,GAAT,CAVb,CAWd,YAA2B,mBAAAA,CAAS,GAAT,CAXb,CAYd,WAA2B,mBAAAA,CAAS,GAAT,CAZb,CAad,UAA2B,mBAAAA,CAAS,GAAT,CAbb,CAcd,UAA2B,mBAAAA,CAAS,GAAT,CAdb,CAed,YAA2B,mBAAAA,CAAS,GAAT,CAfb,CAgBd,SAA2B,mBAAAA,CAAS,GAAT,CAhBb,CAiBd,QAA2B,mBAAAA,CAAS,GAAT,CAjBb,CAkBd,WAA2B,mBAAAA,CAAS,GAAT,CAlBb,CAmBd,YAA2B,mBAAAA,CAAS,GAAT,CAnBb,CAoBd,UAA2B,mBAAAA,CAAS,GAAT,CApBb,CAqBd,OAA2B,mBAAAA,CAAS,GAAT,CArBb,CAsBd,YAA2B,mBAAAA,CAAS,GAAT,CAtBb,CAuBd,SAA2B,mBAAAA,CAAS,GAAT,CAvBb,CAwBd,WAA2B,mBAAAA,CAAS,GAAT,CAxBb,CAyBd,cAA2B,mBAAAA,CAAS,GAAT,CAzBb,CA0Bd,aAA2B,mBAAAA,CAAS,GAAT,CA1Bb,CA2Bd,aAA2B,mBAAAA,CAAS,GAAT,CA3Bb,CA4Bd,UAA2B,mBAAAA,CAAS,GAAT,CA5Bb,CA6Bd,OAA2B,mBAAAA,CAAS,GAAT,CA7Bb,CA8Bd,OAA2B,mBAAAA,CAAS,GAAT,CA9Bb,CA+Bd,SAA2B,mBAAAA,CAAS,GAAT,CA/Bb,CAgCd,OAA2B,mBAAAA,CAAS,GAAT,CAhCb,CAiCd,MAA2B,mBAAAA,CAAS,GAAT,CAjCb,CAkCd,QAA2B,mBAAAA,CAAS,GAAT,CAlCb,CAmCd,WAA2B,mBAAAA,CAAS,GAAT,CAnCb,CAoCd,YAA2B,mBAAAA,CAAS,GAAT,CApCb,CAqCd,YAA2B,mBAAAA,CAAS,GAAT,CArCb,CAsCd,SAA2B,mBAAAA,CAAS,GAAT,CAtCb,CAuCd,gBAA2B,mBAAAA,CAAS,GAAT,CAvCb,CAwCd,WAA2B,mBAAAA,CAAS,GAAT,CAxCb,CAyCd,aAA2B,mBAAAA,CAAS,GAAT,CAzCb,CA0Cd,WAA2B,mBAAAA,CAAS,GAAT,CA1Cb,CA2Cd,YAA2B,mBAAAA,CAAS,GAAT,CA3Cb,CA4Cd,MAA2B,mBAAAA,CAAS,GAAT,CA5Cb,CA6Cd,OAA2B,mBAAAA,CAAS,GAAT,CA7Cb,CA8Cd,UAA2B,mBAAAA,CAAS,GAAT,CA9Cb,CA+Cd,SAA2B,mBAAAA,CAAS,GAAT,CA/Cb,CAgDd,QAA2B,mBAAAA,CAAS,GAAT,CAhDb,CAiDd,QAA2B,mBAAAA,CAAS,GAAT,CAjDb,CAkDd,WAA2B,mBAAAA,CAAS,GAAT,CAlDb,CAmDd,SAA2B,mBAAAA,CAAS,GAAT,CAnDb,CAoDd,OAA2B,mBAAAA,CAAS,GAAT,CApDb,CAqDd,SAA2B,mBAAAA,CAAS,GAAT,CArDb,CAsDd,SAA2B,mBAAAA,CAAS,GAAT,CAtDb,CAuDd,SAA2B,mBAAAA,CAAS,GAAT,CAvDb,CAwDd,UAA2B,mBAAAA,CAAS,GAAT,CAxDb,CAyDd,QAA2B,mBAAAA,CAAS,GAAT,CAzDb,CA0Dd,WAA2B,mBAAAA,CAAS,GAAT,CA1Db,CA2Dd,WAA2B,mBAAAA,CAAS,GAAT,CA3Db,CA4Dd,qBAA2B,mBAAAA,CAAS,GAAT,CA5Db,CA6Dd,QAA2B,mBAAAA,CAAS,GAAT,CA7Db,CA8Dd,OAA2B,mBAAAA,CAAS,GAAT,CA9Db,CA+Dd,SAA2B,mBAAAA,CAAS,GAAT,CA/Db,CAgEd,SAA2B,mBAAAA,CAAS,GAAT,CAhEb,CAiEd,OAA2B,mBAAAA,CAAS,GAAT,CAjEb,CAkEd,UAA2B,mBAAAA,CAAS,GAAT,CAlEb,CAmEd,QAA2B,mBAAAA,CAAS,GAAT,CAnEb,CAoEd,WAA2B,mBAAAA,CAAS,GAAT,CApEb,CAqEd,OAA2B,mBAAAA,CAAS,GAAT,CArEb,CAsEd,UAA2B,mBAAAA,CAAS,GAAT,CAtEb,CAuEd,WAA2B,mBAAAA,CAAS,GAAT,CAvEb,CAwEd,OAA2B,mBAAAA,CAAS,GAAT,CAxEb,CAyEd,YAA2B,mBAAAA,CAAS,GAAT,CAzEb,CA0Ed,YAA2B,mBAAAA,CAAS,GAAT,CA1Eb,CA2Ed,OAA2B,mBAAAA,CAAS,GAAT,CA3Eb,CA4Ed,UAA2B,mBAAAA,CAAS,GAAT,CA5Eb,CA6Ed,WAA2B,mBAAAA,CAAS,GAAT,CA7Eb,CA8Ed,UAA2B,mBAAAA,CAAS,GAAT,CA9Eb,CA+Ed,aAA2B,mBAAAA,CAAS,GAAT,CA/Eb,CAgFd,SAA2B,mBAAAA,CAAS,GAAT,CAhFb,CAiFd,eAA2B,mBAAAA,CAAS,GAAT,CAjFb,CAkFd,aAA2B,mBAAAA,CAAS,GAAT,CAlFb,CAmFd,UAA2B,mBAAAA,CAAS,GAAT,CAnFb,CAoFd,QAA2B,mBAAAA,CAAS,GAAT,CApFb,CAqFd,UAA2B,mBAAAA,CAAS,GAAT,CArFb,CAsFd,WAA2B,mBAAAA,CAAS,GAAT,CAtFb,CAuFd,OAA2B,mBAAAA,CAAS,GAAT,CAvFb,CAwFd,SAA2B,mBAAAA,CAAS,GAAT,CAxFb,CAyFd,MAA2B,mBAAAA,CAAS,GAAT,CAzFb,CA0Fd,QAA2B,mBAAAA,CAAS,GAAT,CA1Fb,CA2Fd,QAA2B,mBAAAA,CAAS,GAAT,CA3Fb,CA4Fd,QAA2B,mBAAAA,CAAS,GAAT,CA5Fb,CA6Fd,OAA2B,mBAAAA,CAAS,GAAT,CA7Fb,CA8Fd,KAA2B,mBAAAA,CAAS,GAAT,CAG/B;AAjGkB,CAAlB,CAmGAM,OAAOC,OAAP,CAAiBC,OAAOC,MAAP,CAAe,CAAEN,OAAF,CAAWJ,QAAX,CAAqBM,UAAWG,OAAOE,IAAP,CAAaL,SAAb,CAAhC,CAAf,CAA0EA,SAA1E,CAAqFJ,SAArF,CAAgGC,MAAhG,CAAjB,CAEA,+E;;;;;;;ACliBAAiB,UAAU;;AAE3B,gCAAgC;;AAEhC,yCAAyC,qDAAqD;;AAE9F;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oDAAoD,OAAO;AAC3D,qDAAqD;AACrgBAAgB;AAChB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA;AACA,6BAA6B,8GAA8G;AAC3I;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA,gDAAgD;;AAEhD;AACA;;AAEA;AACA,+BAA+B,iBAAiB;AAChD;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,4GAA4G;;AAE5G;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,mCAAmC,+BAA+B;AAClE;AACA;AACA;;AAEA;;AAEA;AACA;AACA,mCAAmC,gBAAgB;;AAEnD,SAAS;;AAET;AACA;AACA,uCAAuC,gBAAgB;;AAEvD;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA,mEAAmE;;AAEnE;AACA;;AAEA;AACA;AACA;;AAEA,8DAA8D;AAC9D;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAAS;;AAET;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kDAAkD;AAClD;AACA;;AAEA,mDAAmD;AACnD;AACA;;AAEA,sFAAsF;AACtF;AACA;;AAEA,0FAA0F;AAC1F;AACA;;AAEA,4FAA4F;AAC5F;AACA;;AAEA,wFAAwF;AACxF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uCAAuC,iBAAiB;AACxD;AACA;;AAEA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;AAEA,gDAAgD;AAChD;AACA;AACA;;AAEA,iCAAiC;AACjC;AACA;;AAEA,iCAAiC;AACjC;AACA;;AAEA,kCAAkC;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qDAAqD;AACrD;AACA;;AAEA,sDAAsD;AACtD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,wFAAwF;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACr2BA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA,mBAAmB,MAAM;AACzB,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA,cAAc;AACd;AACA,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd,oCAAoC,YAAY;AAChD;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,qBAAqB;AACjD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qCAAqC,sBAAsB;AAC3D;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA,MAAM;;AAEN;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;;AAEV;;AAEA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;ACvvBD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA,8EAA8E,kBAAkB;AAChG;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA,8EAA8E,kBAAkB;AAChG;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,UAAU;AAC9B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,wGAAwG,kBAAkB;AAC1H;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;;AAEV;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,MAAM;;AAEN;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA,MAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,MAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,MAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,MAAM;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,MAAM;AAC9B,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,MAAM;AAC9B,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;;AAEA;AACA,MAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA,uBAAuB,KAAK;AAC5B,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA,MAAM;;AAEN;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B,mBAAmB,UAAU;AAC7B,mBAAmB,UAAU;AAC7B,mBAAmB,UAAU;AAC7B,mBAAmB,OAAO;AAC1B,mBAAmB,KAAK;AACxB,mBAAmB,QAAQ;AAC3B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,aAAa;AACjC;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,yCAAyC,qCAAqC;AAC9E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,iBAAiB;AACrC,oBAAoB,UAAU;AAC9B,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,iHAAiH,SAAS;AAC1H,iHAAiH,0CAA0C;AAC3J;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,oBAAoB;AACxC,oBAAoB,UAAU;AAC9B,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA,sHAAsH,0CAA0C;AAChK,mHAAmH,0CAA0C;AAC7J;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,oBAAoB,oBAAoB;AACxC,oBAAoB,UAAU;AAC9B;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B,oBAAoB,iBAAiB;AACrC;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,4BAA4B;;AAElE;AACA;AACA;;AAEA;AACA,yCAAyC,+BAA+B;AACxE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,IAAI;AAC3B;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,iBAAiB;AACrC,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,yHAAyH,kCAAkC;AAC3J;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,oBAAoB;AACxC,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA,8HAA8H,kCAAkC;AAChK,2HAA2H,kCAAkC;AAC7J;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;AACN,EAAE;;;AAGF,CAAC,G;;;;;;AC/2BD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B,uBAAuB,OAAO;AAC9B,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA,uDAAuD,aAAa;AACpE,uDAAuD,+BAA+B;AACtF;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC,oBAAoB,iBAAiB;AACrC;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,gBAAgB;AAChD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,iBAAiB;AACjC,gBAAgB,OAAO;AACvB;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,aAAa;AACpE,uDAAuD,+BAA+B;AACtF;AACA;AACA;AACA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;ACnID,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA;;AAEA;;AAEA,gCAAgC,sCAAsC;AACtE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC,gBAAgB;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,UAAU;;AAEV;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,qBAAqB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;ACtID,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,4BAA4B,QAAQ;AACpnC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,iBAAiB;AACjC;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;;AC3QD;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,0BAA0B,SAAS;AACnC,0BAA0B,SAAS;AACnC,0BAA0B,SAAS;AACnC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,4GAA4G;AACxI,4BAA4B,sGAAsG;AAClI,4BAA4B,wGAAwG;AACpI,4BAA4B,yGAAyG;AACrI,4BAA4B,0GAA0G;AACtI,aAAa;AACb,SAAS;AACT;;AAEA,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA,SAAS;AACT;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,wCAAwC,kBAAkB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/LA;;AAEA;;AAEA;AACA,OAAO,kEAAkE;;AAEzE;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iCAAiC,KAAK;AACtC,gCAAgC,KAAK;AACrC,iCAAiC,KAAK;AACtC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb,SAAS;AACT;;AAEA,wFAAwF;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB;AAChD;;AAEA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA,gDAAgD,WAAW;AAC3D;AACA;AACA;AACA;;AAEA,yDAAyD;AACzD;AACA;AACA;AACA,SAAS;AACT;AACA,sDAAsD,WAAW;AACjE;AACA;AACA;AACA;;AAEA,4FAA4F;AAC5F;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gGAAgG;AAChG;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;;AAEA,kGAAkG;AAClG;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;;AAEA,8FAA8F;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA,qEAAqE;AACrE;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC1mBA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA,mBAAmB,MAAM;AACzB,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;;AAEA;AACA;AACA,MAAM;AACN,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;;AC/SD;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA,uDAAuD,yBAAyB;AAChF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;;AAEA,4FAA4F;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,+DAA+D;AAC/D;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA,4FAA4F;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gGAAgG;AAChG,qBAAqB;AACrB;AACA;AACA,SAAS;AACT;;AAEA,kGAAkG;AAClG,uBAAuB;AACvB;AACA;AACA,SAAS;AACT;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,uBAAuB;AACvB,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjnBA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,OAAO,iBAAiB;;AAExB;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,kEAAkE,iDAAiD;AACnH,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;;AAE7C;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C,YAAY;AACtD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,mDAAmD,gBAAgB;;AAEnE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qHAAqH,kBAAkB;AACvI;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,gBAAgB,OAAO,4BAA4B;AACtE;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,4EAA4E,2BAA2B;AACvG;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;ACjXA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,QAAQ;AACpC;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,iBAAiB;AACjC;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;ACrJD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA,qBAAqB,KAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN,EAAE;;;AAGF,CAAC,G;;;;;;;AC9ID;;AAEA;;AAEA;AACA,OAAO,+BAA+B;;;AAGtC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAAiG;AACjG;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,yDAAyD,WAAW;AACpE;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,2BAA2B;AAC3B;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjZA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iCAAiC,iBAAiB;AAClD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,QAAQ;AACpC;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,iBAAiB;AACjC;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;ACtMD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,QAAQ;AACpC;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA,MAAM;;AAEN;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,iBAAiB;AACjC;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;;AClUD;;AAEA;;AAEA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;;AAEA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB,mBAAmB;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kBAAkB,OAAO,WAAW,aAAa;AACjD;;AAEA,mBAAmB,kBAAkB;AACrC;AACA;;AAEA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;ACzMA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;ACjBA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,aAAa;AACb,SAAS;AACT;;AAEA,mCAAmC;AACnC;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA,SAAS;AACT;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAAiG;AACjG;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D,oDAAoD,WAAW;AAC/D;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB;AACvB;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA,2BAA2B,+BAA+B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5PA;;AAEA;;AAEA;AACA,OAAO,8EAA8E;;AAErF;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,wCAAwC,UAAU,EAAE,OAAO,EAAE,QAAQ;AACrE,wCAAwC,UAAU,EAAE,OAAO;AAC3D,wCAAwC,UAAU,EAAE,OAAO;AAC3D;AACA,iBAAiB;AACjB;AACA;AACA,+BAA+B,OAAO;AACtC,qCAAqC,OAAO;AAC5C,mCAAmC,SAAS;AAC5C,gCAAgC,SAAS;AACzC,oCAAoC,OAAO;AAC3C,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA,iCAAiC,OAAO;AACxC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,8FAA8F;AAC9F;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,mDAAmD,4BAA4B;AAC/E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gGAAgG;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kGAAkG;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yDAAyD;AACzD;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT,gCAAgC;AAChC,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,qDAAqD;AACrD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvrBA;;AAEA;;AAEA;AACA,OAAO,qGAAqG;;AAE5G;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAsC;AACtC;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gGAAgG;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yDAAyD;AACzD;AACA;AACA;AACA,iEAAiE,aAAa;AAC9E,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4FAA4F;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kGAAkG;AAClG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oDAAoD;AACpD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,uBAAuB;AACvB;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnrBA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,sEAAsE;AAClG,aAAa;AACb,SAAS;AACT;;AAEA,mCAAmC;AACnC;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA,SAAS;AACT;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/NA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,oHAAoH;AAChJ,4BAA4B,oHAAoH;AAChJ,4BAA4B,oHAAoH;AAChJ,aAAa;AACb,SAAS;AACT;;AAEA,mCAAmC;AACnC;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D,mDAAmD,WAAW;AAC9D;;AAEA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;;;;;;;AC/OA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,GAAG;AACpC,oCAAoC,GAAG;AACvC,gCAAgC,GAAG;AACnC,uCAAuC,GAAG;AAC1C,uCAAuC,GAAG,EAAE,IAAI;AAChD;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,mDAAmD,oBAAoB;AACvE;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtSA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA,oBAAoB,cAAc;AAClC,oBAAoB,8BAA8B;AAClD,oBAAoB,4BAA4B;AAChD,oBAAoB,4BAA4B;AAChD,oBAAoB,4BAA4B;AAChD,oBAAoB,8BAA8B;AAClD,oBAAoB,8BAA8B;AAClD,oBAAoB,8BAA8B;AAClD,qBAAqB,8BAA8B;AACnD,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;;AAEA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9SA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,kEAAkE;AAC9F,aAAa;AACb,SAAS;AACT;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D,0DAA0D,gBAAgB;AAC1E;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iDAAiD,qBAAqB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5KA;;AAEA;;AAEA;AACA,OAAO,mCAAmC;;AAE1C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,0BAA0B,OAAO;AACjC,0BAA0B,OAAO;AACjC,0BAA0B,OAAO;AACjC,0BAA0B,OAAO;AACjC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,kCAAkC,SAAS;AAC3C;AACA,uCAAuC,YAAY;AACnD;AACA;AACA;AACA;AACA,kCAAkC,SAAS;AAC3C;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjqBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yDAAyD;AACzD;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,gGAAgG;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kGAAkG;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACh1BA;;;AAGA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,2CAA2C,GAAG;AAC9C,uCAAuC,GAAG;AAC1C,uCAAuC,GAAG;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,GAAG;AAC1C,uCAAuC,GAAG;AAC1C;AACA;AACA;AACA,8CAA8C,GAAG;AACjD,8CAA8C,GAAG;AACjD;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4FAA4F;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,gGAAgG;AAChG,qBAAqB;AACrB;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D,iEAAiE,WAAW;AAC5E;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,2CAA2C,yBAAyB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpeA;;AAEA;;AAEA;AACA,OAAO,gEAAgE;;AAEvE;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,mCAAmC,GAAG;AACtC,mCAAmC,GAAG;AACtC;AACA,qCAAqC,SAAS;AAC9C;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,GAAG;AACpC,iCAAiC,GAAG;AACpC;AACA,iCAAiC,GAAG;AACpC;AACA,2CAA2C,GAAG;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,GAAG;AACvC,gCAAgC,GAAG;AACnC,iCAAiC,GAAG;AACpC,iCAAiC,GAAG;AACpC,iCAAiC,GAAG;AACpC,iCAAiC,GAAG;AACpC;AACA,2CAA2C,GAAG;AAC9C;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa,2CAA2C;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,yDAAyD;AACzD;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,0FAA0F;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA,0FAA0F;AAC1F,qEAAqE,mBAAmB;AACxF;;AAEA,4FAA4F;AAC5F,qEAAqE,qBAAqB;AAC1F;;AAEA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;;;;;;;ACtYA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,4BAA4B,UAAU;;;;;;;ACvLtC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA,CAAC,G;;;;;;ACjBD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,0BAA0B;AACtD;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;AC3ED,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,oBAAoB;AAChD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;ACpJD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,iBAAiB;AACjC;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;AC/ED,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,iBAAiB;AACjC;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;AClFD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,OAAO;AAC/B,4BAA4B,OAAO;AACnC;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;;AAEA,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,4BAA4B,QAAQ;AACpC;AACA;;AAEA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,qBAAqB;AACjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,YAAY;AAC5C;AACA,gCAAgC,OAAO;AACvC;AACA;AACA,oCAAoC,OAAO;AAC3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC,OAAO;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,gBAAgB;AACxD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,OAAO;AACvC,oCAAoC,OAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA,4BAA4B,QAAQ;AACpC;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,iBAAiB;AACjC;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;AClUD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;;AAEA;AACA;;AAEA,kdAAkd,+BAA+B;AACjf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA,4BAA4B,QAAQ;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,QAAQ;AACpC;AACA;AACA;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4BAA4B,OAAO;AACnC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA,MAAM;;;AAGN;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,iBAAiB;AACjC;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;AC1QD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B,uBAAuB,OAAO;AAC9B,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA,uDAAuD,aAAa;AACpE,uDAAuD,+BAA+B;AACtF;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC,oBAAoB,iBAAiB;AACrC;AACA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,gBAAgB;AAChD;AACA;;AAEA;AACA;;AAEA;AACA,oCAAoC,sBAAsB;AAC1D;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,iBAAiB;AACjC,gBAAgB,OAAO;AACvB;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,aAAa;AACpE,uDAAuD,+BAA+B;AACtF;AACA;AACA;AACA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;AChJD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;;AAEA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;AC7ED,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA,MAAM;;AAEN;;AAEA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;ACzDD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA,MAAM;;AAEN;;AAEA;AACA,EAAE;;;;;AAKF;;AAEA,CAAC,G;;;;;;ACnHD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA,MAAM;;AAEN;;AAEA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;ACrDD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;ACvCD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA,CAAC,G;;;;;;AChDD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA,CAAC,G;;;;;;AC3CD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA,CAAC,G;;;;;;ACvCD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA,CAAC,G;;;;;;AC5CD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;;;AAGA;;AAEA,CAAC,G;;;;;;AC7BD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,aAAa;AACjC;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,qBAAqB,aAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,yBAAyB;AAClE;AACA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;ACjED,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,MAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gCAAgC,gBAAgB;AAChD;AACA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,mBAAmB;AACtD;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;ACvpC;AACA;AACA;;AAEA;AACA;AACA,kCAAkC,cAAc;AAChD;AACA;;AAEA;AACA;;AAEA;AACA,gCAAgC,QAAQ;AACxC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,QAAQ;AACpC;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;;AAEA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;;AAEA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;ACjwBD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;;AAEA;AACA,mCAAmC,SAAS;AAC5C;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;;AAEV;AACA;AACA,UAAU;;AAEV;;AAEA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA,UAAU;;AAEV;AACA;;AAEA;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA,MAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;AC1ID,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,OAAO;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,4BAA4B,OAAO;AACnC;AACA;;AAEA;AACA,4BAA4B,OAAO;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,OAAO;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA,MAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,OAAO;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,OAAO;AAC/B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;AC/LD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,4BAA4B,OAAO;AACnC;AACA;;AAEA;AACA,4BAA4B,OAAO;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA,UAAU;;AAEV;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,OAAO;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;;AAEV;;AAEA;AACA,MAAM;;AAEN;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,OAAO;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,OAAO;AAC/B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;;AAGF;;AAEA,CAAC,G;;;;;;;AC7LD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;ACVA;;AAEA;AACA;;AAEA;AACA,yCAAyC;AACzC;AACA,KAAK;AACL,4CAA4C;AAC5C;AACA,KAAK;AACL,qCAAqC;AACrC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,mBAAmB,oBAAoB;AACvC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,wCAAwC;;AAExC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,oBAAoB;AACvC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACjNA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,kBAAkB;AACrC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,kCAAkC,QAAQ;AAC1C;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wCAAwC;;AAExC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;AC7KA;;AAEA,OAAO,QAAQ;;AAEf;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,6BAA6B,wBAAwB;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wBAAwB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa;;AAEb;AACA;AACA,SAAS;;AAET,KAAK;AACL,wDAAwD;AACxD,KAAK;AACL;;AAEA;;;;;;;AC1DA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,mBAAmB;AACjE;AACA;;AAEA;AACA;AACA,wCAAwC,oBAAoB;AAC5D;AACA;;AAEA;AACA;AACA,8CAA8C,4BAA4B;AAC1E;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA,6DAA6D;AAC7D,eAAe;AACf;AACA,eAAe;AACf,oFAAoF;AACpF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA,eAAe;AACf;AACA,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,oCAAoC,uBAAuB;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA,6CAA6C,0BAA0B;AACvE;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,qCAAqC,0BAA0B,eAAe;AAC9E;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA,WAAW;AACX;AACA;AACA,OAAO;;;AAGP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AAAA;AACL,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,CAAC;;;;;;;;;ACjfD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;ACrBA;;AAEA;;AAEA;AACA,OAAO,qCAAqC;;AAE5C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA,aAAa;AACb,2BAA2B,gCAAgC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,mDAAmD,iBAAiB;AACpE;;AAEA,2DAA2D;AAC3D;AACA;AACA,kCAAkC,uBAAuB;AACzD;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtQA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AC7GA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,0BAA0B,cAAc;AACxC,0BAA0B,cAAc;AACxC,0BAA0B,cAAc;AACxC;AACA,iBAAiB;AACjB;AACA;AACA,0BAA0B,cAAc;AACxC,0BAA0B,cAAc;AACxC,0BAA0B,cAAc;AACxC,0BAA0B,cAAc;AACxC,0BAA0B,cAAc;AACxC,gCAAgC,SAAS;AACzC,gCAAgC,SAAS;AACzC;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,2FAA2F;AACvH,4BAA4B,2FAA2F;AACvH,4BAA4B,2FAA2F;AACvH,4BAA4B,2FAA2F;AACvH,4BAA4B,2FAA2F;AACvH,4BAA4B,2FAA2F;AACvH,4BAA4B,2FAA2F;AACvH,4BAA4B,2FAA2F;AACvH,4BAA4B,2FAA2F;AACvH,4BAA4B,2FAA2F;AACvH,4BAA4B,8FAA8F;AAC1H,4BAA4B,8FAA8F;AAC1H,6BAA6B,iGAAiG;AAC9H,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA,SAAS;AACT;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D,oEAAoE,YAAY;AAChF;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtOA;;AAEA;;AAEA;AACA,OAAO,gFAAgF;;AAEvF;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wFAAwF;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,SAAS;AACT,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,4FAA4F;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gGAAgG;AAChG;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,8FAA8F;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oDAAoD;AACpD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,qBAAqB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChvBA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,oCAAoC,KAAK;AACzC,oCAAoC,KAAK;AACzC,oCAAoC,KAAK;AACzC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,qEAAqE;AACjG,4BAA4B,qEAAqE;AACjG,4BAA4B,qEAAqE;AACjG,4BAA4B,qEAAqE;AACjG,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA,mCAAmC;AACnC;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA,SAAS;AACT;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D,wDAAwD,WAAW;AACnE;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sCAAsC,iBAAiB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;;;;;;;AC/LA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,0BAA0B,GAAG;AAC7B,0BAA0B,GAAG;AAC7B,0BAA0B,GAAG;AAC7B,0BAA0B,GAAG;AAC7B,0BAA0B,GAAG;AAC7B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,6BAA6B,4GAA4G;AACzI,6BAA6B,4GAA4G;AACzI,6BAA6B,4GAA4G;AACzI,6BAA6B,4GAA4G;AACzI,6BAA6B,4GAA4G;AACzI,6BAA6B,4GAA4G;AACzI,6BAA6B,4GAA4G;AACzI,6BAA6B,4GAA4G;AACzI,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA,SAAS;AACT;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA,0DAA0D;AAC1D,8CAA8C,WAAW;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD,sDAAsD;AACtD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;;;;;;;ACzPA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,0BAA0B,KAAK;AAC/B,0BAA0B,KAAK;AAC/B,0BAA0B,KAAK;AAC/B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,yGAAyG;AACrI,4BAA4B,yGAAyG;AACrI,4BAA4B,yGAAyG;AACrI,4BAA4B,yGAAyG;AACrI,4BAA4B,yGAAyG;AACrI,4BAA4B,yGAAyG;AACrI,4BAA4B,yGAAyG;AACrI,8BAA8B,iHAAiH;AAC/I,4BAA4B,yGAAyG;AACrI,4BAA4B,yGAAyG;AACrI,4BAA4B,uGAAuG;AACnI,4BAA4B,yGAAyG;AACrI,6BAA6B,2GAA2G;AACxI,6BAA6B,6GAA6G;AAC1I,4BAA4B,yGAAyG;AACrI,4BAA4B,yGAAyG;AACrI,4BAA4B,yGAAyG;AACrI,4BAA4B,yGAAyG;AACrI,4BAA4B,yGAAyG;AACrI,4BAA4B,yGAAyG;AACrI,aAAa;AACb,SAAS;AACT;;AAEA,mCAAmC;AACnC;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA,SAAS;AACT;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA,SAAS;AACT;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvMA;;AAEA;;AAEA;AACA,OAAO,iDAAiD;;AAExD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iCAAiC,OAAO;AACxC,iCAAiC,OAAO;AACxC,+BAA+B,OAAO,EAAE,UAAU;AAClD,+BAA+B,OAAO;AACtC,+BAA+B,OAAO;AACtC,+BAA+B,OAAO;AACtC,+BAA+B,OAAO;AACtC,+BAA+B,OAAO;AACtC;AACA,iCAAiC,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ;AACtE,iCAAiC,IAAI,EAAE,KAAK,EAAE,OAAO;AACrD,iCAAiC,IAAI,EAAE,KAAK,EAAE,OAAO;AACrD,iCAAiC,IAAI,EAAE,KAAK,EAAE,OAAO;AACrD,iCAAiC,IAAI,EAAE,KAAK,EAAE,OAAO;AACrD,wCAAwC,UAAU,EAAE,OAAO,EAAE,QAAQ;AACrE,wCAAwC,UAAU,EAAE,OAAO;AAC3D,wCAAwC,UAAU,EAAE,OAAO;AAC3D;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,wCAAwC,OAAO;AAC/C,wCAAwC,OAAO;AAC/C,wCAAwC,OAAO;AAC/C,uCAAuC,OAAO,EAAE,GAAG;AACnD,wCAAwC,OAAO;AAC/C;AACA,gDAAgD,OAAO;AACvD,gDAAgD,OAAO;AACvD,+CAA+C,OAAO;AACtD,+CAA+C,OAAO;AACtD,iDAAiD,OAAO;AACxD,iDAAiD,OAAO;AACxD,gDAAgD,OAAO;AACvD,6CAA6C,IAAI;AACjD,8CAA8C,IAAI;AAClD,2CAA2C,SAAS;AACpD,4CAA4C,UAAU;AACtD;AACA;AACA,uCAAuC,KAAK,EAAE,OAAO,EAAE,MAAM;AAC7D;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,gCAAgC,8EAA8E;AAC9G,gCAAgC,8EAA8E;AAC9G,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,gCAAgC,8EAA8E;AAC9G,gCAAgC,8EAA8E;AAC9G,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,6BAA6B,wEAAwE;AACrG,6BAA6B,wEAAwE;AACrG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,6BAA6B,wEAAwE;AACrG,6BAA6B,wEAAwE;AACrG,6BAA6B,wEAAwE;AACrG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,6BAA6B,wEAAwE;AACrG,6BAA6B,wEAAwE;AACrG,6BAA6B,wEAAwE;AACrG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA,SAAS;AACT;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;;AAEA,oDAAoD;AACpD;AACA;;AAEA,yDAAyD;AACzD;AACA;;AAEA,0DAA0D;AAC1D;AACA;;AAEA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;;;;;AC9aA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA,SAAS;AACT;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;;;;;;;ACtQA;;AAEA;;AAEA;AACA,OAAO,8BAA8B;;AAErC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA,oCAAoC,SAAS;AAC7C;AACA,8CAA8C,SAAS;AACvD;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,SAAS;AACT,sBAAsB;AACtB;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9SA;;AAEA;;AAEA;AACA,OAAO,eAAe;;AAEtB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAAiG;AACjG;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,SAAS;AACT;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA,sBAAsB;AACtB;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,mDAAmD,WAAW;AAC9D;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,SAAS;AACT;AACA,4CAA4C,uBAAuB;AACnE,uBAAuB;AACvB;AACA,gBAAgB;AAChB;AACA;;;;;;;;AChWA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,+BAA+B,OAAO;AACtC,+BAA+B,OAAO;AACtC,+BAA+B,OAAO;AACtC;AACA,iCAAiC,OAAO;AACxC,iCAAiC,OAAO;AACxC,iCAAiC,OAAO;AACxC,iCAAiC,OAAO;AACxC,iCAAiC,OAAO;AACxC,iCAAiC,OAAO;AACxC,iCAAiC,OAAO;AACxC,iCAAiC,OAAO;AACxC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,qEAAqE;AACjG,4BAA4B,qEAAqE;AACjG,4BAA4B,qEAAqE;AACjG,4BAA4B,qEAAqE;AACjG,4BAA4B,qEAAqE;AACjG,4BAA4B,qEAAqE;AACjG,kCAAkC,uFAAuF;AACzH,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kGAAkG;AAClG;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D,8CAA8C,WAAW;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD,aAAa;AACb;AACA;AACA;AACA,yDAAyD;AACzD,aAAa;AACb;AACA;AACA;AACA;AACA,uEAAuE;AACvE,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;;;;;;;AClXA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA,yDAAyD,oBAAoB;AAC7E,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAAiG;AACjG;AACA,+CAA+C;AAC/C;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA,qCAAqC;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,+CAA+C,gBAAgB;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;;;;;;;AC7aA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,IAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,IAAI;AAC3C,iCAAiC,IAAI;AACrC;AACA,sCAAsC,IAAI;AAC1C;AACA,sCAAsC,IAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,IAAI;AACrC;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,gDAAgD,YAAY;AAC5D;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtQA;;AAEA;;AAEA;AACA,OAAO,qCAAqC;;AAE5C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,qCAAqC,KAAK;AAC1C,sCAAsC,KAAK;AAC3C,iCAAiC,KAAK;AACtC,uCAAuC,KAAK;AAC5C;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,kCAAkC,KAAK;AACvC;AACA,4CAA4C,KAAK;AACjD;AACA,sCAAsC,KAAK;AAC3C;AACA;AACA,8BAA8B,KAAK;AACnC,qCAAqC,KAAK;AAC1C,+BAA+B,KAAK;AACpC,sCAAsC,KAAK;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,mDAAmD,WAAW;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2DAA2D,WAAW;AACtE;AACA;;AAEA,8FAA8F;AAC9F;AACA;AACA;AACA;AACA;AACA,oCAAoC,eAAe;AACnD;AACA;AACA;;AAEA,yDAAyD;AACzD;AACA,mDAAmD,WAAW;AAC9D;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjXA;;AAEA;;AAEA;AACA,OAAO,mDAAmD;;AAE1D;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,uGAAuG;AACnI,4BAA4B,uGAAuG;AACnI,4BAA4B,uGAAuG;AACnI,4BAA4B,uGAAuG;AACnI,4BAA4B,uGAAuG;AACnI,4BAA4B,uGAAuG;AACnI,4BAA4B,uGAAuG;AACnI,4BAA4B,uGAAuG;AACnI,4BAA4B,uGAAuG;AACnI,4BAA4B,uGAAuG;AACnI,4BAA4B,uGAAuG;AACnI,4BAA4B,uGAAuG;AACnI,aAAa;AACb,SAAS;AACT;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,mCAAmC;AACnC;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D,mDAAmD,WAAW;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2DAA2D,WAAW;AACtE;AACA;;AAEA,8FAA8F;AAC9F;AACA;AACA;AACA;AACA;AACA,oCAAoC,aAAa;AACjD;AACA;AACA;;AAEA,yDAAyD;AACzD;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;AC/PA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,0BAA0B,OAAO;AACjC,0BAA0B,OAAO;AACjC,0BAA0B,OAAO;AACjC;AACA,iBAAiB;AACjB;AACA;AACA,0BAA0B,OAAO;AACjC,0BAA0B,OAAO;AACjC,0BAA0B,OAAO;AACjC,0BAA0B,OAAO;AACjC,0BAA0B,OAAO;AACjC,0BAA0B,OAAO;AACjC,0BAA0B,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,uGAAuG;AACnI,+BAA+B,qEAAqE;AACpG,aAAa;AACb,SAAS;AACT;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D,8DAA8D,iBAAiB;AAC/E;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;;;;;;;AC1MA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA,uBAAuB,8BAA8B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;ACvFA;;AAEA;;AAEA;AACA,OAAO,sBAAsB;;AAE7B;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,qGAAqG;AACjI,4BAA4B,qGAAqG;AACjI,4BAA4B,qGAAqG;AACjI,4BAA4B,kGAAkG;AAC9H,4BAA4B,kGAAkG;AAC9H,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,sCAAsC;AACtC;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;;;;;;;ACjVA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,4BAA4B,sEAAsE;AAClG,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;AC5BA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iCAAiC,GAAG;AACpC,iCAAiC,GAAG;AACpC,iCAAiC,GAAG;AACpC;AACA,iBAAiB;AACjB;AACA;AACA;AACA,kCAAkC,GAAG;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,4BAA4B,wGAAwG;AACpI,aAAa;AACb,SAAS;AACT;;AAEA,mCAAmC;AACnC;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mDAAmD,mBAAmB;AACtE;;AAEA,0DAA0D;AAC1D;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxOA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gCAAgC,OAAO;AACvC,sCAAsC,OAAO;AAC7C,qCAAqC,OAAO;AAC5C,0CAA0C,OAAO;AACjD;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,OAAO;AACrC;AACA,8BAA8B,OAAO;AACrC,8BAA8B,OAAO;AACrC,oCAAoC,OAAO;AAC3C,uCAAuC,GAAG;AAC1C,uCAAuC,GAAG;AAC1C,+BAA+B,OAAO;AACtC;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,oFAAoF,aAAa,aAAa,YAAY,wBAAwB;AAC9K,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,6BAA6B,yEAAyE;AACtG,6BAA6B,yEAAyE;AACtG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,6BAA6B,yEAAyE;AACtG,6BAA6B,yEAAyE;AACtG,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA,sBAAsB;AACtB;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D,qDAAqD,WAAW;AAChE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gGAAgG;AAChG;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;;;;;;;ACpUA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gCAAgC,GAAG,EAAE,MAAM;AAC3C,iCAAiC,GAAG;AACpC,gCAAgC,GAAG,EAAE,MAAM;AAC3C;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,aAAa;AACb,SAAS;AACT;;AAEA,mCAAmC;AACnC;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D,8CAA8C,cAAc;AAC5D;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7KA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,gCAAgC;AAChC;AACA;AACA;AACA,SAAS;AACT;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzQA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,0BAA0B,OAAO;AACjC;AACA;AACA,iCAAiC,KAAK;AACtC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,8BAA8B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,6CAA6C,aAAa;AAC1D;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,uBAAuB;AACvB,SAAS;AACT;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChRA;;AAEA;;AAEA;AACA,OAAO,qCAAqC;;AAE5C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qCAAqC,KAAK;AAC1C,sCAAsC,WAAW;AACjD,mCAAmC,SAAS,EAAE,KAAK;AACnD,qCAAqC,KAAK;AAC1C,iCAAiC,KAAK;AACtC,kCAAkC,WAAW;AAC7C,wCAAwC,KAAK;AAC7C;AACA;AACA,kCAAkC,KAAK;AACvC,sCAAsC,KAAK;AAC3C;AACA,iBAAiB;AACjB;AACA;AACA;AACA,0CAA0C,KAAK;AAC/C;AACA;AACA,wCAAwC,KAAK;AAC7C,+CAA+C,KAAK;AACpD,yCAAyC,KAAK;AAC9C;AACA;AACA;AACA;AACA,sCAAsC,KAAK;AAC3C;AACA,wCAAwC,KAAK;AAC7C,yCAAyC,KAAK;AAC9C,sCAAsC,KAAK;AAC3C;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA,uBAAuB,qCAAqC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAAiG;AACjG;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,mDAAmD,WAAW;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gGAAgG;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C,iDAAiD,mBAAmB;AACpE;AACA;AACA;;AAEA,yDAAyD;AACzD;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtbA;;AAEA;;AAEA;AACA,OAAO,sCAAsC;;AAE7C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,sEAAsE;AAC9F,wBAAwB,sEAAsE;AAC9F,wBAAwB,sEAAsE;AAC9F,wBAAwB,sEAAsE;AAC9F,wBAAwB,sEAAsE;AAC9F,2BAA2B,sEAAsE;AACjG,wBAAwB,sEAAsE;AAC9F,wBAAwB,sEAAsE;AAC9F,yBAAyB,yEAAyE;AAClG;AACA;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC/DA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;AC3BA;;AAEA;;AAEA;AACA,OAAO,8BAA8B;;AAErC;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,+BAA+B,KAAK;AACpC;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,GAAG;AAC3C;AACA;AACA;AACA;AACA,0CAA0C,GAAG;AAC7C;AACA;AACA;AACA;AACA,wCAAwC,GAAG;AAC3C,0CAA0C,GAAG;AAC7C,oCAAoC,GAAG;AACvC;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,sEAAsE;AAClG,+BAA+B,sEAAsE;AACrG,+BAA+B,sEAAsE;AACrG,+BAA+B,sEAAsE;AACrG,+BAA+B,sEAAsE;AACrG,+BAA+B,sEAAsE;AACrG,+BAA+B,sEAAsE;AACrG,+BAA+B,sEAAsE;AACrG,+BAA+B,sEAAsE;AACrG,+BAA+B,sEAAsE;AACrG,+BAA+B,sEAAsE;AACrG,+BAA+B,sEAAsE;AACrG,gCAAgC,yEAAyE;AACzG,+BAA+B,sEAAsE;AACrG,+BAA+B,sEAAsE;AACrG,+BAA+B,sEAAsE;AACrG,+BAA+B,sEAAsE;AACrG,+BAA+B,sEAAsE;AACrG,+BAA+B,sEAAsE;AACrG,+BAA+B,sEAAsE;AACrG,+BAA+B,sEAAsE;AACrG,+BAA+B,sEAAsE;AACrG,+BAA+B,sEAAsE;AACrG,gCAAgC,yEAAyE;AACzG,aAAa;AACb,SAAS;AACT;;AAEA,mCAAmC;AACnC;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D,0DAA0D,WAAW;AACrE;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7OA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,0BAA0B,GAAG;AAC7B,0BAA0B,GAAG;AAC7B,0BAA0B,GAAG;AAC7B;AACA,iBAAiB;AACjB;AACA;AACA,0BAA0B,GAAG;AAC7B,0BAA0B,GAAG;AAC7B,0BAA0B,GAAG;AAC7B,0BAA0B,GAAG;AAC7B,0BAA0B,GAAG;AAC7B,0BAA0B,GAAG;AAC7B,0BAA0B,GAAG;AAC7B,0BAA0B,GAAG;AAC7B,0BAA0B,GAAG;AAC7B,0BAA0B,GAAG;AAC7B;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,4BAA4B,sEAAsE;AAClG,aAAa;AACb,SAAS;AACT;;AAEA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA,6CAA6C;AAC7C;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF,qBAAqB;AACrB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D,qDAAqD,WAAW;AAChE;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;;;;;;;AC7LA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qCAAqC,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM;AACxE,uCAAuC,KAAK,EAAE,SAAS;AACvD;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,gDAAgD,gBAAgB;AAChE;;AAEA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvTA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iCAAiC,GAAG;AACpC;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA,6CAA6C;AAC7C;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,sCAAsC;AACtC;AACA;AACA,SAAS;AACT;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5PA;;AAEA;;AAEA;AACA,OAAO,qCAAqC;;AAE5C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,oFAAoF,2BAA2B;AAC3I,4BAA4B,oFAAoF,2BAA2B;AAC3I,4BAA4B,oFAAoF,2BAA2B;AAC3I,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA,mCAAmC;AACnC;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA,yCAAyC;AACzC;AACA,SAAS;AACT,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D,mDAAmD,gBAAgB;AACnE;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnNA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,sDAAsD,KAAK;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,uCAAuC,UAAU;AACjD,wCAAwC,OAAO;AAC/C,uCAAuC,OAAO;AAC9C,iDAAiD,OAAO;AACxD,mDAAmD,GAAG;AACtD;AACA,6DAA6D,GAAG;AAChE;AACA,+DAA+D,GAAG;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,MAAM;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,MAAM;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,KAAK;AACxC;AACA,6EAA6E,WAAW;AACxF,iEAAiE,UAAU;AAC3E,mDAAmD,QAAQ;AAC3D,mDAAmD,QAAQ;AAC3D,6EAA6E,WAAW;AACxF,iDAAiD,KAAK;AACtD,8CAA8C,KAAK;AACnD;AACA,oDAAoD,UAAU;AAC9D,sEAAsE,WAAW;AACjF;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,sEAAsE;AAClG,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0EAA0E;AAC1E;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,iEAAiE;AACjE,oCAAoC,gBAAgB;AACpD;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/RA;;AAEA;;AAEA;AACA,OAAO,qCAAqC;;AAE5C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,kEAAkE;AAC9F,4BAA4B,kEAAkE;AAC9F,6BAA6B,qEAAqE;AAClG,aAAa;AACb,SAAS;AACT;;AAEA,mCAAmC;AACnC;AACA,sBAAsB;AACtB;AACA;AACA;AACA,2BAA2B,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0EAA0E;AAC1E;AACA;AACA,SAAS;AACT;;AAEA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA,oCAAoC,WAAW;AAC/C;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,iBAAiB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,C;;;;;;;AC/JA;;AAEA;;AAEA;AACA,OAAO,kEAAkE;;AAEzE;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,GAAG;AACxC,qCAAqC,MAAM;AAC3C,qCAAqC,GAAG,EAAE,MAAM;AAChD,oCAAoC,GAAG;AACvC,oCAAoC,GAAG,EAAE,MAAM;AAC/C,2CAA2C,GAAG;AAC9C,2CAA2C,GAAG,EAAE,MAAM;AACtD,0CAA0C,GAAG;AAC7C,0CAA0C,GAAG,EAAE,MAAM;AACrD,+CAA+C,IAAI,EAAE,MAAM;AAC3D;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,8FAA8F;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAsC;AACtC;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB;AAChD;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4FAA4F;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB,6BAA6B;AACpD,4DAA4D,mBAAmB;AAC/E;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yDAAyD;AACzD;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;;AAEA,gGAAgG;AAChG;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;;AAEA,kGAAkG;AAClG;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;;AAEA,oDAAoD;AACpD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpmBA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,yCAAyC,GAAG,EAAE,OAAO,EAAE,MAAM;AAC7D,gCAAgC,KAAK;AACrC;AACA,mCAAmC,GAAG,EAAE,OAAO,EAAE,OAAO;AACxD,qCAAqC,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI;AAC/D,iCAAiC,KAAK;AACtC,iCAAiC,KAAK;AACtC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;AACA;;;;;;;;AClJA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,mDAAmD,iBAAiB;AACpE;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjRA;;AAEA;;AAEA;AACA,OAAO,qCAAqC;;AAE5C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;AChOA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,4BAA4B,kEAAkE;AAC9F,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;AC3BA;;AAEA;;AAEA;AACA,OAAO,qCAAqC;;AAE5C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,4CAA4C,aAAa;AACzD;AACA,6CAA6C,aAAa;AAC1D,mDAAmD,aAAa;AAChE,kDAAkD,aAAa,EAAE,WAAW;AAC5E,+CAA+C,aAAa,EAAE,UAAU;AACxE,8CAA8C,aAAa;AAC3D,qDAAqD,aAAa;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,UAAU;AACvD;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,SAAS;AACpD;AACA;AACA,wCAAwC,SAAS,EAAE,SAAS;AAC5D;AACA;AACA,4CAA4C,SAAS;AACrD;AACA,0DAA0D,aAAa;AACvE;AACA,wDAAwD,aAAa;AACrE;AACA,uDAAuD,aAAa;AACpE;AACA;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,aAAa;AACvE,iEAAiE,aAAa;AAC9E,oEAAoE,aAAa;AACjF,uDAAuD,aAAa;AACpE,uDAAuD,aAAa;AACpE;AACA,gDAAgD,GAAG;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,aAAa,EAAE,YAAY;AACrF,uDAAuD,aAAa;AACpE;AACA;AACA;AACA;AACA,wCAAwC,UAAU;AAClD,4CAA4C,UAAU;AACtD,4CAA4C,SAAS,EAAE,MAAM;AAC7D,0DAA0D,aAAa,EAAE,YAAY;AACrF,uDAAuD,aAAa,EAAE,YAAY;AAClF;AACA,uCAAuC,QAAQ;AAC/C;AACA,2CAA2C,GAAG;AAC9C;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,4DAA4D,gBAAgB;AAC5E;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,iBAAiB;AACjE;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC7ZA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;AC5BA;;AAEA;;AAEA;AACA,OAAO,iEAAiE;;AAExE;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,mCAAmC,GAAG;AACtC,mCAAmC,GAAG;AACtC,mCAAmC,GAAG;AACtC,mCAAmC,GAAG;AACtC,mCAAmC,GAAG;AACtC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,mCAAmC,GAAG;AACtC,mCAAmC,GAAG;AACtC,mCAAmC,GAAG;AACtC;AACA;AACA;AACA;AACA,iCAAiC,GAAG;AACpC;AACA;AACA,kCAAkC,GAAG;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,GAAG;AACpC;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yDAAyD;AACzD;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,4FAA4F;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gGAAgG;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kGAAkG;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,kDAAkD,WAAW;AAC7D;;AAEA;AACA;AACA;AACA;;AAEA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5hBA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,oCAAoC,OAAO;AAC3C,+BAA+B,OAAO;AACtC,iCAAiC,OAAO;AACxC,kCAAkC,OAAO;AACzC,kCAAkC,OAAO;AACzC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,SAAS;AAC3C,mCAAmC,SAAS;AAC5C;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,mDAAmD,iBAAiB;AACpE;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1NA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,4BAA4B,gFAAgF,0BAA0B,gCAAgC,YAAY,sCAAsC,YAAY,wCAAwC;AAC5Q,4BAA4B,gFAAgF,0BAA0B,gCAAgC,YAAY,sCAAsC,YAAY,wCAAwC;AAC5Q,4BAA4B,gFAAgF,0BAA0B,gCAAgC,YAAY,sCAAsC,YAAY,wCAAwC;AAC5Q,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;ACnCA;;AAEA;;AAEA;AACA,OAAO,kDAAkD;;AAEzD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iCAAiC,OAAO;AACxC;AACA,mCAAmC,SAAS;AAC5C;AACA,iCAAiC,OAAO;AACxC,iCAAiC,OAAO;AACxC,oCAAoC,OAAO;AAC3C,kCAAkC,OAAO;AACzC;AACA,iBAAiB;AACjB;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C;AACA,sCAAsC,OAAO;AAC7C;AACA;AACA,wCAAwC,GAAG;AAC3C;AACA;AACA,+CAA+C,GAAG;AAClD,iDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA,iDAAiD,SAAS;AAC1D;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C,kDAAkD,GAAG;AACrD;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C,kDAAkD,GAAG;AACrD;AACA;AACA,gCAAgC,cAAc;AAC9C;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjqBAAqB;AACrqBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;;AAEA,sCAAsC;AACtC;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yDAAyD;AACzD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,+DAA+D;AAC/D;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,gGAAgG;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kGAAkG;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8FAA8F;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qDAAqD;AACrD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oDAAoD;AACpD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxhCA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,0BAA0B,GAAG,QAAQ,OAAO;AAC5C,iCAAiC,GAAG;AACpC,gCAAgC,GAAG;AACnC,gCAAgC,GAAG,EAAE,OAAO;AAC5C,iCAAiC,GAAG;AACpC;AACA,iBAAiB;AACjB;AACA;AACA,0BAA0B,GAAG,QAAQ,OAAO;AAC5C,iCAAiC,GAAG;AACpC,gCAAgC,GAAG;AACnC,gCAAgC,GAAG,EAAE,OAAO;AAC5C,iCAAiC,GAAG;AACpC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,yGAAyG;AACrI,4BAA4B,yGAAyG;AACrI,+BAA+B,yGAAyG;AACxI,aAAa;AACb,SAAS;AACT;;AAEA,mCAAmC;AACnC;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA,0DAA0D,qBAAqB;AAC/E;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D,iDAAiD,WAAW;AAC5D;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9PA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;ACxBA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA,2BAA2B,4BAA4B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,mDAAmD,kBAAkB;AACrE;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,uBAAuB;AACvB;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;;;;;;;;AC9PA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,kCAAkC,OAAO;AACzC,kCAAkC,OAAO;AACzC,kCAAkC,OAAO;AACzC;AACA,iBAAiB;AACjB;AACA;AACA;AACA,kCAAkC,SAAS;AAC3C,kCAAkC,SAAS,WAAW,aAAa;AACnE,kCAAkC,SAAS;AAC3C,kCAAkC,SAAS;AAC3C,kCAAkC,SAAS,SAAS,GAAG;AACvD;AACA;AACA;AACA;AACA,kCAAkC,SAAS;AAC3C,kCAAkC,SAAS;AAC3C,kCAAkC,SAAS;AAC3C;AACA;AACA;AACA,kCAAkC,SAAS,SAAS,GAAG;AACvD;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,qEAAqE;AACjG,4BAA4B,qEAAqE;AACjG,4BAA4B,qEAAqE;AACjG,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA,6CAA6C;AAC7C;AACA;AACA,SAAS;AACT;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxOA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;;;;;;;ACjDA;;AAEA;;AAEA;AACA,OAAO,mIAAmI;;AAE1I;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB,0BAA0B;AAC1B,2BAA2B;AAC3B,4BAA4B;AAC5B,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,4FAA4F;AACzG;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;;AAEA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA,sCAAsC,WAAW;AACjD;AACA;AACA;AACA;;AAEA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mDAAmD,WAAW;AAC9D,6BAA6B,mBAAmB;AAChD;;AAEA,8FAA8F;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gGAAgG;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kGAAkG;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA,+BAA+B,8BAA8B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClyBA;;AAEA;;AAEA;AACA,OAAO,mDAAmD;;AAE1D;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,kCAAkC,KAAK;AACvC,kCAAkC,KAAK;AACvC,kCAAkC,KAAK;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,KAAK;AACvC,kCAAkC,KAAK;AACvC;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;;AAEA,sCAAsC;AACtC;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sBAAsB;AACtB;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gGAAgG;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kGAAkG;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;;;;;;;;AChgBA;;AAEA;;AAEA;AACA,OAAO,kDAAkD;;AAEzD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA,qCAAqC,OAAO;AAC5C;AACA,iCAAiC,OAAO;AACxC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,mFAAmF,0BAA0B,8BAA8B,YAAY,oCAAoC,YAAY,+BAA+B;AAClQ,4BAA4B,mFAAmF,0BAA0B,8BAA8B,YAAY,oCAAoC,YAAY,+BAA+B;AAClQ,4BAA4B,mFAAmF,0BAA0B,2BAA2B,YAAY,oCAAoC,YAAY,kCAAkC;AAClQ,4BAA4B,mFAAmF,0BAA0B,8BAA8B,YAAY,oCAAoC,YAAY,sCAAsC;AACzQ,4BAA4B,mFAAmF,0BAA0B,8BAA8B,YAAY,oCAAoC,YAAY,sCAAsC;AACzQ,8BAA8B,yFAAyF,0BAA0B,8BAA8B,YAAY,oCAAoC,YAAY,+BAA+B;AAC1Q,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA,gGAAgG;AAChG;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA,8FAA8F;AAC9F;AACA;AACA;AACA,uDAAuD,yBAAyB;AAChF;AACA;AACA;;;;;;;;ACtKA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,mDAAmD,eAAe;AAClE;;AAEA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtOA;;AAEA;;AAEA;AACA,OAAO,gFAAgF;;AAEvF;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,sCAAsC;AACtC;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA,4FAA4F;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;;AAEA,gGAAgG;AAChG;AACA;AACA,SAAS;AACT;AACA;;AAEA,kGAAkG;AAClG;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9gBA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,mCAAmC,GAAG;AACtC,mCAAmC,GAAG;AACtC;AACA;AACA;AACA;AACA;AACA,iCAAiC,GAAG;AACpC,iCAAiC,GAAG;AACpC;AACA,sCAAsC,GAAG;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,GAAG;AACpC;AACA;AACA,iCAAiC,GAAG;AACpC,sCAAsC,GAAG;AACzC;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yDAAyD;AACzD;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA,iDAAiD,iBAAiB;AAClE;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnTA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,0BAA0B,KAAK;AAC/B,0BAA0B,KAAK;AAC/B,0BAA0B,KAAK;AAC/B,0BAA0B,KAAK,SAAS,KAAK;AAC7C,0BAA0B,KAAK,SAAS,KAAK,EAAE,GAAG;AAClD,0BAA0B,KAAK,cAAc,KAAK,EAAE,MAAM,EAAE,IAAI;AAChE;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,0FAA0F;AACtH,4BAA4B,2FAA2F;AACvH,4BAA4B,wFAAwF;AACpH,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACpSA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,wGAAwG;AACpI,4BAA4B,uGAAuG;AACnI,4BAA4B,uGAAuG;AACnI,4BAA4B,wGAAwG;AACpI,4BAA4B,uGAAuG;AACnI,4BAA4B,uGAAuG;AACnI,aAAa;AACb,SAAS;AACT;;AAEA,mCAAmC;AACnC;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA,SAAS;AACT;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D,8CAA8C,WAAW;AACzD;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtLA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,kCAAkC,aAAa;AAC/C,sCAAsC,KAAK;AAC3C,8CAA8C,KAAK;AACnD,4CAA4C,KAAK;AACjD,4CAA4C,KAAK;AACjD,4CAA4C,KAAK;AACjD,4CAA4C,KAAK,EAAE,UAAU;AAC7D;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qCAAqC,SAAS;AAC9C;AACA;AACA,+CAA+C,SAAS;AACxD,4CAA4C,SAAS;AACrD;AACA,8CAA8C,KAAK;AACnD,sCAAsC,QAAQ;AAC9C,mCAAmC,SAAS;AAC5C,gCAAgC,KAAK;AACrC;AACA;AACA;AACA;AACA,uCAAuC,SAAS;AAChD;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA,SAAS;AACT;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,0CAA0C,iBAAiB;AAC3D;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjOA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA,4BAA4B,qHAAqH;AACjJ,4BAA4B,qHAAqH;AACjJ,4BAA4B,qHAAqH;AACjJ,4BAA4B,qHAAqH;AACjJ,4BAA4B,qHAAqH;AACjJ,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;ACnCA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;AC7BA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,+BAA+B,GAAG;AAClC,+BAA+B,GAAG;AAClC,+BAA+B,GAAG;AAClC,yCAAyC,GAAG;AAC5C,yCAAyC,GAAG;AAC5C;AACA,iBAAiB;AACjB;AACA;AACA,+CAA+C,KAAK;AACpD;AACA;AACA,yCAAyC,YAAY;AACrD;AACA,sCAAsC,KAAK;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,KAAK;AAC3C,4CAA4C,GAAG;AAC/C;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,kEAAkE;AAC9F,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA,mCAAmC;AACnC;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA,SAAS;AACT;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/MA;;AAEA;;AAEA;AACA,OAAO,kEAAkE;;AAEzE;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA,wFAAwF;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,SAAS;AACT,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAsC;AACtC;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;;AAEA,8FAA8F;AAC9F;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,4FAA4F;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA,yDAAyD;AACzD;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;;AAEA,gGAAgG;AAChG;AACA;AACA;;AAEA,kGAAkG;AAClG;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,6BAA6B,mBAAmB;AAChD;;AAEA,mFAAmF;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,uDAAuD,mBAAmB;AAC1E,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,+DAA+D;AAC/D;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,qDAAqD;AACrD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA,kCAAkC,kBAAkB;AACpD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClvBA;;AAEA;;AAEA;AACA,OAAO,qCAAqC;;AAE5C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,4BAA4B,sGAAsG;AAClI,4BAA4B,sGAAsG;AAClI,4BAA4B,sGAAsG;AAClI,4BAA4B,sGAAsG;AAClI,4BAA4B,sGAAsG;AAClI,4BAA4B,sGAAsG;AAClI,4BAA4B,sGAAsG;AAClI,aAAa;AACb,SAAS;AACT;;AAEA,mCAAmC;AACnC;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA,SAAS;AACT;;AAEA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnPA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;AC3BA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gCAAgC,OAAO;AACvC;AACA,+BAA+B,OAAO;AACtC,iCAAiC,OAAO;AACxC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA,SAAS;AACT;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;;;;;;;;AC1PA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;AC3BA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gCAAgC,GAAG;AACnC,gCAAgC,GAAG;AACnC,gCAAgC,GAAG;AACnC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,mCAAmC,GAAG;AACtC;AACA,oCAAoC,GAAG;AACvC;AACA,gCAAgC,GAAG;AACnC,gCAAgC,GAAG;AACnC,gCAAgC,QAAQ;AACxC,gCAAgC,QAAQ,SAAS,GAAG;AACpD,gCAAgC,QAAQ;AACxC,gCAAgC,QAAQ;AACxC,gCAAgC,QAAQ,YAAY,GAAG;AACvD;AACA,uCAAuC,GAAG;AAC1C,0CAA0C,GAAG;AAC7C;AACA;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA,gCAAgC,QAAQ,SAAS,GAAG;AACpD,gCAAgC,QAAQ;AACxC;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA,SAAS;AACT;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9PA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;ACnEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;AC3BA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,OAAO,EAAE,KAAK;AAC5C,iCAAiC,GAAG;AACpC,+BAA+B,OAAO,EAAE,KAAK;AAC7C;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA,SAAS;AACT;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;;;;;;;ACjNA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;AC3BA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+CAA+C;AAC/C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA,SAAS;AACT;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,uBAAuB;AACvB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,gBAAgB;AAChB;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxPA;;AAEA;;AAEA;AACA,OAAO,kEAAkE;;AAEzE;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iCAAiC,KAAK;AACtC,gCAAgC,KAAK;AACrC,iCAAiC,KAAK;AACtC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA,8DAA8D;AAC9D;AACA;AACA;;;;;;;;AC9HA;;AAEA;;AAEA;AACA,OAAO,mDAAmD;;AAE1D;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA,iCAAiC,OAAO;AACxC,uCAAuC,OAAO,EAAE,YAAY;AAC5D,uCAAuC,OAAO,EAAE,YAAY;AAC5D,uCAAuC,OAAO;AAC9C,uCAAuC,OAAO;AAC9C;AACA,iCAAiC,OAAO;AACxC;AACA,+BAA+B,OAAO;AACtC;AACA,iCAAiC,OAAO;AACxC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA,iCAAiC,OAAO;AACxC;AACA,iCAAiC,OAAO;AACxC;AACA,+BAA+B,OAAO;AACtC;AACA;AACA,gCAAgC,GAAG;AACnC;AACA,mCAAmC,GAAG;AACtC;AACA,gCAAgC,GAAG;AACnC,uCAAuC,OAAO,EAAE,YAAY;AAC5D,uCAAuC,OAAO,EAAE,YAAY;AAC5D,uCAAuC,OAAO,EAAE,YAAY;AAC5D,uCAAuC,OAAO,EAAE,YAAY;AAC5D,uCAAuC,OAAO;AAC9C,uCAAuC,OAAO;AAC9C,uCAAuC,OAAO;AAC9C,uCAAuC,OAAO;AAC9C,uCAAuC,OAAO;AAC9C,6CAA6C,OAAO,EAAE,YAAY;AAClE,6CAA6C,OAAO,EAAE,YAAY;AAClE,6CAA6C,OAAO;AACpD,6CAA6C,OAAO;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA,sBAAsB;AACtB,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iGAAiG;AACjG;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;;;;;;;ACpVA;;AAEA;;AAEA;AACA,OAAO,mDAAmD;;AAE1D;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gCAAgC,KAAK;AACrC;AACA,iCAAiC,KAAK;AACtC,iCAAiC,KAAK;AACtC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB,qBAAqB;AACrB;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA,+BAA+B,uBAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qDAAqD;AACrD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,oEAAoE;AACpE;AACA;AACA;AACA,4EAA4E;AAC5E;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACvMA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,QAAQ;AAC5C,0CAA0C,GAAG;AAC7C;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;AC/EA;;AAEA;;AAEA;AACA,OAAO,gBAAgB;;AAEvB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gCAAgC,KAAK;AACrC,qCAAqC,KAAK;AAC1C;AACA,yCAAyC,KAAK;AAC9C;AACA,qCAAqC,KAAK;AAC1C,iCAAiC,KAAK;AACtC,iCAAiC,KAAK;AACtC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iCAAiC,SAAS;AAC1C,qCAAqC,SAAS,EAAE,KAAK;AACrD,iCAAiC,SAAS,EAAE,KAAK;AACjD,iCAAiC,SAAS,EAAE,KAAK;AACjD,gCAAgC,SAAS,EAAE,KAAK;AAChD;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA,sBAAsB;AACtB;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,0CAA0C;AAC1C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA,gDAAgD,WAAW;AAC3D;AACA;AACA;AACA;;AAEA,gGAAgG;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kGAAkG;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA,2DAA2D;AAC3D;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"static/js/0.11030551.chunk.js","sourcesContent":["\"use strict\";\n\n/*\n\nMIT License\n\nCopyright (c) 2017 Igor Kroitor\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n\nconst Exchange  = require ('./js/base/Exchange')\nconst functions = require ('./js/base/functions')\nconst errors    = require ('./js/base/errors')\n\n//-----------------------------------------------------------------------------\n// this is updated by vss.js when building\n\nconst version = '1.10.487'\n\nExchange.ccxtVersion = version\n\n//-----------------------------------------------------------------------------\n\nconst exchanges = {\n    '_1broker':                require ('./js/_1broker.js'),\n    '_1btcxe':                 require ('./js/_1btcxe.js'),\n    'acx':                     require ('./js/acx.js'),\n    'allcoin':                 require ('./js/allcoin.js'),\n    'anxpro':                  require ('./js/anxpro.js'),\n    'binance':                 require ('./js/binance.js'),\n    'bit2c':                   require ('./js/bit2c.js'),\n    'bitbay':                  require ('./js/bitbay.js'),\n    'bitcoincoid':             require ('./js/bitcoincoid.js'),\n    'bitfinex':                require ('./js/bitfinex.js'),\n    'bitfinex2':               require ('./js/bitfinex2.js'),\n    'bitflyer':                require ('./js/bitflyer.js'),\n    'bithumb':                 require ('./js/bithumb.js'),\n    'bitlish':                 require ('./js/bitlish.js'),\n    'bitmarket':               require ('./js/bitmarket.js'),\n    'bitmex':                  require ('./js/bitmex.js'),\n    'bitso':                   require ('./js/bitso.js'),\n    'bitstamp':                require ('./js/bitstamp.js'),\n    'bitstamp1':               require ('./js/bitstamp1.js'),\n    'bittrex':                 require ('./js/bittrex.js'),\n    'bl3p':                    require ('./js/bl3p.js'),\n    'bleutrade':               require ('./js/bleutrade.js'),\n    'btcbox':                  require ('./js/btcbox.js'),\n    'btcchina':                require ('./js/btcchina.js'),\n    'btcexchange':             require ('./js/btcexchange.js'),\n    'btcmarkets':              require ('./js/btcmarkets.js'),\n    'btctradeua':              require ('./js/btctradeua.js'),\n    'btcturk':                 require ('./js/btcturk.js'),\n    'btcx':                    require ('./js/btcx.js'),\n    'bter':                    require ('./js/bter.js'),\n    'bxinth':                  require ('./js/bxinth.js'),\n    'ccex':                    require ('./js/ccex.js'),\n    'cex':                     require ('./js/cex.js'),\n    'chbtc':                   require ('./js/chbtc.js'),\n    'chilebit':                require ('./js/chilebit.js'),\n    'coincheck':               require ('./js/coincheck.js'),\n    'coinfloor':               require ('./js/coinfloor.js'),\n    'coingi':                  require ('./js/coingi.js'),\n    'coinmarketcap':           require ('./js/coinmarketcap.js'),\n    'coinmate':                require ('./js/coinmate.js'),\n    'coinsecure':              require ('./js/coinsecure.js'),\n    'coinspot':                require ('./js/coinspot.js'),\n    'cryptopia':               require ('./js/cryptopia.js'),\n    'dsx':                     require ('./js/dsx.js'),\n    'exmo':                    require ('./js/exmo.js'),\n    'flowbtc':                 require ('./js/flowbtc.js'),\n    'foxbit':                  require ('./js/foxbit.js'),\n    'fybse':                   require ('./js/fybse.js'),\n    'fybsg':                   require ('./js/fybsg.js'),\n    'gatecoin':                require ('./js/gatecoin.js'),\n    'gateio':                  require ('./js/gateio.js'),\n    'gdax':                    require ('./js/gdax.js'),\n    'gemini':                  require ('./js/gemini.js'),\n    'getbtc':                  require ('./js/getbtc.js'),\n    'hitbtc':                  require ('./js/hitbtc.js'),\n    'hitbtc2':                 require ('./js/hitbtc2.js'),\n    'huobi':                   require ('./js/huobi.js'),\n    'huobicny':                require ('./js/huobicny.js'),\n    'huobipro':                require ('./js/huobipro.js'),\n    'independentreserve':      require ('./js/independentreserve.js'),\n    'itbit':                   require ('./js/itbit.js'),\n    'jubi':                    require ('./js/jubi.js'),\n    'kraken':                  require ('./js/kraken.js'),\n    'kucoin':                  require ('./js/kucoin.js'),\n    'kuna':                    require ('./js/kuna.js'),\n    'lakebtc':                 require ('./js/lakebtc.js'),\n    'liqui':                   require ('./js/liqui.js'),\n    'livecoin':                require ('./js/livecoin.js'),\n    'luno':                    require ('./js/luno.js'),\n    'mercado':                 require ('./js/mercado.js'),\n    'mixcoins':                require ('./js/mixcoins.js'),\n    'nova':                    require ('./js/nova.js'),\n    'okcoincny':               require ('./js/okcoincny.js'),\n    'okcoinusd':               require ('./js/okcoinusd.js'),\n    'okex':                    require ('./js/okex.js'),\n    'paymium':                 require ('./js/paymium.js'),\n    'poloniex':                require ('./js/poloniex.js'),\n    'qryptos':                 require ('./js/qryptos.js'),\n    'quadrigacx':              require ('./js/quadrigacx.js'),\n    'quoine':                  require ('./js/quoine.js'),\n    'southxchange':            require ('./js/southxchange.js'),\n    'surbitcoin':              require ('./js/surbitcoin.js'),\n    'therock':                 require ('./js/therock.js'),\n    'tidex':                   require ('./js/tidex.js'),\n    'urdubit':                 require ('./js/urdubit.js'),\n    'vaultoro':                require ('./js/vaultoro.js'),\n    'vbtc':                    require ('./js/vbtc.js'),\n    'virwox':                  require ('./js/virwox.js'),\n    'wex':                     require ('./js/wex.js'),\n    'xbtce':                   require ('./js/xbtce.js'),\n    'yobit':                   require ('./js/yobit.js'),\n    'yunbi':                   require ('./js/yunbi.js'),\n    'zaif':                    require ('./js/zaif.js'),\n    'zb':                      require ('./js/zb.js'),    \n}\n\n//-----------------------------------------------------------------------------\n\nmodule.exports = Object.assign ({ version, Exchange, exchanges: Object.keys (exchanges) }, exchanges, functions, errors)\n\n//-----------------------------------------------------------------------------\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ccxt/ccxt.js","class BaseError extends Error {\n    constructor (message) {\n        super (message)\n        // a workaround to make `instanceof BaseError` work in ES5\n        this.constructor = BaseError\n        this.__proto__   = BaseError.prototype\n        this.message     = message\n    }\n}\n\nclass ExchangeError extends BaseError {\n    constructor (message) {\n        super (message)\n        this.constructor = ExchangeError\n        this.__proto__   = ExchangeError.prototype\n        this.message     = message\n    }\n}\n\nclass NotSupported extends ExchangeError {\n    constructor (message) {\n        super (message)\n        this.constructor = NotSupported\n        this.__proto__   = NotSupported.prototype\n        this.message     = message\n    }\n}\n\nclass AuthenticationError extends ExchangeError {\n    constructor (message) {\n        super (message)\n        this.constructor = AuthenticationError\n        this.__proto__   = AuthenticationError.prototype\n        this.message     = message\n    }\n}\n\nclass InvalidNonce extends ExchangeError {\n    constructor (message) {\n        super (message)\n        this.constructor = InvalidNonce\n        this.__proto__   = InvalidNonce.prototype\n        this.message     = message\n    }\n}\n\nclass InsufficientFunds extends ExchangeError {\n    constructor (message) {\n        super (message)\n        this.constructor = InsufficientFunds\n        this.__proto__   = InsufficientFunds.prototype\n        this.message     = message\n    }\n}\n\nclass InvalidOrder extends ExchangeError {\n    constructor (message) {\n        super (message)\n        this.constructor = InvalidOrder\n        this.__proto__   = InvalidOrder.prototype\n        this.message     = message\n    }\n}\n\nclass OrderNotFound extends InvalidOrder {\n    constructor (message) {\n        super (message)\n        this.constructor = OrderNotFound\n        this.__proto__   = OrderNotFound.prototype\n        this.message     = message\n    }\n}\n\nclass OrderNotCached extends InvalidOrder {\n    constructor (message) {\n        super (message)\n        this.constructor = OrderNotCached\n        this.__proto__   = OrderNotCached.prototype\n        this.message     = message\n    }\n}\n\nclass CancelPending extends InvalidOrder {\n    constructor (message) {\n        super (message)\n        this.constructor = CancelPending\n        this.__proto__   = CancelPending.prototype\n        this.message     = message\n    }\n}\n\nclass NetworkError extends BaseError {\n    constructor (message) {\n        super (message)\n        this.constructor = NetworkError\n        this.__proto__   = NetworkError.prototype\n        this.message     = message\n    }\n}\n\nclass DDoSProtection extends NetworkError {\n    constructor (message) {\n        super (message)\n        this.constructor = DDoSProtection\n        this.__proto__   = DDoSProtection.prototype\n        this.message     = message\n    }\n}\n\nclass RequestTimeout extends NetworkError {\n    constructor (message) {\n        super (message)\n        this.constructor = RequestTimeout\n        this.__proto__   = RequestTimeout.prototype\n        this.message     = message\n    }\n}\n\nclass ExchangeNotAvailable extends NetworkError {\n    constructor (message) {\n        super (message)\n        this.constructor = ExchangeNotAvailable\n        this.__proto__   = ExchangeNotAvailable.prototype\n        this.message     = message\n    }\n}\n\nmodule.exports = {\n\n    BaseError,\n    ExchangeError,\n    NotSupported,\n    AuthenticationError,\n    InvalidNonce,\n    InsufficientFunds,\n    InvalidOrder,\n    OrderNotFound,\n    OrderNotCached,\n    CancelPending,\n    NetworkError,\n    DDoSProtection,\n    RequestTimeout,\n    ExchangeNotAvailable,\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/base/errors.js\n// module id = 309\n// module chunks = 0","\"use strict\";\n\n//-----------------------------------------------------------------------------\n\nconst isNode    = (typeof window === 'undefined')\n    , functions = require ('./functions')\n    , throttle  = require ('./throttle')\n    , fetch     = require ('fetch-ponyfill')().fetch\n    , Market    = require ('./Market')\n\nconst { deepExtend\n      , extend\n      , sleep\n      , timeout\n      , flatten\n      , indexBy\n      , sortBy\n      , groupBy\n      , aggregate\n      , uuid\n      , precisionFromString } = functions\n\nconst { ExchangeError\n      , NotSupported\n      , AuthenticationError\n      , DDoSProtection\n      , RequestTimeout\n      , ExchangeNotAvailable } = require ('./errors')\n\n// stub until we get a better solution for Webpack and React\n// const journal = isNode && require ('./journal')\nconst journal = undefined\n\nmodule.exports = class Exchange {\n\n    getMarket (symbol) {\n\n        if (!this.marketClasses)\n            this.marketClasses = {}\n\n        let marketClass = this.marketClasses[symbol]\n\n        if (marketClass)\n            return marketClass\n\n        marketClass = new Market (this, symbol)\n        this.marketClasses[symbol] = marketClass // only one Market instance per market\n        return marketClass\n    }\n\n    describe () { return {} }\n\n    constructor (userConfig = {}) {\n\n        Object.assign (this, functions, { encode: string => string, decode: string => string })\n\n        if (isNode)\n            this.nodeVersion = process.version.match (/\\d+\\.\\d+.\\d+/) [0]\n\n        // this.initRestRateLimiter ()\n\n        // if (isNode) {\n        //     this.userAgent = {\n        //         'User-Agent': 'ccxt/' + Exchange.ccxtVersion +\n        //             ' (+https://github.com/ccxt/ccxt)' +\n        //             ' Node.js/' + this.nodeVersion + ' (JavaScript)'\n        //     }\n        // }\n\n        this.userAgents = {\n            'chrome': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36',\n            'chrome39': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36',\n        }\n\n        this.headers = {}\n\n        // prepended to URL, like https://proxy.com/https://exchange.com/api...\n        this.proxy = ''\n\n        this.iso8601          = timestamp => new Date (timestamp).toISOString ()\n        this.parse8601        = x => Date.parse (((x.indexOf ('+') >= 0) || (x.slice (-1) == 'Z')) ? x : (x + 'Z'))\n        this.milliseconds     = Date.now\n        this.microseconds     = () => Math.floor (this.milliseconds () * 1000)\n        this.seconds          = () => Math.floor (this.milliseconds () / 1000)\n        this.id               = undefined\n\n        // rate limiter settings\n        this.enableRateLimit  = false\n        this.rateLimit        = 2000  // milliseconds = seconds * 1000\n\n        this.parseJsonResponse             = true  // whether a reply is required to be in JSON or not\n        this.substituteCommonCurrencyCodes = true  // reserved\n        this.parseBalanceFromOpenOrders    = false // some exchanges return balance updates from order API endpoints\n\n        this.timeout          = 10000 // milliseconds\n        this.verbose          = false\n        this.debug            = false\n        this.journal          = 'debug.json'\n        this.userAgent        = undefined\n        this.twofa            = false // two-factor authentication (2FA)\n        this.timeframes       = undefined\n        this.hasPublicAPI         = true\n        this.hasPrivateAPI        = true\n        this.hasCORS              = false\n        this.hasDeposit           = false\n        this.hasFetchBalance      = true\n        this.hasFetchClosedOrders = false\n        this.hasFetchCurrencies   = false\n        this.hasFetchMyTrades     = false\n        this.hasFetchOHLCV        = false\n        this.hasFetchOpenOrders   = false\n        this.hasFetchOrder        = false\n        this.hasFetchOrderBook    = true\n        this.hasFetchOrders       = false\n        this.hasFetchTicker       = true\n        this.hasFetchTickers      = false\n        this.hasFetchTrades       = true\n        this.hasWithdraw          = false\n        this.hasCreateOrder       = this.hasPrivateAPI\n        this.hasCancelOrder       = this.hasPrivateAPI\n\n        this.requiredCredentials = {\n            'apiKey':   true,\n            'secret':   true,\n            'uid':      false,\n            'login':    false,\n            'password': false,\n        }\n\n        this.balance    = {}\n        this.orderbooks = {}\n        this.tickers    = {}\n        this.fees       = {}\n        this.orders     = {}\n        this.trades     = {}\n        this.currencies = {}\n\n        this.last_http_response = undefined\n        this.last_json_response = undefined\n\n        this.arrayConcat = (a, b) => a.concat (b)\n\n        // TODO: generate\n        this.market_id                   = this.marketId\n        this.market_ids                  = this.marketIds\n        this.array_concat                = this.arrayConcat\n        this.implode_params              = this.implodeParams\n        this.extract_params              = this.extractParams\n        this.fetch_balance               = this.fetchBalance\n        this.fetch_free_balance          = this.fetchFreeBalance\n        this.fetch_used_balance          = this.fetchUsedBalance\n        this.fetch_total_balance         = this.fetchTotalBalance\n        this.fetch_l2_order_book         = this.fetchL2OrderBook\n        this.fetch_order_book            = this.fetchOrderBook\n        this.fetch_tickers               = this.fetchTickers\n        this.fetch_ticker                = this.fetchTicker\n        this.fetch_trades                = this.fetchTrades\n        this.fetch_order                 = this.fetchOrder\n        this.fetch_orders                = this.fetchOrders\n        this.fetch_open_orders           = this.fetchOpenOrders\n        this.fetch_closed_orders         = this.fetchClosedOrders\n        this.fetch_order_status          = this.fetchOrderStatus\n        this.fetch_markets               = this.fetchMarkets\n        this.load_markets                = this.loadMarkets\n        this.set_markets                 = this.setMarkets\n        this.parse_balance               = this.parseBalance\n        this.parse_bid_ask               = this.parseBidAsk\n        this.parse_bids_asks             = this.parseBidsAsks\n        this.parse_order_book            = this.parseOrderBook\n        this.parse_trades                = this.parseTrades\n        this.parse_orders                = this.parseOrders\n        this.parse_ohlcv                 = this.parseOHLCV\n        this.parse_ohlcvs                = this.parseOHLCVs\n        this.edit_limit_buy_order        = this.editLimitBuyOrder\n        this.edit_limit_sell_order       = this.editLimitSellOrder\n        this.edit_limit_order            = this.editLimitOrder\n        this.edit_order                  = this.editOrder\n        this.create_limit_buy_order      = this.createLimitBuyOrder\n        this.create_limit_sell_order     = this.createLimitSellOrder\n        this.create_market_buy_order     = this.createMarketBuyOrder\n        this.create_market_sell_order    = this.createMarketSellOrder\n        this.create_order                = this.createOrder\n        this.calculate_fee               = this.calculateFee\n        this.common_currency_code        = this.commonCurrencyCode\n        this.price_to_precision          = this.priceToPrecision\n        this.amount_to_precision         = this.amountToPrecision\n        this.fee_to_precision            = this.feeToPrecision\n        this.cost_to_precision           = this.costToPrecision\n        this.precisionFromString         = precisionFromString\n        this.precision_from_string       = precisionFromString\n        this.truncate                    = functions.truncate\n        this.uuid                        = uuid\n\n        // API methods metainfo\n        this.has = {\n            'cancelOrder': this.hasPrivateAPI,\n            'createDepositAddress': false,\n            'createOrder': this.hasPrivateAPI,\n            'deposit': false,\n            'fetchBalance': this.hasPrivateAPI,\n            'fetchClosedOrders': false,\n            'fetchCurrencies': false,\n            'fetchDepositAddress': false,\n            'fetchMarkets': true,\n            'fetchMyTrades': false,\n            'fetchOHLCV': false,\n            'fetchOpenOrders': false,\n            'fetchOrder': false,\n            'fetchOrderBook': true,\n            'fetchOrders': false,\n            'fetchTicker': true,\n            'fetchTickers': false,\n            'fetchTrades': true,\n            'withdraw': false,\n        }\n\n        // merge configs\n        const config = deepExtend (this.describe (), userConfig)\n\n        // merge to this\n        for (const [property, value] of Object.entries (config))\n            this[property] = deepExtend (this[property], value)\n\n        if (this.api)\n            this.defineRestApi (this.api, 'request')\n\n        this.initRestRateLimiter ()\n\n        if (this.markets)\n            this.setMarkets (this.markets)\n\n        if (this.debug && journal) {\n            journal (() => this.journal, this, Object.keys (this.has))\n        }\n    }\n\n    defaults () {\n        return { /* override me */ }\n    }\n\n    nonce () {\n        return this.seconds ()\n    }\n\n    encodeURIComponent (...args) {\n        return encodeURIComponent (...args)\n    }\n\n    checkRequiredCredentials () {\n        Object.keys (this.requiredCredentials).map (key => {\n            if (this.requiredCredentials[key] && !this[key])\n                throw new AuthenticationError (this.id + ' requires `' + key + '`')\n        })\n    }\n\n    initRestRateLimiter () {\n\n        this.tokenBucket = this.extend ({\n            refillRate:  1 / this.rateLimit,\n            delay:       1,\n            capacity:    1,\n            defaultCost: 1,\n            maxCapacity: 1000,\n        }, this.tokenBucket)\n\n        this.throttle = throttle (this.tokenBucket)\n\n        this.executeRestRequest = function (url, method = 'GET', headers = undefined, body = undefined) {\n\n            let promise =\n                fetch (url, { 'method': method, 'headers': headers, 'body': body, 'agent': this.tunnelAgent || null, timeout: this.timeout})\n                    .catch (e => {\n                        if (isNode)\n                            throw new ExchangeNotAvailable ([ this.id, method, url, e.type, e.message ].join (' '))\n                        throw e // rethrow all unknown errors\n                    })\n                    .then (response => this.handleRestErrors (response, url, method, headers, body))\n                    .then (response => this.handleRestResponse (response, url, method, headers, body))\n\n            return timeout (this.timeout, promise).catch (e => {\n                if (e instanceof RequestTimeout)\n                    throw new RequestTimeout (this.id + ' ' + method + ' ' + url + ' ' + e.message + ' (' + this.timeout + ' ms)')\n                throw e\n            })\n        }\n    }\n\n    defineRestApi (api, methodName, options = {}) {\n\n        for (const type of Object.keys (api)) {\n            for (const httpMethod of Object.keys (api[type])) {\n\n                let urls = api[type][httpMethod]\n                for (let i = 0; i < urls.length; i++) {\n                    let url = urls[i].trim ()\n                    let splitPath = url.split (/[^a-zA-Z0-9]/)\n\n                    let uppercaseMethod  = httpMethod.toUpperCase ()\n                    let lowercaseMethod  = httpMethod.toLowerCase ()\n                    let camelcaseMethod  = this.capitalize (lowercaseMethod)\n                    let camelcaseSuffix  = splitPath.map (this.capitalize).join ('')\n                    let underscoreSuffix = splitPath.map (x => x.trim ().toLowerCase ()).filter (x => x.length > 0).join ('_')\n\n                    if (camelcaseSuffix.indexOf (camelcaseMethod) === 0)\n                        camelcaseSuffix = camelcaseSuffix.slice (camelcaseMethod.length)\n\n                    if (underscoreSuffix.indexOf (lowercaseMethod) === 0)\n                        underscoreSuffix = underscoreSuffix.slice (lowercaseMethod.length)\n\n                    let camelcase  = type + camelcaseMethod + this.capitalize (camelcaseSuffix)\n                    let underscore = type + '_' + lowercaseMethod + '_' + underscoreSuffix\n\n                    if ('suffixes' in options) {\n                        if ('camelcase' in options['suffixes'])\n                            camelcase += options['suffixes']['camelcase']\n                        if ('underscore' in options.suffixes)\n                            underscore += options['suffixes']['underscore']\n                    }\n\n                    if ('underscore_suffix' in options)\n                        underscore += options.underscoreSuffix;\n                    if ('camelcase_suffix' in options)\n                        camelcase += options.camelcaseSuffix;\n\n                    let partial = async params => this[methodName] (url, type, uppercaseMethod, params || {})\n\n                    this[camelcase]  = partial\n                    this[underscore] = partial\n                }\n            }\n        }\n    }\n\n    fetch (url, method = 'GET', headers = undefined, body = undefined) {\n\n        if (isNode && this.userAgent) {\n            if (typeof this.userAgent == 'string')\n                headers = extend ({ 'User-Agent': this.userAgent }, headers)\n            else if ((typeof this.userAgent == 'object') && ('User-Agent' in this.userAgent))\n                headers = extend (this.userAgent, headers)\n        }\n\n        if (typeof this.proxy == 'function') {\n\n            url = this.proxy (url)\n            if (isNode)\n                headers = extend ({ 'Origin': '*' }, headers)\n\n        } else if (typeof this.proxy == 'string') {\n\n            if (this.proxy.length)\n                if (isNode)\n                    headers = extend ({ 'Origin': '*' }, headers)\n\n            url = this.proxy + url\n        }\n\n        headers = extend (this.headers, headers)\n\n        if (this.verbose)\n            console.log (this.id, method, url, \"\\nRequest:\\n\", headers, body)\n\n        return this.executeRestRequest (url, method, headers, body)\n    }\n\n    async fetch2 (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n\n        if (this.enableRateLimit)\n            await this.throttle ()\n\n        let request = this.sign (path, api, method, params, headers, body)\n        return this.fetch (request.url, request.method, request.headers, request.body)\n    }\n\n    request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        return this.fetch2 (path, api, method, params, headers, body)\n    }\n\n    handleErrors (statusCode, statusText, url, method, headers, body) {\n        // override me\n    }\n\n    defaultErrorHandler (code, reason, url, method, headers, body) {\n        if (this.verbose)\n            console.log (this.id, method, url, code, reason, body ? (\"\\nResponse:\\n\" + body) : '')\n        if ((code >= 200) && (code <= 300))\n            return body\n        let error = undefined\n        this.last_http_response = body\n        let details = body\n        let match = body.match (/\\<title\\>([^<]+)/i)\n        if (match)\n            details = match[1].trim ();\n        if ([ 418, 429 ].includes (code)) {\n            error = DDoSProtection\n        } else if ([ 404, 409, 422, 500, 501, 502, 520, 521, 522, 525 ].includes (code)) {\n            error = ExchangeNotAvailable\n        } else if ([ 400, 403, 405, 503, 530 ].includes (code)) {\n            let ddosProtection = body.match (/cloudflare|incapsula/i)\n            if (ddosProtection) {\n                error = DDoSProtection\n            } else {\n                error = ExchangeNotAvailable\n                details += ' (possible reasons: ' + [\n                    'invalid API keys',\n                    'bad or old nonce',\n                    'exchange is down or offline',\n                    'on maintenance',\n                    'DDoS protection',\n                    'rate-limiting',\n                ].join (', ') + ')'\n            }\n        } else if ([ 408, 504 ].includes (code)) {\n            error = RequestTimeout\n        } else if ([ 401, 511 ].includes (code)) {\n            error = AuthenticationError\n        } else {\n            error = ExchangeError\n        }\n        throw new error ([ this.id, method, url, code, reason, details ].join (' '))\n    }\n\n    handleRestErrors (response, url, method = 'GET', headers = undefined, body = undefined) {\n\n        if (typeof response == 'string')\n            return response\n\n        return response.text ().then (text => {\n\n            const args = [ response.status, response.statusText, url, method, headers, text ]\n\n            this.handleErrors (...args)\n            return this.defaultErrorHandler (...args)\n        })\n    }\n\n    handleRestResponse (response, url, method = 'GET', headers = undefined, body = undefined) {\n\n        try {\n\n            this.last_http_response = response\n            if (this.parseJsonResponse) {\n                this.last_json_response =\n                    ((typeof response == 'string') && (response.length > 1)) ?\n                        JSON.parse (response) : response\n                return this.last_json_response\n            }\n\n            return response\n\n        } catch (e) {\n\n            let maintenance = response.match (/offline|busy|retry|wait|unavailable|maintain|maintenance|maintenancing/i)\n            let ddosProtection = response.match (/cloudflare|incapsula|overload/i)\n\n            if (e instanceof SyntaxError) {\n\n                let error = ExchangeNotAvailable\n                let details = 'not accessible from this location at the moment'\n                if (maintenance)\n                    details = 'offline, on maintenance or unreachable from this location at the moment'\n                if (ddosProtection)\n                    error = DDoSProtection\n                throw new error ([ this.id, method, url, details ].join (' '))\n            }\n\n            if (this.verbose)\n                console.log (this.id, method, url, 'error', e, \"response body:\\n'\" + response + \"'\")\n\n            throw e\n        }\n    }\n\n    setMarkets (markets, currencies = undefined) {\n        let values = Object.values (markets).map (market => deepExtend ({\n            'limits': this.limits,\n            'precision': this.precision,\n        }, this.fees['trading'], market))\n        this.markets = deepExtend (this.markets, indexBy (values, 'symbol'))\n        this.marketsById = indexBy (markets, 'id')\n        this.markets_by_id = this.marketsById\n        this.symbols = Object.keys (this.markets).sort ()\n        this.ids = Object.keys (this.markets_by_id).sort ()\n        if (currencies) {\n            this.currencies = deepExtend (currencies, this.currencies)\n        } else {\n            const baseCurrencies =\n                values.filter (market => 'base' in market)\n                    .map (market => ({\n                        id: market.baseId || market.base,\n                        code: market.base,\n                        precision: market.precision ? (market.precision.base || market.precision.amount) : 8,\n                    }))\n            const quoteCurrencies =\n                values.filter (market => 'quote' in market)\n                    .map (market => ({\n                        id: market.quoteId || market.quote,\n                        code: market.quote,\n                        precision: market.precision ? (market.precision.quote || market.precision.price) : 8,\n                    }))\n            const allCurrencies = baseCurrencies.concat (quoteCurrencies)\n            const groupedCurrencies = groupBy (allCurrencies, 'code')\n            const currencies = Object.keys (groupedCurrencies).map (code =>\n                groupedCurrencies[code].reduce ((previous, current) =>\n                    ((previous.precision > current.precision) ? previous : current), groupedCurrencies[code][0]))\n            const sortedCurrencies = sortBy (flatten (currencies), 'code')\n            this.currencies = deepExtend (indexBy (sortedCurrencies, 'code'), this.currencies)\n        }\n        return this.markets\n    }\n\n    async loadMarkets (reload = false) {\n        if (!reload && this.markets) {\n            if (!this.marketsById) {\n                return this.setMarkets (this.markets)\n            }\n            return this.markets\n        }\n        const markets = await this.fetchMarkets ()\n        let currencies = undefined\n        if (this.has.fetchCurrencies) {\n            currencies = await this.fetchCurrencies ()\n        }\n        return this.setMarkets (markets, currencies)\n    }\n\n    fetchTickers (symbols = undefined, params = {}) {\n        throw new NotSupported (this.id + ' fetchTickers not supported yet')\n    }\n\n    fetchOrder (id, symbol = undefined, params = {}) {\n        throw new NotSupported (this.id + ' fetchOrder not supported yet');\n    }\n\n    fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        throw new NotSupported (this.id + ' fetchOrders not supported yet');\n    }\n\n    fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        throw new NotSupported (this.id + ' fetchOpenOrders not supported yet');\n    }\n\n    fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        throw new NotSupported (this.id + ' fetchClosedOrders not supported yet');\n    }\n\n    fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        throw new NotSupported (this.id + ' fetchMyTrades not supported yet');\n    }\n\n    fetchCurrencies () {\n        throw new NotSupported (this.id + ' fetchCurrencies not supported yet');\n    }\n\n    fetchMarkets () {\n        return new Promise ((resolve, reject) => resolve (this.markets))\n    }\n\n    async fetchOrderStatus (id, market = undefined) {\n        let order = await this.fetchOrder (id)\n        return order['status']\n    }\n\n    account () {\n        return {\n            'free': 0.0,\n            'used': 0.0,\n            'total': 0.0,\n        }\n    }\n\n    commonCurrencyCode (currency) {\n        if (!this.substituteCommonCurrencyCodes)\n            return currency\n        if (currency == 'XBT')\n            return 'BTC'\n        if (currency == 'BCC')\n            return 'BCH'\n        if (currency == 'DRK')\n            return 'DASH'\n        return currency\n    }\n\n    currency (code) {\n\n        if (typeof this.currencies == 'undefined')\n            return new ExchangeError (this.id + ' currencies not loaded')\n\n        if ((typeof code === 'string') && (code in this.currencies))\n            return this.currencies[code]\n\n        throw new ExchangeError (this.id + ' does not have currency code ' + code)\n    }\n\n\n    market (symbol) {\n\n        if (typeof this.markets == 'undefined')\n            return new ExchangeError (this.id + ' markets not loaded')\n\n        if ((typeof symbol === 'string') && (symbol in this.markets))\n            return this.markets[symbol]\n\n        throw new ExchangeError (this.id + ' does not have market symbol ' + symbol)\n    }\n\n    marketId (symbol) {\n        return this.market (symbol).id || symbol\n    }\n\n    marketIds (symbols) {\n        return symbols.map (symbol => this.marketId(symbol));\n    }\n\n    symbol (symbol) {\n        return this.market (symbol).symbol || symbol\n    }\n\n    extractParams (string) {\n        let re = /{([a-zA-Z0-9_]+?)}/g\n        let matches = []\n        let match\n        while (match = re.exec (string))\n            matches.push (match[1])\n        return matches\n    }\n\n    implodeParams (string, params) {\n        for (let property in params)\n            string = string.replace ('{' + property + '}', params[property])\n        return string\n    }\n\n    url (path, params = {}) {\n        let result = this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path))\n        if (Object.keys (query).length)\n            result += '?' + this.urlencode (query)\n        return result\n    }\n\n    parseBidAsk (bidask, priceKey = 0, amountKey = 1) {\n        let price = parseFloat (bidask[priceKey])\n        let amount = parseFloat (bidask[amountKey])\n        return [ price, amount ]\n    }\n\n    parseBidsAsks (bidasks, priceKey = 0, amountKey = 1) {\n        return Object.values (bidasks || []).map (bidask => this.parseBidAsk (bidask, priceKey, amountKey))\n    }\n\n    async fetchL2OrderBook (symbol, params = {}) {\n        let orderbook = await this.fetchOrderBook (symbol, params)\n        return extend (orderbook, {\n            'bids': sortBy (aggregate (orderbook.bids), 0, true),\n            'asks': sortBy (aggregate (orderbook.asks), 0),\n        })\n    }\n\n    parseOrderBook (orderbook, timestamp = undefined, bidsKey = 'bids', asksKey = 'asks', priceKey = 0, amountKey = 1) {\n        timestamp = timestamp || this.milliseconds ();\n        return {\n            'bids': (bidsKey in orderbook) ? this.parseBidsAsks (orderbook[bidsKey], priceKey, amountKey) : [],\n            'asks': (asksKey in orderbook) ? this.parseBidsAsks (orderbook[asksKey], priceKey, amountKey) : [],\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n        };\n    }\n\n    getCurrencyUsedOnOpenOrders (currency) {\n        return Object.values (this.orders).filter (order => (order['status'] == 'open')).reduce ((total, order) => {\n            let symbol = order['symbol'];\n            let market = this.markets[symbol];\n            let amount = order['remaining']\n            if (currency == market['base'] && order['side'] == 'sell') {\n                return total + amount\n            } else if (currency == market['quote'] && order['side'] == 'buy') {\n                return total + (order['cost'] || (order['price'] * amount))\n            } else {\n                return total\n            }\n        }, 0)\n    }\n\n    parseBalance (balance) {\n\n        const currencies = Object.keys (this.omit (balance, 'info'));\n\n        currencies.forEach (currency => {\n\n            if (typeof balance[currency].used == 'undefined') {\n\n                if (this.parseBalanceFromOpenOrders && ('open_orders' in balance['info'])) {\n                    const exchangeOrdersCount = balance['info']['open_orders'];\n                    const cachedOrdersCount = Object.values (this.orders).filter (order => (order['status'] == 'open')).length;\n                    if (cachedOrdersCount == exchangeOrdersCount) {\n                        balance[currency].used = this.getCurrencyUsedOnOpenOrders (currency)\n                        balance[currency].total = balance[currency].used + balance[currency].free\n                    }\n                } else {\n                    balance[currency].used = this.getCurrencyUsedOnOpenOrders (currency)\n                    balance[currency].total = balance[currency].used + balance[currency].free\n                }\n            }\n\n            [ 'free', 'used', 'total' ].forEach (account => {\n                balance[account] = balance[account] || {}\n                balance[account][currency] = balance[currency][account]\n            })\n        })\n        return balance;\n    }\n\n    async fetchPartialBalance (part, params = {}) {\n        let balance = await this.fetchBalance (params)\n        return balance[part]\n    }\n\n    fetchFreeBalance (params = {}) {\n        return this.fetchPartialBalance ('free', params)\n    }\n\n    fetchUsedBalance (params = {}) {\n        return this.fetchPartialBalance ('used', params)\n    }\n\n    fetchTotalBalance (params = {}) {\n        return this.fetchPartialBalance ('total', params)\n    }\n\n    filterBySinceLimit (array, since = undefined, limit = undefined) {\n        if (since)\n            array = array.filter (entry => entry.timestamp > since)\n        if (limit)\n            array = array.slice (0, limit)\n        return array\n    }\n\n    parseTrades (trades, market = undefined, since = undefined, limit = undefined) {\n        let result = Object.values (trades).map (trade => this.parseTrade (trade, market))\n        result = sortBy (result, 'timestamp', true)\n        return this.filterBySinceLimit (result, since, limit)\n    }\n\n    parseOrders (orders, market = undefined, since = undefined, limit = undefined) {\n        let result = Object.values (orders).map (order => this.parseOrder (order, market))\n        return this.filterBySinceLimit (result, since, limit)\n    }\n\n    filterOrdersBySymbol (orders, symbol = undefined) {\n        let grouped = this.groupBy (orders, 'symbol')\n        if (symbol) {\n            if (symbol in grouped)\n                return grouped[symbol]\n            return []\n        }\n        return orders\n    }\n\n    parseOHLCV (ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {\n        return ohlcv\n    }\n\n    parseOHLCVs (ohlcvs, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {\n        ohlcvs = Object.values (ohlcvs)\n        let result = []\n        for (let i = 0; i < ohlcvs.length; i++) {\n            if (limit && (result.length >= limit))\n                break;\n            let ohlcv = this.parseOHLCV (ohlcvs[i], market, timeframe, since, limit)\n            if (since && (ohlcv[0] < since))\n                continue\n            result.push (ohlcv)\n        }\n        return result\n    }\n\n    editLimitBuyOrder (id, symbol, ...args) {\n        return this.editLimitOrder (id, symbol, 'buy', ...args)\n    }\n\n    editLimitSellOrder (id, symbol, ...args) {\n        return this.editLimitOrder (id, symbol, 'sell', ...args)\n    }\n\n    editLimitOrder (id, symbol, ...args) {\n        return this.editOrder (id, symbol, 'limit', ...args)\n    }\n\n    async editOrder (id, symbol, ...args) {\n        if (!this.enableRateLimit)\n            throw new ExchangeError (this.id + ' editOrder() requires enableRateLimit = true')\n        await this.cancelOrder (id, symbol);\n        return this.createOrder (symbol, ...args)\n    }\n\n    createLimitBuyOrder (symbol, ...args) {\n        return this.createOrder  (symbol, 'limit', 'buy', ...args)\n    }\n\n    createLimitSellOrder (symbol, ...args) {\n        return this.createOrder (symbol, 'limit', 'sell', ...args)\n    }\n\n    createMarketBuyOrder (symbol, amount, params = {}) {\n        return this.createOrder (symbol, 'market', 'buy', amount, undefined, params)\n    }\n\n    createMarketSellOrder (symbol, amount, params = {}) {\n        return this.createOrder (symbol, 'market', 'sell', amount, undefined, params)\n    }\n\n    costToPrecision (symbol, cost) {\n        return parseFloat (cost).toFixed (this.markets[symbol].precision.price)\n    }\n\n    priceToPrecision (symbol, price) {\n        return parseFloat (price).toFixed (this.markets[symbol].precision.price)\n    }\n\n    amountToPrecision (symbol, amount) {\n        return this.truncate(amount, this.markets[symbol].precision.amount)\n    }\n\n    amountToLots (symbol, amount) {\n        return this.amountToPrecision (symbol, Math.floor (amount / this.markets[symbol].lot) * this.markets[symbol].lot)\n    }\n\n    feeToPrecision (symbol, fee) {\n        return parseFloat (fee).toFixed (this.markets[symbol].precision.price)\n    }\n\n    calculateFee (symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n        let market = this.markets[symbol]\n        let rate = market[takerOrMaker]\n        let cost = parseFloat (this.costToPrecision (symbol, amount * price))\n        return {\n            'type': takerOrMaker,\n            'currency': market['quote'],\n            'rate': rate,\n            'cost': parseFloat (this.feeToPrecision (symbol, rate * cost)),\n        }\n    }\n\n    Ymd (timestamp, infix = ' ') {\n        let date = new Date (timestamp)\n        let Y = date.getUTCFullYear ()\n        let m = date.getUTCMonth () + 1\n        let d = date.getUTCDate ()\n        m = m < 10 ? ('0' + m) : m\n        d = d < 10 ? ('0' + d) : d\n        return Y + '-' + m + '-' + d\n    }\n\n    YmdHMS (timestamp, infix = ' ') {\n        let date = new Date (timestamp)\n        let Y = date.getUTCFullYear ()\n        let m = date.getUTCMonth () + 1\n        let d = date.getUTCDate ()\n        let H = date.getUTCHours ()\n        let M = date.getUTCMinutes ()\n        let S = date.getUTCSeconds ()\n        m = m < 10 ? ('0' + m) : m\n        d = d < 10 ? ('0' + d) : d\n        H = H < 10 ? ('0' + H) : H\n        M = M < 10 ? ('0' + M) : M\n        S = S < 10 ? ('0' + S) : S\n        return Y + '-' + m + '-' + d + infix + H + ':' + M + ':' + S\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/base/Exchange.js\n// module id = 310\n// module chunks = 0",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory();\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory();\n\t}\n}(this, function () {\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\t    /*\n\t     * Local polyfil of Object.create\n\t     */\n\t    var create = Object.create || (function () {\n\t        function F() {};\n\n\t        return function (obj) {\n\t            var subtype;\n\n\t            F.prototype = obj;\n\n\t            subtype = new F();\n\n\t            F.prototype = null;\n\n\t            return subtype;\n\t        };\n\t    }())\n\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                var subtype = create(this);\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var i = 0; i < thatSigBytes; i += 4) {\n\t                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            var r = (function (m_w) {\n\t                var m_w = m_w;\n\t                var m_z = 0x3ade68b1;\n\t                var mask = 0xffffffff;\n\n\t                return function () {\n\t                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;\n\t                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;\n\t                    var result = ((m_z << 0x10) + m_w) & mask;\n\t                    result /= 0x100000000;\n\t                    result += 0.5;\n\t                    return result * (Math.random() > .5 ? 1 : -1);\n\t                }\n\t            });\n\n\t            for (var i = 0, rcache; i < nBytes; i += 4) {\n\t                var _r = r((rcache || Math.random()) * 0x100000000);\n\n\t                rcache = _r() * 0x3ade67b7;\n\t                words.push((_r() * 0x100000000) | 0);\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                var processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/core.js\n// module id = 311\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./evpkdf\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./evpkdf\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher core components.\n\t */\n\tCryptoJS.lib.Cipher || (function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var Base64 = C_enc.Base64;\n\t    var C_algo = C.algo;\n\t    var EvpKDF = C_algo.EvpKDF;\n\n\t    /**\n\t     * Abstract base cipher template.\n\t     *\n\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n\t     */\n\t    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {WordArray} iv The IV to use for this operation.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Creates this cipher in encryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createEncryptor: function (key, cfg) {\n\t            return this.create(this._ENC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Creates this cipher in decryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createDecryptor: function (key, cfg) {\n\t            return this.create(this._DEC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created cipher.\n\t         *\n\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n\t         */\n\t        init: function (xformMode, key, cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Store transform mode and key\n\t            this._xformMode = xformMode;\n\t            this._key = key;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this cipher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     cipher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-cipher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Adds data to be encrypted or decrypted.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.process('data');\n\t         *     var encrypted = cipher.process(wordArray);\n\t         */\n\t        process: function (dataUpdate) {\n\t            // Append\n\t            this._append(dataUpdate);\n\n\t            // Process available blocks\n\t            return this._process();\n\t        },\n\n\t        /**\n\t         * Finalizes the encryption or decryption process.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after final processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.finalize();\n\t         *     var encrypted = cipher.finalize('data');\n\t         *     var encrypted = cipher.finalize(wordArray);\n\t         */\n\t        finalize: function (dataUpdate) {\n\t            // Final data update\n\t            if (dataUpdate) {\n\t                this._append(dataUpdate);\n\t            }\n\n\t            // Perform concrete-cipher logic\n\t            var finalProcessedData = this._doFinalize();\n\n\t            return finalProcessedData;\n\t        },\n\n\t        keySize: 128/32,\n\n\t        ivSize: 128/32,\n\n\t        _ENC_XFORM_MODE: 1,\n\n\t        _DEC_XFORM_MODE: 2,\n\n\t        /**\n\t         * Creates shortcut functions to a cipher's object interface.\n\t         *\n\t         * @param {Cipher} cipher The cipher to create a helper for.\n\t         *\n\t         * @return {Object} An object with encrypt and decrypt shortcut functions.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n\t         */\n\t        _createHelper: (function () {\n\t            function selectCipherStrategy(key) {\n\t                if (typeof key == 'string') {\n\t                    return PasswordBasedCipher;\n\t                } else {\n\t                    return SerializableCipher;\n\t                }\n\t            }\n\n\t            return function (cipher) {\n\t                return {\n\t                    encrypt: function (message, key, cfg) {\n\t                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n\t                    },\n\n\t                    decrypt: function (ciphertext, key, cfg) {\n\t                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n\t                    }\n\t                };\n\t            };\n\t        }())\n\t    });\n\n\t    /**\n\t     * Abstract base stream cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n\t     */\n\t    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n\t        _doFinalize: function () {\n\t            // Process partial blocks\n\t            var finalProcessedBlocks = this._process(!!'flush');\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 1\n\t    });\n\n\t    /**\n\t     * Mode namespace.\n\t     */\n\t    var C_mode = C.mode = {};\n\n\t    /**\n\t     * Abstract base block cipher mode template.\n\t     */\n\t    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n\t        /**\n\t         * Creates this mode for encryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n\t         */\n\t        createEncryptor: function (cipher, iv) {\n\t            return this.Encryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Creates this mode for decryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n\t         */\n\t        createDecryptor: function (cipher, iv) {\n\t            return this.Decryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created mode.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n\t         */\n\t        init: function (cipher, iv) {\n\t            this._cipher = cipher;\n\t            this._iv = iv;\n\t        }\n\t    });\n\n\t    /**\n\t     * Cipher Block Chaining mode.\n\t     */\n\t    var CBC = C_mode.CBC = (function () {\n\t        /**\n\t         * Abstract base CBC mode.\n\t         */\n\t        var CBC = BlockCipherMode.extend();\n\n\t        /**\n\t         * CBC encryptor.\n\t         */\n\t        CBC.Encryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // XOR and encrypt\n\t                xorBlock.call(this, words, offset, blockSize);\n\t                cipher.encryptBlock(words, offset);\n\n\t                // Remember this block to use with next block\n\t                this._prevBlock = words.slice(offset, offset + blockSize);\n\t            }\n\t        });\n\n\t        /**\n\t         * CBC decryptor.\n\t         */\n\t        CBC.Decryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // Remember this block to use with next block\n\t                var thisBlock = words.slice(offset, offset + blockSize);\n\n\t                // Decrypt and XOR\n\t                cipher.decryptBlock(words, offset);\n\t                xorBlock.call(this, words, offset, blockSize);\n\n\t                // This block becomes the previous block\n\t                this._prevBlock = thisBlock;\n\t            }\n\t        });\n\n\t        function xorBlock(words, offset, blockSize) {\n\t            // Shortcut\n\t            var iv = this._iv;\n\n\t            // Choose mixing block\n\t            if (iv) {\n\t                var block = iv;\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            } else {\n\t                var block = this._prevBlock;\n\t            }\n\n\t            // XOR blocks\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= block[i];\n\t            }\n\t        }\n\n\t        return CBC;\n\t    }());\n\n\t    /**\n\t     * Padding namespace.\n\t     */\n\t    var C_pad = C.pad = {};\n\n\t    /**\n\t     * PKCS #5/7 padding strategy.\n\t     */\n\t    var Pkcs7 = C_pad.Pkcs7 = {\n\t        /**\n\t         * Pads data using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to pad.\n\t         * @param {number} blockSize The multiple that the data should be padded to.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n\t         */\n\t        pad: function (data, blockSize) {\n\t            // Shortcut\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count padding bytes\n\t            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t            // Create padding word\n\t            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\n\n\t            // Create padding\n\t            var paddingWords = [];\n\t            for (var i = 0; i < nPaddingBytes; i += 4) {\n\t                paddingWords.push(paddingWord);\n\t            }\n\t            var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n\t            // Add padding\n\t            data.concat(padding);\n\t        },\n\n\t        /**\n\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to unpad.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n\t         */\n\t        unpad: function (data) {\n\t            // Get number of padding bytes from last byte\n\t            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t            // Remove padding\n\t            data.sigBytes -= nPaddingBytes;\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract base block cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n\t     */\n\t    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Mode} mode The block mode to use. Default: CBC\n\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n\t         */\n\t        cfg: Cipher.cfg.extend({\n\t            mode: CBC,\n\t            padding: Pkcs7\n\t        }),\n\n\t        reset: function () {\n\t            // Reset cipher\n\t            Cipher.reset.call(this);\n\n\t            // Shortcuts\n\t            var cfg = this.cfg;\n\t            var iv = cfg.iv;\n\t            var mode = cfg.mode;\n\n\t            // Reset block mode\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                var modeCreator = mode.createEncryptor;\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                var modeCreator = mode.createDecryptor;\n\t                // Keep at least one block in the buffer for unpadding\n\t                this._minBufferSize = 1;\n\t            }\n\n\t            if (this._mode && this._mode.__creator == modeCreator) {\n\t                this._mode.init(this, iv && iv.words);\n\t            } else {\n\t                this._mode = modeCreator.call(mode, this, iv && iv.words);\n\t                this._mode.__creator = modeCreator;\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (words, offset) {\n\t            this._mode.processBlock(words, offset);\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcut\n\t            var padding = this.cfg.padding;\n\n\t            // Finalize\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                // Pad data\n\t                padding.pad(this._data, this.blockSize);\n\n\t                // Process final blocks\n\t                var finalProcessedBlocks = this._process(!!'flush');\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                // Process final blocks\n\t                var finalProcessedBlocks = this._process(!!'flush');\n\n\t                // Unpad data\n\t                padding.unpad(finalProcessedBlocks);\n\t            }\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 128/32\n\t    });\n\n\t    /**\n\t     * A collection of cipher parameters.\n\t     *\n\t     * @property {WordArray} ciphertext The raw ciphertext.\n\t     * @property {WordArray} key The key to this ciphertext.\n\t     * @property {WordArray} iv The IV used in the ciphering operation.\n\t     * @property {WordArray} salt The salt used with a key derivation function.\n\t     * @property {Cipher} algorithm The cipher algorithm.\n\t     * @property {Mode} mode The block mode used in the ciphering operation.\n\t     * @property {Padding} padding The padding scheme used in the ciphering operation.\n\t     * @property {number} blockSize The block size of the cipher.\n\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n\t     */\n\t    var CipherParams = C_lib.CipherParams = Base.extend({\n\t        /**\n\t         * Initializes a newly created cipher params object.\n\t         *\n\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({\n\t         *         ciphertext: ciphertextWordArray,\n\t         *         key: keyWordArray,\n\t         *         iv: ivWordArray,\n\t         *         salt: saltWordArray,\n\t         *         algorithm: CryptoJS.algo.AES,\n\t         *         mode: CryptoJS.mode.CBC,\n\t         *         padding: CryptoJS.pad.PKCS7,\n\t         *         blockSize: 4,\n\t         *         formatter: CryptoJS.format.OpenSSL\n\t         *     });\n\t         */\n\t        init: function (cipherParams) {\n\t            this.mixIn(cipherParams);\n\t        },\n\n\t        /**\n\t         * Converts this cipher params object to a string.\n\t         *\n\t         * @param {Format} formatter (Optional) The formatting strategy to use.\n\t         *\n\t         * @return {string} The stringified cipher params.\n\t         *\n\t         * @throws Error If neither the formatter nor the default formatter is set.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = cipherParams + '';\n\t         *     var string = cipherParams.toString();\n\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n\t         */\n\t        toString: function (formatter) {\n\t            return (formatter || this.formatter).stringify(this);\n\t        }\n\t    });\n\n\t    /**\n\t     * Format namespace.\n\t     */\n\t    var C_format = C.format = {};\n\n\t    /**\n\t     * OpenSSL formatting strategy.\n\t     */\n\t    var OpenSSLFormatter = C_format.OpenSSL = {\n\t        /**\n\t         * Converts a cipher params object to an OpenSSL-compatible string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The OpenSSL-compatible string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n\t         */\n\t        stringify: function (cipherParams) {\n\t            // Shortcuts\n\t            var ciphertext = cipherParams.ciphertext;\n\t            var salt = cipherParams.salt;\n\n\t            // Format\n\t            if (salt) {\n\t                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n\t            } else {\n\t                var wordArray = ciphertext;\n\t            }\n\n\t            return wordArray.toString(Base64);\n\t        },\n\n\t        /**\n\t         * Converts an OpenSSL-compatible string to a cipher params object.\n\t         *\n\t         * @param {string} openSSLStr The OpenSSL-compatible string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n\t         */\n\t        parse: function (openSSLStr) {\n\t            // Parse base64\n\t            var ciphertext = Base64.parse(openSSLStr);\n\n\t            // Shortcut\n\t            var ciphertextWords = ciphertext.words;\n\n\t            // Test for salt\n\t            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n\t                // Extract salt\n\t                var salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n\t                // Remove salt from ciphertext\n\t                ciphertextWords.splice(0, 4);\n\t                ciphertext.sigBytes -= 16;\n\t            }\n\n\t            return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n\t         */\n\t        cfg: Base.extend({\n\t            format: OpenSSLFormatter\n\t        }),\n\n\t        /**\n\t         * Encrypts a message.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Encrypt\n\t            var encryptor = cipher.createEncryptor(key, cfg);\n\t            var ciphertext = encryptor.finalize(message);\n\n\t            // Shortcut\n\t            var cipherCfg = encryptor.cfg;\n\n\t            // Create and return serializable cipher params\n\t            return CipherParams.create({\n\t                ciphertext: ciphertext,\n\t                key: key,\n\t                iv: cipherCfg.iv,\n\t                algorithm: cipher,\n\t                mode: cipherCfg.mode,\n\t                padding: cipherCfg.padding,\n\t                blockSize: cipher.blockSize,\n\t                formatter: cfg.format\n\t            });\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Decrypt\n\t            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n\n\t            return plaintext;\n\t        },\n\n\t        /**\n\t         * Converts serialized ciphertext to CipherParams,\n\t         * else assumed CipherParams already and returns ciphertext unchanged.\n\t         *\n\t         * @param {CipherParams|string} ciphertext The ciphertext.\n\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n\t         *\n\t         * @return {CipherParams} The unserialized ciphertext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n\t         */\n\t        _parse: function (ciphertext, format) {\n\t            if (typeof ciphertext == 'string') {\n\t                return format.parse(ciphertext, this);\n\t            } else {\n\t                return ciphertext;\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * Key derivation function namespace.\n\t     */\n\t    var C_kdf = C.kdf = {};\n\n\t    /**\n\t     * OpenSSL key derivation function.\n\t     */\n\t    var OpenSSLKdf = C_kdf.OpenSSL = {\n\t        /**\n\t         * Derives a key and IV from a password.\n\t         *\n\t         * @param {string} password The password to derive from.\n\t         * @param {number} keySize The size in words of the key to generate.\n\t         * @param {number} ivSize The size in words of the IV to generate.\n\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n\t         *\n\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n\t         */\n\t        execute: function (password, keySize, ivSize, salt) {\n\t            // Generate random salt\n\t            if (!salt) {\n\t                salt = WordArray.random(64/8);\n\t            }\n\n\t            // Derive key and IV\n\t            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n\n\t            // Separate key and IV\n\t            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n\t            key.sigBytes = keySize * 4;\n\n\t            // Return params\n\t            return CipherParams.create({ key: key, iv: iv, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A serializable cipher wrapper that derives the key from a password,\n\t     * and returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n\t         */\n\t        cfg: SerializableCipher.cfg.extend({\n\t            kdf: OpenSSLKdf\n\t        }),\n\n\t        /**\n\t         * Encrypts a message using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Encrypt\n\t            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n\t            // Mix in derived params\n\t            ciphertext.mixIn(derivedParams);\n\n\t            return ciphertext;\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Decrypt\n\t            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n\n\t            return plaintext;\n\t        }\n\t    });\n\t}());\n\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/cipher-core.js\n// module id = 312\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var MD5 = C_algo.MD5;\n\n\t    /**\n\t     * This key derivation function is meant to conform with EVP_BytesToKey.\n\t     * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n\t     */\n\t    var EvpKDF = C_algo.EvpKDF = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: MD5,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create();\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Derives a key from a password.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init hasher\n\t            var hasher = cfg.hasher.create();\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                if (block) {\n\t                    hasher.update(block);\n\t                }\n\t                var block = hasher.update(password).finalize(salt);\n\t                hasher.reset();\n\n\t                // Iterations\n\t                for (var i = 1; i < iterations; i++) {\n\t                    block = hasher.finalize(block);\n\t                    hasher.reset();\n\t                }\n\n\t                derivedKey.concat(block);\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Derives a key from a password.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.EvpKDF(password, salt);\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.EvpKDF = function (password, salt, cfg) {\n\t        return EvpKDF.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.EvpKDF;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/evpkdf.js\n// module id = 313\n// module chunks = 0",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64 encoding strategy.\n\t     */\n\t    var Base64 = C_enc.Base64 = {\n\t        /**\n\t         * Converts a word array to a Base64 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Base64 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64 string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n\t         */\n\t        parse: function (base64Str) {\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = this._map;\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                    reverseMap = this._reverseMap = [];\n\t                    for (var j = 0; j < map.length; j++) {\n\t                        reverseMap[map.charCodeAt(j)] = j;\n\t                    }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t      var words = [];\n\t      var nBytes = 0;\n\t      for (var i = 0; i < base64StrLength; i++) {\n\t          if (i % 4) {\n\t              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t              words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);\n\t              nBytes++;\n\t          }\n\t      }\n\t      return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Base64;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/enc-base64.js\n// module id = 314\n// module chunks = 0",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Constants table\n\t    var T = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        for (var i = 0; i < 64; i++) {\n\t            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;\n\t        }\n\t    }());\n\n\t    /**\n\t     * MD5 hash algorithm.\n\t     */\n\t    var MD5 = C_algo.MD5 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Swap endian\n\t            for (var i = 0; i < 16; i++) {\n\t                // Shortcuts\n\t                var offset_i = offset + i;\n\t                var M_offset_i = M[offset_i];\n\n\t                M[offset_i] = (\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n\t                );\n\t            }\n\n\t            // Shortcuts\n\t            var H = this._hash.words;\n\n\t            var M_offset_0  = M[offset + 0];\n\t            var M_offset_1  = M[offset + 1];\n\t            var M_offset_2  = M[offset + 2];\n\t            var M_offset_3  = M[offset + 3];\n\t            var M_offset_4  = M[offset + 4];\n\t            var M_offset_5  = M[offset + 5];\n\t            var M_offset_6  = M[offset + 6];\n\t            var M_offset_7  = M[offset + 7];\n\t            var M_offset_8  = M[offset + 8];\n\t            var M_offset_9  = M[offset + 9];\n\t            var M_offset_10 = M[offset + 10];\n\t            var M_offset_11 = M[offset + 11];\n\t            var M_offset_12 = M[offset + 12];\n\t            var M_offset_13 = M[offset + 13];\n\t            var M_offset_14 = M[offset + 14];\n\t            var M_offset_15 = M[offset + 15];\n\n\t            // Working varialbes\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\n\t            // Computation\n\t            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);\n\t            d = FF(d, a, b, c, M_offset_1,  12, T[1]);\n\t            c = FF(c, d, a, b, M_offset_2,  17, T[2]);\n\t            b = FF(b, c, d, a, M_offset_3,  22, T[3]);\n\t            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);\n\t            d = FF(d, a, b, c, M_offset_5,  12, T[5]);\n\t            c = FF(c, d, a, b, M_offset_6,  17, T[6]);\n\t            b = FF(b, c, d, a, M_offset_7,  22, T[7]);\n\t            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);\n\t            d = FF(d, a, b, c, M_offset_9,  12, T[9]);\n\t            c = FF(c, d, a, b, M_offset_10, 17, T[10]);\n\t            b = FF(b, c, d, a, M_offset_11, 22, T[11]);\n\t            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);\n\t            d = FF(d, a, b, c, M_offset_13, 12, T[13]);\n\t            c = FF(c, d, a, b, M_offset_14, 17, T[14]);\n\t            b = FF(b, c, d, a, M_offset_15, 22, T[15]);\n\n\t            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);\n\t            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);\n\t            c = GG(c, d, a, b, M_offset_11, 14, T[18]);\n\t            b = GG(b, c, d, a, M_offset_0,  20, T[19]);\n\t            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);\n\t            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);\n\t            c = GG(c, d, a, b, M_offset_15, 14, T[22]);\n\t            b = GG(b, c, d, a, M_offset_4,  20, T[23]);\n\t            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);\n\t            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);\n\t            c = GG(c, d, a, b, M_offset_3,  14, T[26]);\n\t            b = GG(b, c, d, a, M_offset_8,  20, T[27]);\n\t            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);\n\t            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);\n\t            c = GG(c, d, a, b, M_offset_7,  14, T[30]);\n\t            b = GG(b, c, d, a, M_offset_12, 20, T[31]);\n\n\t            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);\n\t            d = HH(d, a, b, c, M_offset_8,  11, T[33]);\n\t            c = HH(c, d, a, b, M_offset_11, 16, T[34]);\n\t            b = HH(b, c, d, a, M_offset_14, 23, T[35]);\n\t            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);\n\t            d = HH(d, a, b, c, M_offset_4,  11, T[37]);\n\t            c = HH(c, d, a, b, M_offset_7,  16, T[38]);\n\t            b = HH(b, c, d, a, M_offset_10, 23, T[39]);\n\t            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);\n\t            d = HH(d, a, b, c, M_offset_0,  11, T[41]);\n\t            c = HH(c, d, a, b, M_offset_3,  16, T[42]);\n\t            b = HH(b, c, d, a, M_offset_6,  23, T[43]);\n\t            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);\n\t            d = HH(d, a, b, c, M_offset_12, 11, T[45]);\n\t            c = HH(c, d, a, b, M_offset_15, 16, T[46]);\n\t            b = HH(b, c, d, a, M_offset_2,  23, T[47]);\n\n\t            a = II(a, b, c, d, M_offset_0,  6,  T[48]);\n\t            d = II(d, a, b, c, M_offset_7,  10, T[49]);\n\t            c = II(c, d, a, b, M_offset_14, 15, T[50]);\n\t            b = II(b, c, d, a, M_offset_5,  21, T[51]);\n\t            a = II(a, b, c, d, M_offset_12, 6,  T[52]);\n\t            d = II(d, a, b, c, M_offset_3,  10, T[53]);\n\t            c = II(c, d, a, b, M_offset_10, 15, T[54]);\n\t            b = II(b, c, d, a, M_offset_1,  21, T[55]);\n\t            a = II(a, b, c, d, M_offset_8,  6,  T[56]);\n\t            d = II(d, a, b, c, M_offset_15, 10, T[57]);\n\t            c = II(c, d, a, b, M_offset_6,  15, T[58]);\n\t            b = II(b, c, d, a, M_offset_13, 21, T[59]);\n\t            a = II(a, b, c, d, M_offset_4,  6,  T[60]);\n\t            d = II(d, a, b, c, M_offset_11, 10, T[61]);\n\t            c = II(c, d, a, b, M_offset_2,  15, T[62]);\n\t            b = II(b, c, d, a, M_offset_9,  21, T[63]);\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\n\t            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);\n\t            var nBitsTotalL = nBitsTotal;\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (\n\t                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)\n\t            );\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n\t                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)\n\t            );\n\n\t            data.sigBytes = (dataWords.length + 1) * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var hash = this._hash;\n\t            var H = hash.words;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 4; i++) {\n\t                // Shortcut\n\t                var H_i = H[i];\n\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    function FF(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & c) | (~b & d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function GG(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & d) | (c & ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function HH(a, b, c, d, x, s, t) {\n\t        var n = a + (b ^ c ^ d) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function II(a, b, c, d, x, s, t) {\n\t        var n = a + (c ^ (b | ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.MD5('message');\n\t     *     var hash = CryptoJS.MD5(wordArray);\n\t     */\n\t    C.MD5 = Hasher._createHelper(MD5);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacMD5(message, key);\n\t     */\n\t    C.HmacMD5 = Hasher._createHmacHelper(MD5);\n\t}(Math));\n\n\n\treturn CryptoJS.MD5;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/md5.js\n// module id = 315\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class foxbit extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'foxbit',\n            'name': 'FoxBit',\n            'countries': 'BR',\n            'hasCORS': false,\n            'rateLimit': 1000,\n            'version': 'v1',\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27991413-11b40d42-647f-11e7-91ee-78ced874dd09.jpg',\n                'api': {\n                    'public': 'https://api.blinktrade.com/api',\n                    'private': 'https://api.blinktrade.com/tapi',\n                },\n                'www': 'https://foxbit.exchange',\n                'doc': 'https://blinktrade.com/docs',\n            },\n            'comment': 'Blinktrade API',\n            'api': {\n                'public': {\n                    'get': [\n                        '{currency}/ticker',    // ?crypto_currency=BTC\n                        '{currency}/orderbook', // ?crypto_currency=BTC\n                        '{currency}/trades',    // ?crypto_currency=BTC&since=<TIMESTAMP>&limit=<NUMBER>\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'D',   // order\n                        'F',   // cancel order\n                        'U2',  // balance\n                        'U4',  // my orders\n                        'U6',  // withdraw\n                        'U18', // deposit\n                        'U24', // confirm withdrawal\n                        'U26', // list withdrawals\n                        'U30', // list deposits\n                        'U34', // ledger\n                        'U70', // cancel withdrawal\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/VEF': { 'id': 'BTCVEF', 'symbol': 'BTC/VEF', 'base': 'BTC', 'quote': 'VEF', 'brokerId': 1, 'broker': 'SurBitcoin' },\n                'BTC/VND': { 'id': 'BTCVND', 'symbol': 'BTC/VND', 'base': 'BTC', 'quote': 'VND', 'brokerId': 3, 'broker': 'VBTC' },\n                'BTC/BRL': { 'id': 'BTCBRL', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL', 'brokerId': 4, 'broker': 'FoxBit' },\n                'BTC/PKR': { 'id': 'BTCPKR', 'symbol': 'BTC/PKR', 'base': 'BTC', 'quote': 'PKR', 'brokerId': 8, 'broker': 'UrduBit' },\n                'BTC/CLP': { 'id': 'BTCCLP', 'symbol': 'BTC/CLP', 'base': 'BTC', 'quote': 'CLP', 'brokerId': 9, 'broker': 'ChileBit' },\n            },\n        });\n    }\n\n    fetchBalance (params = {}) {\n        // todo parse balance\n        return this.privatePostU2 ({\n            'BalanceReqID': this.nonce (),\n        });\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let market = this.market (symbol);\n        let orderbook = await this.publicGetCurrencyOrderbook (this.extend ({\n            'currency': market['quote'],\n            'crypto_currency': market['base'],\n        }, params));\n        return this.parseOrderBook (orderbook);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let market = this.market (symbol);\n        let ticker = await this.publicGetCurrencyTicker (this.extend ({\n            'currency': market['quote'],\n            'crypto_currency': market['base'],\n        }, params));\n        let timestamp = this.milliseconds ();\n        let lowercaseQuote = market['quote'].toLowerCase ();\n        let quoteVolume = 'vol_' + lowercaseQuote;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['buy']),\n            'ask': parseFloat (ticker['sell']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['vol']),\n            'quoteVolume': parseFloat (ticker[quoteVolume]),\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = trade['date'] * 1000;\n        return {\n            'id': trade['tid'],\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': trade['side'],\n            'price': trade['price'],\n            'amount': trade['amount'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetCurrencyTrades (this.extend ({\n            'currency': market['quote'],\n            'crypto_currency': market['base'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type == 'market')\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        let market = this.market (symbol);\n        let orderSide = (side == 'buy') ? '1' : '2';\n        let order = {\n            'ClOrdID': this.nonce (),\n            'Symbol': market['id'],\n            'Side': orderSide,\n            'OrdType': '2',\n            'Price': price,\n            'OrderQty': amount,\n            'BrokerID': market['brokerId'],\n        };\n        let response = await this.privatePostD (this.extend (order, params));\n        let indexed = this.indexBy (response['Responses'], 'MsgType');\n        let execution = indexed['8'];\n        return {\n            'info': response,\n            'id': execution['OrderID'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostF (this.extend ({\n            'ClOrdID': id,\n        }, params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api] + '/' + this.version + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'public') {\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ().toString ();\n            let request = this.extend ({ 'MsgType': path }, query);\n            body = this.json (request);\n            headers = {\n                'APIKey': this.apiKey,\n                'Nonce': nonce,\n                'Signature': this.hmac (this.encode (nonce), this.encode (this.secret)),\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('Status' in response)\n            if (response['Status'] != 200)\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/foxbit.js\n// module id = 316\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, InsufficientFunds, OrderNotFound, DDoSProtection } = require ('./base/errors')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class liqui extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'liqui',\n            'name': 'Liqui',\n            'countries': 'UA',\n            'rateLimit': 2500,\n            'version': '3',\n            'hasCORS': false,\n            // obsolete metainfo interface\n            'hasFetchOrder': true,\n            'hasFetchOrders': true,\n            'hasFetchOpenOrders': true,\n            'hasFetchClosedOrders': true,\n            'hasFetchTickers': true,\n            'hasFetchMyTrades': true,\n            'hasWithdraw': true,\n            // new metainfo interface\n            'has': {\n                'fetchOrder': true,\n                'fetchOrders': 'emulated',\n                'fetchOpenOrders': true,\n                'fetchClosedOrders': 'emulated',\n                'fetchTickers': true,\n                'fetchMyTrades': true,\n                'withdraw': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27982022-75aea828-63a0-11e7-9511-ca584a8edd74.jpg',\n                'api': {\n                    'public': 'https://api.liqui.io/api',\n                    'private': 'https://api.liqui.io/tapi',\n                },\n                'www': 'https://liqui.io',\n                'doc': 'https://liqui.io/api',\n                'fees': 'https://liqui.io/fee',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'info',\n                        'ticker/{pair}',\n                        'depth/{pair}',\n                        'trades/{pair}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'getInfo',\n                        'Trade',\n                        'ActiveOrders',\n                        'OrderInfo',\n                        'CancelOrder',\n                        'TradeHistory',\n                        'TransHistory',\n                        'CoinDepositAddress',\n                        'WithdrawCoin',\n                        'CreateCoupon',\n                        'RedeemCoupon',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.001,\n                    'taker': 0.0025,\n                },\n                'funding': 0.0,\n            },\n        });\n    }\n\n    calculateFee (symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n        let market = this.markets[symbol];\n        let key = 'quote';\n        let rate = market[takerOrMaker];\n        let cost = parseFloat (this.costToPrecision (symbol, amount * rate));\n        if (side == 'sell') {\n            cost *= price;\n        } else {\n            key = 'base';\n        }\n        return {\n            'type': takerOrMaker,\n            'currency': market[key],\n            'rate': rate,\n            'cost': cost,\n        };\n    }\n\n    commonCurrencyCode (currency) {\n        if (!this.substituteCommonCurrencyCodes)\n            return currency;\n        if (currency == 'XBT')\n            return 'BTC';\n        if (currency == 'BCC')\n            return 'BCH';\n        if (currency == 'DRK')\n            return 'DASH';\n        // they misspell DASH as dsh :/\n        if (currency == 'DSH')\n            return 'DASH';\n        return currency;\n    }\n\n    getBaseQuoteFromMarketId (id) {\n        let uppercase = id.toUpperCase ();\n        let [ base, quote ] = uppercase.split ('_');\n        base = this.commonCurrencyCode (base);\n        quote = this.commonCurrencyCode (quote);\n        return [ base, quote ];\n    }\n\n    async fetchMarkets () {\n        let response = await this.publicGetInfo ();\n        let markets = response['pairs'];\n        let keys = Object.keys (markets);\n        let result = [];\n        for (let p = 0; p < keys.length; p++) {\n            let id = keys[p];\n            let market = markets[id];\n            let [ base, quote ] = this.getBaseQuoteFromMarketId (id);\n            let symbol = base + '/' + quote;\n            let precision = {\n                'amount': this.safeInteger (market, 'decimal_places'),\n                'price': this.safeInteger (market, 'decimal_places'),\n            };\n            let amountLimits = {\n                'min': this.safeFloat (market, 'min_amount'),\n                'max': this.safeFloat (market, 'max_amount'),\n            };\n            let priceLimits = {\n                'min': this.safeFloat (market, 'min_price'),\n                'max': this.safeFloat (market, 'max_price'),\n            };\n            let costLimits = {\n                'min': this.safeFloat (market, 'min_total'),\n            };\n            let limits = {\n                'amount': amountLimits,\n                'price': priceLimits,\n                'cost': costLimits,\n            };\n            let active = (market['hidden'] == 0);\n            result.push (this.extend (this.fees['trading'], {\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'active': active,\n                'taker': market['fee'] / 100,\n                'lot': amountLimits['min'],\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n            }));\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostGetInfo ();\n        let balances = response['return'];\n        let result = { 'info': balances };\n        let funds = balances['funds'];\n        let currencies = Object.keys (funds);\n        for (let c = 0; c < currencies.length; c++) {\n            let currency = currencies[c];\n            let uppercase = currency.toUpperCase ();\n            uppercase = this.commonCurrencyCode (uppercase);\n            let total = undefined;\n            let used = undefined;\n            if (balances['open_orders'] == 0) {\n                total = funds[currency];\n                used = 0.0;\n            }\n            let account = {\n                'free': funds[currency],\n                'used': used,\n                'total': total,\n            };\n            result[uppercase] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetDepthPair (this.extend ({\n            'pair': market['id'],\n        }, params));\n        let market_id_in_reponse = (market['id'] in response);\n        if (!market_id_in_reponse)\n            throw new ExchangeError (this.id + ' ' + market['symbol'] + ' order book is empty or not available');\n        let orderbook = response[market['id']];\n        let result = this.parseOrderBook (orderbook);\n        result['bids'] = this.sortBy (result['bids'], 0, true);\n        result['asks'] = this.sortBy (result['asks'], 0);\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = ticker['updated'] * 1000;\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy'),\n            'ask': this.safeFloat (ticker, 'sell'),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': this.safeFloat (ticker, 'last'),\n            'change': undefined,\n            'percentage': undefined,\n            'average': this.safeFloat (ticker, 'avg'),\n            'baseVolume': this.safeFloat (ticker, 'vol_cur'),\n            'quoteVolume': this.safeFloat (ticker, 'vol'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let ids = undefined;\n        if (!symbols) {\n            // let numIds = this.ids.length;\n            // if (numIds > 256)\n            //     throw new ExchangeError (this.id + ' fetchTickers() requires symbols argument');\n            ids = this.ids;\n        } else {\n            ids = this.marketIds (symbols);\n        }\n        let tickers = await this.publicGetTickerPair (this.extend ({\n            'pair': ids.join ('-'),\n        }, params));\n        let result = {};\n        let keys = Object.keys (tickers);\n        for (let k = 0; k < keys.length; k++) {\n            let id = keys[k];\n            let ticker = tickers[id];\n            let market = this.markets_by_id[id];\n            let symbol = market['symbol'];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let tickers = await this.fetchTickers ([ symbol ], params);\n        return tickers[symbol];\n    }\n\n    parseTrade (trade, market = undefined) {\n        let timestamp = trade['timestamp'] * 1000;\n        let side = trade['type'];\n        if (side == 'ask')\n            side = 'sell';\n        if (side == 'bid')\n            side = 'buy';\n        let price = this.safeFloat (trade, 'price');\n        if ('rate' in trade)\n            price = this.safeFloat (trade, 'rate');\n        let id = this.safeString (trade, 'tid');\n        if ('trade_id' in trade)\n            id = this.safeString (trade, 'trade_id');\n        let order = this.safeString (trade, this.getOrderIdKey ());\n        if ('pair' in trade) {\n            let marketId = trade['pair'];\n            market = this.markets_by_id[marketId];\n        }\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        let amount = trade['amount'];\n        let type = 'limit'; // all trades are still limit trades\n        let fee = undefined;\n        // this is filled by fetchMyTrades() only\n        // is_your_order is always false :\\\n        // let isYourOrder = this.safeValue (trade, 'is_your_order');\n        // let takerOrMaker = 'taker';\n        // if (isYourOrder)\n        //     takerOrMaker = 'maker';\n        // let fee = this.calculateFee (symbol, type, side, amount, price, takerOrMaker);\n        return {\n            'id': id,\n            'order': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'fee': fee,\n            'info': trade,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = {\n            'pair': market['id'],\n        };\n        if (limit)\n            request['limit'] = limit;\n        let response = await this.publicGetTradesPair (this.extend (request, params));\n        return this.parseTrades (response[market['id']], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type == 'market')\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = {\n            'pair': market['id'],\n            'type': side,\n            'amount': this.amountToPrecision (symbol, amount),\n            'rate': this.priceToPrecision (symbol, price),\n        };\n        let response = await this.privatePostTrade (this.extend (request, params));\n        let id = this.safeString (response['return'], this.getOrderIdKey ());\n        if (!id)\n            id = this.safeString (response['return'], 'init_order_id');\n        let timestamp = this.milliseconds ();\n        price = parseFloat (price);\n        amount = parseFloat (amount);\n        let order = {\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'status': 'open',\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'price': price,\n            'cost': price * amount,\n            'amount': amount,\n            'remaining': amount,\n            'filled': 0.0,\n            'fee': undefined,\n            // 'trades': this.parseTrades (order['trades'], market),\n        };\n        this.orders[id] = order;\n        return this.extend ({ 'info': response }, order);\n    }\n\n    getOrderIdKey () {\n        return 'order_id';\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = undefined;\n        try {\n            let request = {};\n            let idKey = this.getOrderIdKey ();\n            request[idKey] = id;\n            response = await this.privatePostCancelOrder (this.extend (request, params));\n            if (id in this.orders)\n                this.orders[id]['status'] = 'canceled';\n        } catch (e) {\n            if (this.last_json_response) {\n                let message = this.safeString (this.last_json_response, 'error');\n                if (message) {\n                    if (message.indexOf ('not found') >= 0)\n                        throw new OrderNotFound (this.id + ' cancelOrder() error: ' + this.last_http_response);\n                }\n            }\n            throw e;\n        }\n        return response;\n    }\n\n    parseOrder (order, market = undefined) {\n        let id = order['id'].toString ();\n        let status = order['status'];\n        if (status == 0) {\n            status = 'open';\n        } else if (status == 1) {\n            status = 'closed';\n        } else if ((status == 2) || (status == 3)) {\n            status = 'canceled';\n        }\n        let timestamp = parseInt (order['timestamp_created']) * 1000;\n        let symbol = undefined;\n        if (!market)\n            market = this.markets_by_id[order['pair']];\n        if (market)\n            symbol = market['symbol'];\n        let remaining = this.safeFloat (order, 'amount');\n        let amount = this.safeFloat (order, 'start_amount', remaining);\n        if (typeof amount == 'undefined') {\n            if (id in this.orders) {\n                amount = this.safeFloat (this.orders[id], 'amount');\n            }\n        }\n        let price = this.safeFloat (order, 'rate');\n        let filled = undefined;\n        let cost = undefined;\n        if (typeof amount != 'undefined') {\n            if (typeof remaining != 'undefined') {\n                filled = amount - remaining;\n                cost = price * filled;\n            }\n        }\n        let fee = undefined;\n        let result = {\n            'info': order,\n            'id': id,\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'type': 'limit',\n            'side': order['type'],\n            'price': price,\n            'cost': cost,\n            'amount': amount,\n            'remaining': remaining,\n            'filled': filled,\n            'status': status,\n            'fee': fee,\n        };\n        return result;\n    }\n\n    parseOrders (orders, market = undefined, since = undefined, limit = undefined) {\n        let ids = Object.keys (orders);\n        let result = [];\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            let order = orders[id];\n            let extended = this.extend (order, { 'id': id });\n            result.push (this.parseOrder (extended, market));\n        }\n        return this.filterBySinceLimit (result, since, limit);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostOrderInfo (this.extend ({\n            'order_id': parseInt (id),\n        }, params));\n        id = id.toString ();\n        let newOrder = this.parseOrder (this.extend ({ 'id': id }, response['return'][id]));\n        let oldOrder = (id in this.orders) ? this.orders[id] : {};\n        this.orders[id] = this.extend (oldOrder, newOrder);\n        return this.orders[id];\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (!symbol)\n            throw new ExchangeError (this.id + ' fetchOrders requires a symbol');\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = { 'pair': market['id'] };\n        let response = await this.privatePostActiveOrders (this.extend (request, params));\n        let openOrders = [];\n        if ('return' in response)\n            openOrders = this.parseOrders (response['return'], market);\n        for (let j = 0; j < openOrders.length; j++) {\n            this.orders[openOrders[j]['id']] = openOrders[j];\n        }\n        let openOrdersIndexedById = this.indexBy (openOrders, 'id');\n        let cachedOrderIds = Object.keys (this.orders);\n        let result = [];\n        for (let k = 0; k < cachedOrderIds.length; k++) {\n            let id = cachedOrderIds[k];\n            if (id in openOrdersIndexedById) {\n                this.orders[id] = this.extend (this.orders[id], openOrdersIndexedById[id]);\n            } else {\n                let order = this.orders[id];\n                if (order['status'] == 'open') {\n                    this.orders[id] = this.extend (order, {\n                        'status': 'closed',\n                        'cost': order['amount'] * order['price'],\n                        'filled': order['amount'],\n                        'remaining': 0.0,\n                    });\n                }\n            }\n            let order = this.orders[id];\n            if (order['symbol'] == symbol)\n                result.push (order);\n        }\n        return this.filterBySinceLimit (result, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        let orders = await this.fetchOrders (symbol, since, limit, params);\n        let result = [];\n        for (let i = 0; i < orders.length; i++) {\n            if (orders[i]['status'] == 'open')\n                result.push (orders[i]);\n        }\n        return result;\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        let orders = await this.fetchOrders (symbol, since, limit, params);\n        let result = [];\n        for (let i = 0; i < orders.length; i++) {\n            if (orders[i]['status'] == 'closed')\n                result.push (orders[i]);\n        }\n        return result;\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        let request = {\n            // 'from': 123456789, // trade ID, from which the display starts numerical 0\n            // 'count': 1000, // the number of trades for display numerical, default = 1000\n            // 'from_id': trade ID, from which the display starts numerical 0\n            // 'end_id': trade ID on which the display ends numerical ∞\n            // 'order': 'ASC', // sorting, default = DESC\n            // 'since': 1234567890, // UTC start time, default = 0\n            // 'end': 1234567890, // UTC end time, default = ∞\n            // 'pair': 'eth_btc', // default = all markets\n        };\n        if (symbol) {\n            market = this.market (symbol);\n            request['pair'] = market['id'];\n        }\n        if (limit)\n            request['count'] = parseInt (limit);\n        if (since)\n            request['since'] = parseInt (since / 1000);\n        let response = await this.privatePostTradeHistory (this.extend (request, params));\n        let trades = [];\n        if ('return' in response)\n            trades = response['return'];\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostWithdrawCoin (this.extend ({\n            'coinName': currency,\n            'amount': parseFloat (amount),\n            'address': address,\n        }, params));\n        return {\n            'info': response,\n            'id': response['return']['tId'],\n        };\n    }\n\n    signBodyWithSecret (body) {\n        return this.hmac (this.encode (body), this.encode (this.secret), 'sha512');\n    }\n\n    getVersionString () {\n        return '/' + this.version;\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api];\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'private') {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            body = this.urlencode (this.extend ({\n                'nonce': nonce,\n                'method': path,\n            }, query));\n            let signature = this.signBodyWithSecret (body);\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': this.apiKey,\n                'Sign': signature,\n            };\n        } else {\n            url += this.getVersionString () + '/' + this.implodeParams (path, params);\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('success' in response) {\n            if (!response['success']) {\n                if (response['error'].indexOf ('Not enougth') >= 0) { // not enougTh is a typo inside Liqui's own API...\n                    throw new InsufficientFunds (this.id + ' ' + this.json (response));\n                } else if (response['error'] == 'Requests too often') {\n                    throw new DDoSProtection (this.id + ' ' + this.json (response));\n                } else if ((response['error'] == 'not available') || (response['error'] == 'external service unavailable')) {\n                    throw new DDoSProtection (this.id + ' ' + this.json (response));\n                } else {\n                    throw new ExchangeError (this.id + ' ' + this.json (response));\n                }\n            }\n        }\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/liqui.js\n// module id = 317\n// module chunks = 0",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var X32WordArray = C_lib.WordArray;\n\n\t    /**\n\t     * x64 namespace.\n\t     */\n\t    var C_x64 = C.x64 = {};\n\n\t    /**\n\t     * A 64-bit word.\n\t     */\n\t    var X64Word = C_x64.Word = Base.extend({\n\t        /**\n\t         * Initializes a newly created 64-bit word.\n\t         *\n\t         * @param {number} high The high 32 bits.\n\t         * @param {number} low The low 32 bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\n\t         */\n\t        init: function (high, low) {\n\t            this.high = high;\n\t            this.low = low;\n\t        }\n\n\t        /**\n\t         * Bitwise NOTs this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after negating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var negated = x64Word.not();\n\t         */\n\t        // not: function () {\n\t            // var high = ~this.high;\n\t            // var low = ~this.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise ANDs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to AND with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after ANDing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var anded = x64Word.and(anotherX64Word);\n\t         */\n\t        // and: function (word) {\n\t            // var high = this.high & word.high;\n\t            // var low = this.low & word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise ORs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to OR with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after ORing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var ored = x64Word.or(anotherX64Word);\n\t         */\n\t        // or: function (word) {\n\t            // var high = this.high | word.high;\n\t            // var low = this.low | word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise XORs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to XOR with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after XORing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var xored = x64Word.xor(anotherX64Word);\n\t         */\n\t        // xor: function (word) {\n\t            // var high = this.high ^ word.high;\n\t            // var low = this.low ^ word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Shifts this word n bits to the left.\n\t         *\n\t         * @param {number} n The number of bits to shift.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after shifting.\n\t         *\n\t         * @example\n\t         *\n\t         *     var shifted = x64Word.shiftL(25);\n\t         */\n\t        // shiftL: function (n) {\n\t            // if (n < 32) {\n\t                // var high = (this.high << n) | (this.low >>> (32 - n));\n\t                // var low = this.low << n;\n\t            // } else {\n\t                // var high = this.low << (n - 32);\n\t                // var low = 0;\n\t            // }\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Shifts this word n bits to the right.\n\t         *\n\t         * @param {number} n The number of bits to shift.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after shifting.\n\t         *\n\t         * @example\n\t         *\n\t         *     var shifted = x64Word.shiftR(7);\n\t         */\n\t        // shiftR: function (n) {\n\t            // if (n < 32) {\n\t                // var low = (this.low >>> n) | (this.high << (32 - n));\n\t                // var high = this.high >>> n;\n\t            // } else {\n\t                // var low = this.high >>> (n - 32);\n\t                // var high = 0;\n\t            // }\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Rotates this word n bits to the left.\n\t         *\n\t         * @param {number} n The number of bits to rotate.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after rotating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var rotated = x64Word.rotL(25);\n\t         */\n\t        // rotL: function (n) {\n\t            // return this.shiftL(n).or(this.shiftR(64 - n));\n\t        // },\n\n\t        /**\n\t         * Rotates this word n bits to the right.\n\t         *\n\t         * @param {number} n The number of bits to rotate.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after rotating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var rotated = x64Word.rotR(7);\n\t         */\n\t        // rotR: function (n) {\n\t            // return this.shiftR(n).or(this.shiftL(64 - n));\n\t        // },\n\n\t        /**\n\t         * Adds this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to add with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after adding.\n\t         *\n\t         * @example\n\t         *\n\t         *     var added = x64Word.add(anotherX64Word);\n\t         */\n\t        // add: function (word) {\n\t            // var low = (this.low + word.low) | 0;\n\t            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;\n\t            // var high = (this.high + word.high + carry) | 0;\n\n\t            // return X64Word.create(high, low);\n\t        // }\n\t    });\n\n\t    /**\n\t     * An array of 64-bit words.\n\t     *\n\t     * @property {Array} words The array of CryptoJS.x64.Word objects.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var X64WordArray = C_x64.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create();\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n\t         *     ]);\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n\t         *     ], 10);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 8;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this 64-bit word array to a 32-bit word array.\n\t         *\n\t         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var x32WordArray = x64WordArray.toX32();\n\t         */\n\t        toX32: function () {\n\t            // Shortcuts\n\t            var x64Words = this.words;\n\t            var x64WordsLength = x64Words.length;\n\n\t            // Convert\n\t            var x32Words = [];\n\t            for (var i = 0; i < x64WordsLength; i++) {\n\t                var x64Word = x64Words[i];\n\t                x32Words.push(x64Word.high);\n\t                x32Words.push(x64Word.low);\n\t            }\n\n\t            return X32WordArray.create(x32Words, this.sigBytes);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {X64WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = x64WordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\n\t            // Clone \"words\" array\n\t            var words = clone.words = this.words.slice(0);\n\n\t            // Clone each X64Word object\n\t            var wordsLength = words.length;\n\t            for (var i = 0; i < wordsLength; i++) {\n\t                words[i] = words[i].clone();\n\t            }\n\n\t            return clone;\n\t        }\n\t    });\n\t}());\n\n\n\treturn CryptoJS;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/x64-core.js\n// module id = 318\n// module chunks = 0","\"use strict\"\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class okcoinusd extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'okcoinusd',\n            'name': 'OKCoin USD',\n            'countries': [ 'CN', 'US' ],\n            'hasCORS': false,\n            'version': 'v1',\n            'rateLimit': 1000, // up to 3000 requests per 5 minutes ≈ 600 requests per minute ≈ 10 requests per second ≈ 100 ms\n            // obsolete metainfo interface\n            'hasFetchOHLCV': true,\n            'hasFetchOrder': true,\n            'hasFetchOrders': true,\n            'hasFetchOpenOrders': true,\n            'hasFetchClosedOrders': true,\n            'hasWithdraw': true,\n            // new metainfo interface\n            'has': {\n                'fetchOHLCV': true,\n                'fetchOrder': true,\n                'fetchOrders': true,\n                'fetchOpenOrders': true,\n                'fetchClosedOrders': true,\n                'withdraw': true,\n            },\n            'extension': '.do', // appended to endpoint URL\n            'hasFutureMarkets': false,\n            'timeframes': {\n                '1m': '1min',\n                '3m': '3min',\n                '5m': '5min',\n                '15m': '15min',\n                '30m': '30min',\n                '1h': '1hour',\n                '2h': '2hour',\n                '4h': '4hour',\n                '6h': '6hour',\n                '12h': '12hour',\n                '1d': '1day',\n                '3d': '3day',\n                '1w': '1week',\n            },\n            'api': {\n                'web': {\n                    'get': [\n                        'markets/currencies',\n                        'markets/products',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'depth',\n                        'exchange_rate',\n                        'future_depth',\n                        'future_estimated_price',\n                        'future_hold_amount',\n                        'future_index',\n                        'future_kline',\n                        'future_price_limit',\n                        'future_ticker',\n                        'future_trades',\n                        'kline',\n                        'otcs',\n                        'ticker',\n                        'trades',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'account_records',\n                        'batch_trade',\n                        'borrow_money',\n                        'borrow_order_info',\n                        'borrows_info',\n                        'cancel_borrow',\n                        'cancel_order',\n                        'cancel_otc_order',\n                        'cancel_withdraw',\n                        'future_batch_trade',\n                        'future_cancel',\n                        'future_devolve',\n                        'future_explosive',\n                        'future_order_info',\n                        'future_orders_info',\n                        'future_position',\n                        'future_position_4fix',\n                        'future_trade',\n                        'future_trades_history',\n                        'future_userinfo',\n                        'future_userinfo_4fix',\n                        'lend_depth',\n                        'order_fee',\n                        'order_history',\n                        'order_info',\n                        'orders_info',\n                        'otc_order_history',\n                        'otc_order_info',\n                        'repayment',\n                        'submit_otc_order',\n                        'trade',\n                        'trade_history',\n                        'trade_otc_order',\n                        'withdraw',\n                        'withdraw_info',\n                        'unrepayments_info',\n                        'userinfo',\n                    ],\n                },\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766791-89ffb502-5ee5-11e7-8a5b-c5950b68ac65.jpg',\n                'api': {\n                    'web': 'https://www.okcoin.com/v2',\n                    'public': 'https://www.okcoin.com/api',\n                    'private': 'https://www.okcoin.com/api',\n                },\n                'www': 'https://www.okcoin.com',\n                'doc': [\n                    'https://www.okcoin.com/rest_getStarted.html',\n                    'https://www.npmjs.com/package/okcoin.com',\n                ],\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let response = await this.webGetMarketsProducts ();\n        let markets = response['data'];\n        let result = [];\n        for (let i = 0; i < markets.length; i++) {\n            let id = markets[i]['symbol'];\n            let uppercase = id.toUpperCase ();\n            let [ base, quote ] = uppercase.split ('_');\n            let symbol = base + '/' + quote;\n            let precision = {\n                'amount': markets[i]['maxSizeDigit'],\n                'price': markets[i]['maxPriceDigit'],\n            };\n            let lot = Math.pow (10, -precision['amount']);\n            let market = this.extend (this.fees['trading'], {\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': markets[i],\n                'type': 'spot',\n                'spot': true,\n                'future': false,\n                'lot': lot,\n                'active': true,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': markets[i]['minTradeSize'],\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            });\n            result.push (market);\n            if ((this.hasFutureMarkets) && (market['quote'] == 'USDT')) {\n                result.push (this.extend (market, {\n                    'quote': 'USD',\n                    'symbol': market['base'] + '/USD',\n                    'id': market['id'].replace ('usdt', 'usd'),\n                    'type': 'future',\n                    'spot': false,\n                    'future': true,\n                }));\n            }\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let method = 'publicGet';\n        let request = {\n            'symbol': market['id'],\n        };\n        if (market['future']) {\n            method += 'Future';\n            request['contract_type'] = 'this_week'; // next_week, quarter\n        }\n        method += 'Depth';\n        let orderbook = await this[method] (this.extend (request, params));\n        let timestamp = this.milliseconds ();\n        return {\n            'bids': orderbook['bids'],\n            'asks': this.sortBy (orderbook['asks'], 0),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n        };\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = ticker['timestamp'];\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['buy']),\n            'ask': parseFloat (ticker['sell']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['vol']),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let method = 'publicGet';\n        let request = {\n            'symbol': market['id'],\n        };\n        if (market['future']) {\n            method += 'Future';\n            request['contract_type'] = 'this_week'; // next_week, quarter\n        }\n        method += 'Ticker';\n        let response = await this[method] (this.extend (request, params));\n        let timestamp = parseInt (response['date']) * 1000;\n        let ticker = this.extend (response['ticker'], { 'timestamp': timestamp });\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'info': trade,\n            'timestamp': trade['date_ms'],\n            'datetime': this.iso8601 (trade['date_ms']),\n            'symbol': symbol,\n            'id': trade['tid'].toString (),\n            'order': undefined,\n            'type': undefined,\n            'side': trade['type'],\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['amount']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let method = 'publicGet';\n        let request = {\n            'symbol': market['id'],\n        };\n        if (market['future']) {\n            method += 'Future';\n            request['contract_type'] = 'this_week'; // next_week, quarter\n        }\n        method += 'Trades';\n        let response = await this[method] (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = 1440, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let method = 'publicGet';\n        let request = {\n            'symbol': market['id'],\n            'type': this.timeframes[timeframe],\n        };\n        if (market['future']) {\n            method += 'Future';\n            request['contract_type'] = 'this_week'; // next_week, quarter\n        }\n        method += 'Kline';\n        if (limit)\n            request['size'] = parseInt (limit);\n        if (since) {\n            request['since'] = since;\n        } else {\n            request['since'] = this.milliseconds () - 86400000; // last 24 hours\n        }\n        let response = await this[method] (this.extend (request, params));\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostUserinfo ();\n        let balances = response['info']['funds'];\n        let result = { 'info': response };\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let lowercase = currency.toLowerCase ();\n            let account = this.account ();\n            account['free'] = this.safeFloat (balances['free'], lowercase, 0.0);\n            account['used'] = this.safeFloat (balances['freezed'], lowercase, 0.0);\n            account['total'] = this.sum (account['free'], account['used']);\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let method = 'privatePost';\n        let order = {\n            'symbol': market['id'],\n            'type': side,\n        };\n        if (market['future']) {\n            method += 'Future';\n            order = this.extend (order, {\n                'contract_type': 'this_week', // next_week, quarter\n                'match_price': 0, // match best counter party price? 0 or 1, ignores price if 1\n                'lever_rate': 10, // leverage rate value: 10 or 20 (10 by default)\n                'price': price,\n                'amount': amount,\n            });\n        } else {\n            if (type == 'limit') {\n                order['price'] = price;\n                order['amount'] = amount;\n            } else {\n                order['type'] += '_market';\n                if (side == 'buy') {\n                    order['price'] = this.safeFloat (params, 'cost');\n                    if (!order['price'])\n                        throw new ExchangeError (this.id + ' market buy orders require an additional cost parameter, cost = price * amount');\n                } else {\n                    order['amount'] = amount;\n                }\n            }\n        }\n        params = this.omit (params, 'cost');\n        method += 'Trade';\n        let response = await this[method] (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['order_id'].toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (!symbol)\n            throw new ExchangeError (this.id + ' cancelOrder() requires a symbol argument');\n        let market = this.market (symbol);\n        let request = {\n            'symbol': market['id'],\n            'order_id': id,\n        };\n        let method = 'privatePost';\n        if (market['future']) {\n            method += 'FutureCancel';\n            request['contract_type'] = 'this_week'; // next_week, quarter\n        } else {\n            method += 'CancelOrder';\n        }\n        let response = await this[method] (this.extend (request, params));\n        return response;\n    }\n\n    parseOrderStatus (status) {\n        if (status == -1)\n            return 'canceled';\n        if (status == 0)\n            return 'open';\n        if (status == 1)\n            return 'partial';\n        if (status == 2)\n            return 'closed';\n        if (status == 4)\n            return 'canceled';\n        return status;\n    }\n\n    parseOrder (order, market = undefined) {\n        let side = undefined;\n        let type = undefined;\n        if ('type' in order) {\n            if ((order['type'] == 'buy') || (order['type'] == 'sell')) {\n                side = order['type'];\n                type = 'limit';\n            } else {\n                side = (order['type'] == 'buy_market') ? 'buy' : 'sell';\n                type = 'market';\n            }\n        }\n        let status = this.parseOrderStatus (order['status']);\n        let symbol = undefined;\n        if (!market) {\n            if ('symbol' in order)\n                if (order['symbol'] in this.markets_by_id)\n                    market = this.markets_by_id[order['symbol']];\n        }\n        if (market)\n            symbol = market['symbol'];\n        let timestamp = undefined;\n        let createDateField = this.getCreateDateField ();\n        if (createDateField in order)\n            timestamp = order[createDateField];\n        let amount = order['amount'];\n        let filled = order['deal_amount'];\n        let remaining = amount - filled;\n        let average = order['avg_price'];\n        let cost = average * filled;\n        let result = {\n            'info': order,\n            'id': order['order_id'],\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'price': order['price'],\n            'average': average,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': undefined,\n        };\n        return result;\n    }\n\n    getCreateDateField () {\n        // needed for derived exchanges\n        // allcoin typo create_data instead of create_date\n        return 'create_date';\n    }\n\n    getOrdersField () {\n        // needed for derived exchanges\n        // allcoin typo order instead of orders (expected based on their API docs)\n        return 'orders';\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (!symbol)\n            throw new ExchangeError (this.id + 'fetchOrders requires a symbol parameter');\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let method = 'privatePost';\n        let request = {\n            'order_id': id,\n            'symbol': market['id'],\n            // 'status': 0, // 0 for unfilled orders, 1 for filled orders\n            // 'current_page': 1, // current page number\n            // 'page_length': 200, // number of orders returned per page, maximum 200\n        };\n        if (market['future']) {\n            method += 'Future';\n            request['contract_type'] = 'this_week'; // next_week, quarter\n        }\n        method += 'OrderInfo';\n        let response = await this[method] (this.extend (request, params));\n        let ordersField = this.getOrdersField ();\n        return this.parseOrder (response[ordersField][0]);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (!symbol)\n            throw new ExchangeError (this.id + 'fetchOrders requires a symbol parameter');\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let method = 'privatePost';\n        let request = {\n            'symbol': market['id'],\n        };\n        let order_id_in_params = ('order_id' in params);\n        if (market['future']) {\n            method += 'FutureOrdersInfo';\n            request['contract_type'] = 'this_week'; // next_week, quarter\n            if (!order_id_in_params)\n                throw new ExchangeError (this.id + ' fetchOrders() requires order_id param for futures market ' + symbol + ' (a string of one or more order ids, comma-separated)');\n        } else {\n            let status = undefined;\n            if ('type' in params) {\n                status = params['type'];\n            } else if ('status' in params) {\n                status = params['status'];\n            } else {\n                throw new ExchangeError (this.id + ' fetchOrders() requires type param or status param for spot market ' + symbol + ' (0 or \"open\" for unfilled orders, 1 or \"closed\" for filled orders)');\n            }\n            if (status == 'open')\n                status = 0;\n            if (status == 'closed')\n                status = 1;\n            if (order_id_in_params) {\n                method += 'OrdersInfo';\n                request = this.extend (request, {\n                    'type': status,\n                });\n            } else {\n                method += 'OrderHistory';\n                request = this.extend (request, {\n                    'status': status,\n                    'current_page': 1, // current page number\n                    'page_length': 200, // number of orders returned per page, maximum 200\n                });\n            }\n            params = this.omit (params, [ 'type', 'status' ]);\n        }\n        let response = await this[method] (this.extend (request, params));\n        let ordersField = this.getOrdersField ();\n        return this.parseOrders (response[ordersField], market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        let open = 0; // 0 for unfilled orders, 1 for filled orders\n        return await this.fetchOrders (symbol, undefined, undefined, this.extend ({\n            'status': open,\n        }, params));\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        let closed = 1; // 0 for unfilled orders, 1 for filled orders\n        return await this.fetchOrders (symbol, undefined, undefined, this.extend ({\n            'status': closed,\n        }, params));\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        await this.loadMarkets ();\n        let lowercase = currency.toLowerCase () + '_usd';\n        // if (amount < 0.01)\n        //     throw new ExchangeError (this.id + ' withdraw() requires amount > 0.01');\n        let request = {\n            'symbol': lowercase,\n            'withdraw_address': address,\n            'withdraw_amount': amount,\n            'target': 'address', // or okcn, okcom, okex\n        };\n        let query = params;\n        if ('chargefee' in query) {\n            request['chargefee'] = query['chargefee'];\n            query = this.omit (query, 'chargefee');\n        } else {\n            throw new ExchangeError (this.id + ' withdraw() requires a `chargefee` parameter');\n        }\n        let password = undefined;\n        if (this.password) {\n            request['trade_pwd'] = this.password;\n            password = this.password;\n        } else if ('password' in query) {\n            request['trade_pwd'] = query['password'];\n            query = this.omit (query, 'password');\n        } else if ('trade_pwd' in query) {\n            request['trade_pwd'] = query['trade_pwd'];\n            query = this.omit (query, 'trade_pwd');\n        }\n        if (!password)\n            throw new ExchangeError (this.id + ' withdraw() requires this.password set on the exchange instance or a password / trade_pwd parameter');\n        let response = await this.privatePostWithdraw (this.extend (request, query));\n        return {\n            'info': response,\n            'id': this.safeString (response, 'withdraw_id'),\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = '/';\n        if (api != 'web')\n            url += this.version + '/';\n        url += path + this.extension;\n        if (api == 'private') {\n            this.checkRequiredCredentials ();\n            let query = this.keysort (this.extend ({\n                'api_key': this.apiKey,\n            }, params));\n            // secret key must be at the end of query\n            let queryString = this.rawencode (query) + '&secret_key=' + this.secret;\n            query['sign'] = this.hash (this.encode (queryString)).toUpperCase ();\n            body = this.urlencode (query);\n            headers = { 'Content-Type': 'application/x-www-form-urlencoded' };\n        } else {\n            if (Object.keys (params).length)\n                url += '?' + this.urlencode (params);\n        }\n        url = this.urls['api'][api] + url;\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('result' in response)\n            if (!response['result'])\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n        if ('error_code' in response)\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/okcoinusd.js\n// module id = 319\n// module chunks = 0","\"use strict\";\n\n//-----------------------------------------------------------------------------\n\nconst CryptoJS = require ('crypto-js')\n    , qs       = require ('qs') // querystring\n\n//-----------------------------------------------------------------------------\n\nconst { RequestTimeout } = require ('./errors')\n\n//-----------------------------------------------------------------------------\n// utility helpers\n\nconst setTimeout_original = setTimeout\n\n// setTimeout can fire earlier than specified, so we need to ensure it does not happen...\n\nconst setTimeout_safe = (done, ms, setTimeout = setTimeout_original /* overrideable for mocking purposes */, targetTime = Date.now () + ms) => {\n\n    let clearInnerTimeout = () => {}\n    let active = true\n\n    let id = setTimeout (() => {\n        active = true\n        const rest = targetTime - Date.now ()\n        if (rest > 0) {\n            clearInnerTimeout = setTimeout_safe (done, rest, setTimeout, targetTime) // try sleep more\n        } else {\n            done ()\n        }\n    }, ms)\n\n    return function clear () {\n        if (active) {\n            active = false // dunno if IDs are unique on various platforms, so it's better to rely on this flag to exclude the possible cancellation of the wrong timer (if called after completion)\n            clearTimeout (id)\n        }\n        clearInnerTimeout ()\n    }\n}\n\nconst sleep = ms => new Promise (resolve => setTimeout_safe (resolve, ms))\n\nconst decimal = float => parseFloat (float).toString ()\n\nconst timeout = async (ms, promise) => {\n\n    let clear = () => {}\n    const timeout = new Promise (resolve => (clear = setTimeout_safe (resolve, ms)))\n\n    try {\n        return await Promise.race ([promise, timeout.then (() => { throw new RequestTimeout ('request timed out') })])\n    } finally {\n        clear () // fixes https://github.com/ccxt/ccxt/issues/749\n    }\n}\n\nconst capitalize = string => string.length ? (string.charAt (0).toUpperCase () + string.slice (1)) : string\n\nconst keysort = object => {\n    const result = {}\n    Object.keys (object).sort ().forEach (key => result[key] = object[key])\n    return result\n}\n\nconst extend = (...args) => Object.assign ({}, ...args)\n\nconst deepExtend = function (...args) {\n\n    // if (args.length < 1)\n    //     return args\n    // else if (args.length < 2)\n    //     return args[0]\n\n    let result = undefined\n\n    for (const arg of args) {\n\n        if (arg && (typeof arg == 'object') && (arg.constructor === Object || !('constructor' in arg))) {\n\n            if (typeof result != 'object') {\n                result = {}\n            }\n\n            for (const key in arg) {\n                result[key] = deepExtend (result[key], arg[key])\n            }\n\n        } else {\n\n            result = arg\n        }\n    }\n\n    return result\n}\n\nconst omit = (object, ...args) => {\n    const result = extend (object)\n    for (const x of args) {\n        if (typeof x === 'string') {\n            delete result[x]\n        } else if (Array.isArray (x)) {\n            for (const k of x)\n                delete result[k]\n        }\n    }\n    return result\n}\n\nconst groupBy = (array, key) => {\n    const result = {}\n    Object\n        .values (array)\n        .filter (entry => entry[key] != 'undefined')\n        .forEach (entry => {\n            if (typeof result[entry[key]] == 'undefined')\n                result[entry[key]] = []\n            result[entry[key]].push (entry)\n        })\n    return result\n}\n\nconst filterBy = (array, key, value = undefined) => {\n    if (value) {\n        let grouped = groupBy (array, key)\n        if (value in grouped)\n            return grouped[value]\n        return []\n    }\n    return array\n}\n\nconst indexBy = (array, key) => {\n    const result = {}\n    Object\n        .values (array)\n        .filter (entry => entry[key] != 'undefined')\n        .forEach (entry => {\n            result[entry[key]] = entry\n        })\n    return result\n}\n\nconst sortBy = (array, key, descending = false) => {\n    descending = descending ? -1 : 1\n    return array.sort ((a, b) => ((a[key] < b[key]) ? -descending : ((a[key] > b[key]) ? descending : 0)))\n}\n\nconst flatten = (array, result = []) => {\n    for (let i = 0, length = array.length; i < length; i++) {\n        const value = array[i]\n        if (Array.isArray (value)) {\n            flatten (value, result)\n        } else {\n            result.push (value)\n        }\n    }\n    return result\n}\n\nconst unique = array => array.filter ((value, index, self) => (self.indexOf (value) == index))\n\nconst pluck = (array, key) => array\n                                .filter (element => (typeof element[key] != 'undefined'))\n                                .map (element => element[key])\n\nconst urlencode = object => qs.stringify (object)\nconst rawencode = object => qs.stringify (object, { encode: false })\n\nconst sum = (...args) => {\n    const result = args.filter (arg => typeof arg != 'undefined')\n    return (result.length > 0) ?\n        result.reduce ((sum, value) => sum + value, 0) : undefined\n}\n\nconst safeFloat = (object, key, defaultValue = undefined) => {\n    if (key in object) {\n        if (typeof object[key] == 'number')\n            return object[key]\n        else if ((typeof object[key] == 'string') && object[key])\n            return parseFloat (object[key])\n    }\n    return defaultValue\n}\n\nconst safeString = (object, key, defaultValue = undefined) => {\n    return (object && (key in object) && object[key]) ? object[key].toString () : defaultValue\n}\n\nconst safeInteger = (object, key, defaultValue = undefined) => {\n    return ((key in object) && object[key]) ? parseInt (object[key]) : defaultValue\n}\n\nconst safeValue = (object, key, defaultValue = undefined) => {\n    return ((key in object) && object[key]) ? object[key] : defaultValue\n}\n\nconst uuid = a => a ?\n    (a ^ Math.random () * 16 >> a / 4).toString (16) :\n    ([1e7]+-1e3+-4e3+-8e3+-1e11).replace (/[018]/g, uuid)\n\n// See https://stackoverflow.com/questions/1685680/how-to-avoid-scientific-notation-for-large-numbers-in-javascript for discussion\n\nfunction toFixed (x) { // avoid scientific notation for too large and too small numbers\n\n    if (Math.abs (x) < 1.0) {\n        const e = parseInt (x.toString ().split ('e-')[1])\n        if (e) {\n            x *= Math.pow (10, e-1)\n            x = '0.' + (new Array (e)).join ('0') + x.toString ().substring (2)\n        }\n    } else {\n        let e = parseInt (x.toString ().split ('+')[1])\n        if (e > 20) {\n            e -= 20\n            x /= Math.pow (10, e)\n            x += (new Array (e+1)).join ('0')\n        }\n    }\n    return x\n}\n\n// See https://stackoverflow.com/questions/4912788/truncate-not-round-off-decimal-numbers-in-javascript for discussion\n\n// > So, after all it turned out, rounding bugs will always haunt you, no matter how hard you try to compensate them.\n// > Hence the problem should be attacked by representing numbers exactly in decimal notation.\n\nconst truncate_regExpCache = []\n    , truncate = (num, precision = 0) => {\n        num = toFixed (num)\n        const re = truncate_regExpCache[precision] || (truncate_regExpCache[precision] = new RegExp(\"([-]*\\\\d+\\\\.\\\\d{\" + precision + \"})(\\\\d)\"))\n        const [,result] = num.toString ().match (re) || [null, num]\n        return parseFloat (result)\n    }\n\nconst precisionFromString = (string) => {\n    const split = string.replace (/0+$/g, '').split ('.')\n    return (split.length > 1) ? (split[1].length) : 0\n}\n\nconst ordered = x => x // a stub to keep assoc keys in order, in JS it does nothing, it's mostly for Python\n\nconst aggregate = function (bidasks) {\n\n    let result = {}\n\n    bidasks.forEach (([ price, volume ]) => {\n        if (volume > 0)\n            result[price] = (result[price] || 0) + volume\n    })\n\n    return Object.keys (result).map (price => [\n        parseFloat (price),\n        parseFloat (result[price]),\n    ])\n}\n\n//-----------------------------------------------------------------------------\n// string ←→ binary ←→ base64 conversion routines\n\nconst stringToBinary = str => {\n    const arr = new Uint8Array (str.length)\n    for (let i = 0; i < str.length; i++) { arr[i] = str.charCodeAt(i); }\n    return CryptoJS.lib.WordArray.create (arr)\n}\n\nconst stringToBase64 = string => CryptoJS.enc.Latin1.parse (string).toString (CryptoJS.enc.Base64)\n    , utf16ToBase64  = string => CryptoJS.enc.Utf16 .parse (string).toString (CryptoJS.enc.Base64)\n    , base64ToBinary = string => CryptoJS.enc.Base64.parse (string)\n    , base64ToString = string => CryptoJS.enc.Base64.parse (string).toString (CryptoJS.enc.Utf8)\n    , binaryToString = string => string\n\nconst binaryConcat = (...args) => args.reduce ((a, b) => a.concat (b))\n\n// url-safe-base64 without equals signs, with + replaced by - and slashes replaced by underscores\nconst urlencodeBase64 = base64string => base64string.replace (/[=]+$/, '')\n                                                    .replace (/\\+/g, '-')\n                                                    .replace (/\\//g, '_')\n\n//-----------------------------------------------------------------------------\n// cryptography\n\nconst hash = (request, hash = 'md5', digest = 'hex') => {\n    const result = CryptoJS[hash.toUpperCase ()] (request)\n    return (digest == 'binary') ? result : result.toString (CryptoJS.enc[capitalize (digest)])\n}\n\nconst hmac = (request, secret, hash = 'sha256', digest = 'hex') => {\n    const encoding = (digest == 'binary') ? 'Latin1' : capitalize (digest)\n    return CryptoJS['Hmac' + hash.toUpperCase ()] (request, secret).toString (CryptoJS.enc[capitalize (encoding)])\n}\n\n//-----------------------------------------------------------------------------\n// a JSON Web Token authentication method\n\nconst jwt = (request, secret, alg = 'HS256', hash = 'sha256') => {\n    const encodedHeader = urlencodeBase64 (stringToBase64 (JSON.stringify ({ 'alg': alg, 'typ': 'JWT' })))\n        , encodedData = urlencodeBase64 (stringToBase64 (JSON.stringify (request)))\n        , token = [ encodedHeader, encodedData ].join ('.')\n        , signature = urlencodeBase64 (utf16ToBase64 (hmac (token, secret, hash, 'utf16')))\n    return [ token, signature ].join ('.')\n}\n\n//-----------------------------------------------------------------------------\n\nmodule.exports = {\n\n    setTimeout_safe,\n\n    // common utility functions\n\n    sleep,\n    timeout,\n    capitalize,\n    keysort,\n    extend,\n    deepExtend,\n    omit,\n    groupBy,\n    indexBy,\n    sortBy,\n    filterBy,\n    flatten,\n    unique,\n    pluck,\n    urlencode,\n    rawencode,\n    sum,\n    decimal,\n    safeFloat,\n    safeString,\n    safeInteger,\n    safeValue,\n    ordered,\n    aggregate,\n    truncate,\n    uuid,\n    precisionFromString,\n\n    // underscore aliases\n\n    index_by: indexBy,\n    sort_by: sortBy,\n    group_by: groupBy,\n    filter_by: filterBy,\n    safe_float: safeFloat,\n    safe_string: safeString,\n    safe_integer: safeInteger,\n    safe_value: safeValue,\n\n    // crypto functions\n\n    binaryConcat,\n    stringToBinary,\n    binaryToString,\n    stringToBase64,\n    utf16ToBase64,\n    base64ToBinary,\n    base64ToString,\n    urlencodeBase64,\n    hash,\n    hmac,\n    jwt,\n\n    // json\n    json:   JSON.stringify,\n    unjson: JSON.parse\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/base/functions.js\n// module id = 320\n// module chunks = 0",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-1 hash algorithm.\n\t     */\n\t    var SHA1 = C_algo.SHA1 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476,\n\t                0xc3d2e1f0\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\n\t            // Computation\n\t            for (var i = 0; i < 80; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n\t                    W[i] = (n << 1) | (n >>> 31);\n\t                }\n\n\t                var t = ((a << 5) | (a >>> 27)) + e + W[i];\n\t                if (i < 20) {\n\t                    t += ((b & c) | (~b & d)) + 0x5a827999;\n\t                } else if (i < 40) {\n\t                    t += (b ^ c ^ d) + 0x6ed9eba1;\n\t                } else if (i < 60) {\n\t                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n\t                } else /* if (i < 80) */ {\n\t                    t += (b ^ c ^ d) - 0x359d3e2a;\n\t                }\n\n\t                e = d;\n\t                d = c;\n\t                c = (b << 30) | (b >>> 2);\n\t                b = a;\n\t                a = t;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA1('message');\n\t     *     var hash = CryptoJS.SHA1(wordArray);\n\t     */\n\t    C.SHA1 = Hasher._createHelper(SHA1);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA1(message, key);\n\t     */\n\t    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n\t}());\n\n\n\treturn CryptoJS.SHA1;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/sha1.js\n// module id = 321\n// module chunks = 0",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * HMAC algorithm.\n\t     */\n\t    var HMAC = C_algo.HMAC = Base.extend({\n\t        /**\n\t         * Initializes a newly created HMAC.\n\t         *\n\t         * @param {Hasher} hasher The hash algorithm to use.\n\t         * @param {WordArray|string} key The secret key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t         */\n\t        init: function (hasher, key) {\n\t            // Init hasher\n\t            hasher = this._hasher = new hasher.init();\n\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof key == 'string') {\n\t                key = Utf8.parse(key);\n\t            }\n\n\t            // Shortcuts\n\t            var hasherBlockSize = hasher.blockSize;\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n\t            // Allow arbitrary length keys\n\t            if (key.sigBytes > hasherBlockSizeBytes) {\n\t                key = hasher.finalize(key);\n\t            }\n\n\t            // Clamp excess bits\n\t            key.clamp();\n\n\t            // Clone key for inner and outer pads\n\t            var oKey = this._oKey = key.clone();\n\t            var iKey = this._iKey = key.clone();\n\n\t            // Shortcuts\n\t            var oKeyWords = oKey.words;\n\t            var iKeyWords = iKey.words;\n\n\t            // XOR keys with pad constants\n\t            for (var i = 0; i < hasherBlockSize; i++) {\n\t                oKeyWords[i] ^= 0x5c5c5c5c;\n\t                iKeyWords[i] ^= 0x36363636;\n\t            }\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this HMAC to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Reset\n\t            hasher.reset();\n\t            hasher.update(this._iKey);\n\t        },\n\n\t        /**\n\t         * Updates this HMAC with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {HMAC} This HMAC instance.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.update('message');\n\t         *     hmacHasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            this._hasher.update(messageUpdate);\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the HMAC computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The HMAC.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmac = hmacHasher.finalize();\n\t         *     var hmac = hmacHasher.finalize('message');\n\t         *     var hmac = hmacHasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Compute HMAC\n\t            var innerHash = hasher.finalize(messageUpdate);\n\t            hasher.reset();\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n\t            return hmac;\n\t        }\n\t    });\n\t}());\n\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/hmac.js\n// module id = 322\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, OrderNotFound } = require ('./base/errors')\n\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class acx extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'acx',\n            'name': 'ACX',\n            'countries': 'AU',\n            'rateLimit': 1000,\n            'version': 'v2',\n            'hasCORS': true,\n            'hasFetchTickers': true,\n            'hasFetchOHLCV': true,\n            'hasWithdraw': true,\n            'timeframes': {\n                '1m': '1',\n                '5m': '5',\n                '15m': '15',\n                '30m': '30',\n                '1h': '60',\n                '2h': '120',\n                '4h': '240',\n                '12h': '720',\n                '1d': '1440',\n                '3d': '4320',\n                '1w': '10080',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/30247614-1fe61c74-9621-11e7-9e8c-f1a627afa279.jpg',\n                'extension': '.json',\n                'api': 'https://acx.io/api',\n                'www': 'https://acx.io',\n                'doc': 'https://acx.io/documents/api_v2',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'markets', // Get all available markets\n                        'tickers', // Get ticker of all markets\n                        'tickers/{market}', // Get ticker of specific market\n                        'trades', // Get recent trades on market, each trade is included only once Trades are sorted in reverse creation order.\n                        'order_book', // Get the order book of specified market\n                        'depth', // Get depth or specified market Both asks and bids are sorted from highest price to lowest.\n                        'k', // Get OHLC(k line) of specific market\n                        'k_with_pending_trades', // Get K data with pending trades, which are the trades not included in K data yet, because there's delay between trade generated and processed by K data generator\n                        'timestamp', // Get server current time, in seconds since Unix epoch\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'members/me', // Get your profile and accounts info\n                        'deposits', // Get your deposits history\n                        'deposit', // Get details of specific deposit\n                        'deposit_address', // Where to deposit The address field could be empty when a new address is generating (e.g. for bitcoin), you should try again later in that case.\n                        'orders', // Get your orders, results is paginated\n                        'order', // Get information of specified order\n                        'trades/my', // Get your executed trades Trades are sorted in reverse creation order.\n                        'withdraws', // Get your cryptocurrency withdraws\n                        'withdraw', // Get your cryptocurrency withdraw\n                    ],\n                    'post': [\n                        'orders', // Create a Sell/Buy order\n                        'orders/multi', // Create multiple sell/buy orders\n                        'orders/clear', // Cancel all my orders\n                        'order/delete', // Cancel an order\n                        'withdraw', // Create a withdraw\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0.0,\n                    'taker': 0.0,\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'withdraw': 0.0, // There is only 1% fee on withdrawals to your bank account.\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetMarkets ();\n        let result = [];\n        for (let p = 0; p < markets.length; p++) {\n            let market = markets[p];\n            let id = market['id'];\n            let symbol = market['name'];\n            let [ base, quote ] = symbol.split ('/');\n            base = this.commonCurrencyCode (base);\n            quote = this.commonCurrencyCode (quote);\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privateGetMembersMe ();\n        let balances = response['accounts'];\n        let result = { 'info': balances };\n        for (let b = 0; b < balances.length; b++) {\n            let balance = balances[b];\n            let currency = balance['currency'];\n            let uppercase = currency.toUpperCase ();\n            let account = {\n                'free': parseFloat (balance['balance']),\n                'used': parseFloat (balance['locked']),\n                'total': 0.0,\n            };\n            account['total'] = this.sum (account['free'], account['used']);\n            result[uppercase] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let orderbook = await this.publicGetDepth (this.extend ({\n            'market': market['id'],\n            'limit': 300,\n        }, params));\n        let timestamp = orderbook['timestamp'] * 1000;\n        let result = this.parseOrderBook (orderbook, timestamp);\n        result['bids'] = this.sortBy (result['bids'], 0, true);\n        result['asks'] = this.sortBy (result['asks'], 0);\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = ticker['at'] * 1000;\n        ticker = ticker['ticker'];\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high', undefined),\n            'low': this.safeFloat (ticker, 'low', undefined),\n            'bid': this.safeFloat (ticker, 'buy', undefined),\n            'ask': this.safeFloat (ticker, 'sell', undefined),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': this.safeFloat (ticker, 'last', undefined),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'vol', undefined),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let tickers = await this.publicGetTickers (params);\n        let ids = Object.keys (tickers);\n        let result = {};\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            let market = undefined;\n            let symbol = id;\n            if (id in this.markets_by_id) {\n                market = this.markets_by_id[id];\n                symbol = market['symbol'];\n            } else {\n                let base = id.slice (0, 3);\n                let quote = id.slice (3, 6);\n                base = base.toUpperCase ();\n                quote = quote.toUpperCase ();\n                base = this.commonCurrencyCode (base);\n                quote = this.commonCurrencyCode (quote);\n                let symbol = base + '/' + quote;\n            }\n            let ticker = tickers[id];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetTickersMarket (this.extend ({\n            'market': market['id'],\n        }, params));\n        return this.parseTicker (response, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        let timestamp = trade['timestamp'] * 1000;\n        let side = (trade['type'] == 'bid') ? 'buy' : 'sell';\n        return {\n            'info': trade,\n            'id': trade['tid'].toString (),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': side,\n            'price': trade['price'],\n            'amount': trade['amount'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetTrades (this.extend ({\n            'market': market['id'],\n        }, params));\n        // looks like they switched this endpoint off\n        // it returns 503 Service Temporarily Unavailable always\n        // return this.parseTrades (response, market, since, limit);\n        return response;\n    }\n\n    parseOHLCV (ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {\n        return [\n            ohlcv[0] * 1000,\n            ohlcv[1],\n            ohlcv[2],\n            ohlcv[3],\n            ohlcv[4],\n            ohlcv[5],\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        if (!limit)\n            limit = 500; // default is 30\n        let request = {\n            'market': market['id'],\n            'period': this.timeframes[timeframe],\n            'limit': limit,\n        };\n        if (since)\n            request['timestamp'] = since;\n        let response = await this.publicGetK (this.extend (request, params));\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    parseOrder (order, market = undefined) {\n        let symbol = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        } else {\n            let marketId = order['market'];\n            symbol = this.marketsById[marketId]['symbol'];\n        }\n        let timestamp = this.parse8601 (order['created_at']);\n        let state = order['state'];\n        let status = undefined;\n        if (state == 'done') {\n            status = 'closed';\n        } else if (state == 'wait') {\n            status = 'open';\n        } else if (state == 'cancel') {\n            status = 'canceled';\n        }\n        return {\n            'id': order['id'],\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'status': status,\n            'symbol': symbol,\n            'type': order['ord_type'],\n            'side': order['side'],\n            'price': parseFloat (order['price']),\n            'amount': parseFloat (order['volume']),\n            'filled': parseFloat (order['executed_volume']),\n            'remaining': parseFloat (order['remaining_volume']),\n            'trades': undefined,\n            'fee': undefined,\n            'info': order,\n        };\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let order = {\n            'market': this.marketId (symbol),\n            'side': side,\n            'volume': amount.toString (),\n            'ord_type': type,\n        };\n        if (type == 'limit') {\n            order['price'] = price.toString ();\n        }\n        let response = await this.privatePostOrders (this.extend (order, params));\n        let market = this.marketsById[response['market']];\n        return this.parseOrder (response, market);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let result = await this.privatePostOrderDelete ({ 'id': id });\n        let order = this.parseOrder(result);\n        if (order['status'] == 'closed') {\n            throw new OrderNotFound (this.id + ' ' + result);\n        }\n        return order;\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        await this.loadMarkets ();\n        let result = await this.privatePostWithdraw (this.extend ({\n            'currency': currency.toLowerCase (),\n            'sum': amount,\n            'address': address,\n        }, params));\n        return {\n            'info': result,\n            'id': undefined,\n        };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    encodeParams (params) {\n        if ('orders' in params) {\n            let orders = params['orders'];\n            let query = this.urlencode (this.keysort (this.omit (params, 'orders')));\n            for (let i = 0; i < orders.length; i++) {\n                let order = orders[i];\n                let keys = Object.keys (order);\n                for (let k = 0; k < keys.length; k++) {\n                    let key = keys[k];\n                    let value = order[key];\n                    query += '&orders%5B%5D%5B' + key + '%5D=' + value.toString ();\n                }\n            }\n            return query;\n        }\n        return this.urlencode (this.keysort (params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let request = '/api' + '/' + this.version + '/' + this.implodeParams (path, params);\n        if ('extension' in this.urls)\n            request += this.urls['extension'];\n        let query = this.omit (params, this.extractParams (path));\n        let url = this.urls['api'] + request;\n        if (api == 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ().toString ();\n            let query = this.encodeParams (this.extend ({\n                'access_key': this.apiKey,\n                'tonce': nonce,\n            }, params));\n            let auth = method + '|' + request + '|' + query;\n            let signature = this.hmac (this.encode (auth), this.encode (this.secret));\n            let suffix = query + '&signature=' + signature;\n            if (method == 'GET') {\n                url += '?' + suffix;\n            } else {\n                body = suffix;\n                headers = { 'Content-Type': 'application/x-www-form-urlencoded' };\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('error' in response)\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/acx.js\n// module id = 323\n// module chunks = 0",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Initialization and round constants tables\n\t    var H = [];\n\t    var K = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        function isPrime(n) {\n\t            var sqrtN = Math.sqrt(n);\n\t            for (var factor = 2; factor <= sqrtN; factor++) {\n\t                if (!(n % factor)) {\n\t                    return false;\n\t                }\n\t            }\n\n\t            return true;\n\t        }\n\n\t        function getFractionalBits(n) {\n\t            return ((n - (n | 0)) * 0x100000000) | 0;\n\t        }\n\n\t        var n = 2;\n\t        var nPrime = 0;\n\t        while (nPrime < 64) {\n\t            if (isPrime(n)) {\n\t                if (nPrime < 8) {\n\t                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n\t                }\n\t                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n\n\t                nPrime++;\n\t            }\n\n\t            n++;\n\t        }\n\t    }());\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-256 hash algorithm.\n\t     */\n\t    var SHA256 = C_algo.SHA256 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init(H.slice(0));\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\t            var f = H[5];\n\t            var g = H[6];\n\t            var h = H[7];\n\n\t            // Computation\n\t            for (var i = 0; i < 64; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var gamma0x = W[i - 15];\n\t                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n\t                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\n\t                                   (gamma0x >>> 3);\n\n\t                    var gamma1x = W[i - 2];\n\t                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n\t                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\n\t                                   (gamma1x >>> 10);\n\n\t                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n\t                }\n\n\t                var ch  = (e & f) ^ (~e & g);\n\t                var maj = (a & b) ^ (a & c) ^ (b & c);\n\n\t                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n\t                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n\t                var t1 = h + sigma1 + ch + K[i] + W[i];\n\t                var t2 = sigma0 + maj;\n\n\t                h = g;\n\t                g = f;\n\t                f = e;\n\t                e = (d + t1) | 0;\n\t                d = c;\n\t                c = b;\n\t                b = a;\n\t                a = (t1 + t2) | 0;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t            H[5] = (H[5] + f) | 0;\n\t            H[6] = (H[6] + g) | 0;\n\t            H[7] = (H[7] + h) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA256('message');\n\t     *     var hash = CryptoJS.SHA256(wordArray);\n\t     */\n\t    C.SHA256 = Hasher._createHelper(SHA256);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA256(message, key);\n\t     */\n\t    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA256;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/sha256.js\n// module id = 324\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var X64WordArray = C_x64.WordArray;\n\t    var C_algo = C.algo;\n\n\t    function X64Word_create() {\n\t        return X64Word.create.apply(X64Word, arguments);\n\t    }\n\n\t    // Constants\n\t    var K = [\n\t        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),\n\t        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),\n\t        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),\n\t        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),\n\t        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),\n\t        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),\n\t        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),\n\t        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),\n\t        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),\n\t        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),\n\t        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),\n\t        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),\n\t        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),\n\t        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),\n\t        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),\n\t        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),\n\t        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),\n\t        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),\n\t        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),\n\t        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),\n\t        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),\n\t        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),\n\t        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),\n\t        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),\n\t        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),\n\t        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),\n\t        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),\n\t        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),\n\t        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),\n\t        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),\n\t        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),\n\t        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),\n\t        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),\n\t        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),\n\t        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),\n\t        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),\n\t        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),\n\t        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),\n\t        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),\n\t        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)\n\t    ];\n\n\t    // Reusable objects\n\t    var W = [];\n\t    (function () {\n\t        for (var i = 0; i < 80; i++) {\n\t            W[i] = X64Word_create();\n\t        }\n\t    }());\n\n\t    /**\n\t     * SHA-512 hash algorithm.\n\t     */\n\t    var SHA512 = C_algo.SHA512 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new X64WordArray.init([\n\t                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),\n\t                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),\n\t                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),\n\t                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcuts\n\t            var H = this._hash.words;\n\n\t            var H0 = H[0];\n\t            var H1 = H[1];\n\t            var H2 = H[2];\n\t            var H3 = H[3];\n\t            var H4 = H[4];\n\t            var H5 = H[5];\n\t            var H6 = H[6];\n\t            var H7 = H[7];\n\n\t            var H0h = H0.high;\n\t            var H0l = H0.low;\n\t            var H1h = H1.high;\n\t            var H1l = H1.low;\n\t            var H2h = H2.high;\n\t            var H2l = H2.low;\n\t            var H3h = H3.high;\n\t            var H3l = H3.low;\n\t            var H4h = H4.high;\n\t            var H4l = H4.low;\n\t            var H5h = H5.high;\n\t            var H5l = H5.low;\n\t            var H6h = H6.high;\n\t            var H6l = H6.low;\n\t            var H7h = H7.high;\n\t            var H7l = H7.low;\n\n\t            // Working variables\n\t            var ah = H0h;\n\t            var al = H0l;\n\t            var bh = H1h;\n\t            var bl = H1l;\n\t            var ch = H2h;\n\t            var cl = H2l;\n\t            var dh = H3h;\n\t            var dl = H3l;\n\t            var eh = H4h;\n\t            var el = H4l;\n\t            var fh = H5h;\n\t            var fl = H5l;\n\t            var gh = H6h;\n\t            var gl = H6l;\n\t            var hh = H7h;\n\t            var hl = H7l;\n\n\t            // Rounds\n\t            for (var i = 0; i < 80; i++) {\n\t                // Shortcut\n\t                var Wi = W[i];\n\n\t                // Extend message\n\t                if (i < 16) {\n\t                    var Wih = Wi.high = M[offset + i * 2]     | 0;\n\t                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;\n\t                } else {\n\t                    // Gamma0\n\t                    var gamma0x  = W[i - 15];\n\t                    var gamma0xh = gamma0x.high;\n\t                    var gamma0xl = gamma0x.low;\n\t                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);\n\t                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));\n\n\t                    // Gamma1\n\t                    var gamma1x  = W[i - 2];\n\t                    var gamma1xh = gamma1x.high;\n\t                    var gamma1xl = gamma1x.low;\n\t                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);\n\t                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));\n\n\t                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n\t                    var Wi7  = W[i - 7];\n\t                    var Wi7h = Wi7.high;\n\t                    var Wi7l = Wi7.low;\n\n\t                    var Wi16  = W[i - 16];\n\t                    var Wi16h = Wi16.high;\n\t                    var Wi16l = Wi16.low;\n\n\t                    var Wil = gamma0l + Wi7l;\n\t                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);\n\t                    var Wil = Wil + gamma1l;\n\t                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);\n\t                    var Wil = Wil + Wi16l;\n\t                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);\n\n\t                    Wi.high = Wih;\n\t                    Wi.low  = Wil;\n\t                }\n\n\t                var chh  = (eh & fh) ^ (~eh & gh);\n\t                var chl  = (el & fl) ^ (~el & gl);\n\t                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\n\t                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);\n\n\t                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\n\t                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\n\t                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));\n\t                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));\n\n\t                // t1 = h + sigma1 + ch + K[i] + W[i]\n\t                var Ki  = K[i];\n\t                var Kih = Ki.high;\n\t                var Kil = Ki.low;\n\n\t                var t1l = hl + sigma1l;\n\t                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\n\t                var t1l = t1l + chl;\n\t                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\n\t                var t1l = t1l + Kil;\n\t                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);\n\t                var t1l = t1l + Wil;\n\t                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);\n\n\t                // t2 = sigma0 + maj\n\t                var t2l = sigma0l + majl;\n\t                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);\n\n\t                // Update working variables\n\t                hh = gh;\n\t                hl = gl;\n\t                gh = fh;\n\t                gl = fl;\n\t                fh = eh;\n\t                fl = el;\n\t                el = (dl + t1l) | 0;\n\t                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n\t                dh = ch;\n\t                dl = cl;\n\t                ch = bh;\n\t                cl = bl;\n\t                bh = ah;\n\t                bl = al;\n\t                al = (t1l + t2l) | 0;\n\t                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\n\t            }\n\n\t            // Intermediate hash value\n\t            H0l = H0.low  = (H0l + al);\n\t            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));\n\t            H1l = H1.low  = (H1l + bl);\n\t            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));\n\t            H2l = H2.low  = (H2l + cl);\n\t            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));\n\t            H3l = H3.low  = (H3l + dl);\n\t            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));\n\t            H4l = H4.low  = (H4l + el);\n\t            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));\n\t            H5l = H5.low  = (H5l + fl);\n\t            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));\n\t            H6l = H6.low  = (H6l + gl);\n\t            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));\n\t            H7l = H7.low  = (H7l + hl);\n\t            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Convert hash to 32-bit word array before returning\n\t            var hash = this._hash.toX32();\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        },\n\n\t        blockSize: 1024/32\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA512('message');\n\t     *     var hash = CryptoJS.SHA512(wordArray);\n\t     */\n\t    C.SHA512 = Hasher._createHelper(SHA512);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA512(message, key);\n\t     */\n\t    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);\n\t}());\n\n\n\treturn CryptoJS.SHA512;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/sha512.js\n// module id = 325\n// module chunks = 0","'use strict';\n\nvar has = Object.prototype.hasOwnProperty;\n\nvar hexTable = (function () {\n    var array = [];\n    for (var i = 0; i < 256; ++i) {\n        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n    }\n\n    return array;\n}());\n\nvar compactQueue = function compactQueue(queue) {\n    var obj;\n\n    while (queue.length) {\n        var item = queue.pop();\n        obj = item.obj[item.prop];\n\n        if (Array.isArray(obj)) {\n            var compacted = [];\n\n            for (var j = 0; j < obj.length; ++j) {\n                if (typeof obj[j] !== 'undefined') {\n                    compacted.push(obj[j]);\n                }\n            }\n\n            item.obj[item.prop] = compacted;\n        }\n    }\n\n    return obj;\n};\n\nexports.arrayToObject = function arrayToObject(source, options) {\n    var obj = options && options.plainObjects ? Object.create(null) : {};\n    for (var i = 0; i < source.length; ++i) {\n        if (typeof source[i] !== 'undefined') {\n            obj[i] = source[i];\n        }\n    }\n\n    return obj;\n};\n\nexports.merge = function merge(target, source, options) {\n    if (!source) {\n        return target;\n    }\n\n    if (typeof source !== 'object') {\n        if (Array.isArray(target)) {\n            target.push(source);\n        } else if (typeof target === 'object') {\n            if (options.plainObjects || options.allowPrototypes || !has.call(Object.prototype, source)) {\n                target[source] = true;\n            }\n        } else {\n            return [target, source];\n        }\n\n        return target;\n    }\n\n    if (typeof target !== 'object') {\n        return [target].concat(source);\n    }\n\n    var mergeTarget = target;\n    if (Array.isArray(target) && !Array.isArray(source)) {\n        mergeTarget = exports.arrayToObject(target, options);\n    }\n\n    if (Array.isArray(target) && Array.isArray(source)) {\n        source.forEach(function (item, i) {\n            if (has.call(target, i)) {\n                if (target[i] && typeof target[i] === 'object') {\n                    target[i] = exports.merge(target[i], item, options);\n                } else {\n                    target.push(item);\n                }\n            } else {\n                target[i] = item;\n            }\n        });\n        return target;\n    }\n\n    return Object.keys(source).reduce(function (acc, key) {\n        var value = source[key];\n\n        if (has.call(acc, key)) {\n            acc[key] = exports.merge(acc[key], value, options);\n        } else {\n            acc[key] = value;\n        }\n        return acc;\n    }, mergeTarget);\n};\n\nexports.assign = function assignSingleSource(target, source) {\n    return Object.keys(source).reduce(function (acc, key) {\n        acc[key] = source[key];\n        return acc;\n    }, target);\n};\n\nexports.decode = function (str) {\n    try {\n        return decodeURIComponent(str.replace(/\\+/g, ' '));\n    } catch (e) {\n        return str;\n    }\n};\n\nexports.encode = function encode(str) {\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n\n    var string = typeof str === 'string' ? str : String(str);\n\n    var out = '';\n    for (var i = 0; i < string.length; ++i) {\n        var c = string.charCodeAt(i);\n\n        if (\n            c === 0x2D // -\n            || c === 0x2E // .\n            || c === 0x5F // _\n            || c === 0x7E // ~\n            || (c >= 0x30 && c <= 0x39) // 0-9\n            || (c >= 0x41 && c <= 0x5A) // a-z\n            || (c >= 0x61 && c <= 0x7A) // A-Z\n        ) {\n            out += string.charAt(i);\n            continue;\n        }\n\n        if (c < 0x80) {\n            out = out + hexTable[c];\n            continue;\n        }\n\n        if (c < 0x800) {\n            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);\n            continue;\n        }\n\n        if (c < 0xD800 || c >= 0xE000) {\n            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);\n            continue;\n        }\n\n        i += 1;\n        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));\n        out += hexTable[0xF0 | (c >> 18)]\n            + hexTable[0x80 | ((c >> 12) & 0x3F)]\n            + hexTable[0x80 | ((c >> 6) & 0x3F)]\n            + hexTable[0x80 | (c & 0x3F)];\n    }\n\n    return out;\n};\n\nexports.compact = function compact(value) {\n    var queue = [{ obj: { o: value }, prop: 'o' }];\n    var refs = [];\n\n    for (var i = 0; i < queue.length; ++i) {\n        var item = queue[i];\n        var obj = item.obj[item.prop];\n\n        var keys = Object.keys(obj);\n        for (var j = 0; j < keys.length; ++j) {\n            var key = keys[j];\n            var val = obj[key];\n            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n                queue.push({ obj: obj, prop: key });\n                refs.push(val);\n            }\n        }\n    }\n\n    return compactQueue(queue);\n};\n\nexports.isRegExp = function isRegExp(obj) {\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\n};\n\nexports.isBuffer = function isBuffer(obj) {\n    if (obj === null || typeof obj === 'undefined') {\n        return false;\n    }\n\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/qs/lib/utils.js\n// module id = 326\n// module chunks = 0","'use strict';\n\nvar replace = String.prototype.replace;\nvar percentTwenties = /%20/g;\n\nmodule.exports = {\n    'default': 'RFC3986',\n    formatters: {\n        RFC1738: function (value) {\n            return replace.call(value, percentTwenties, '+');\n        },\n        RFC3986: function (value) {\n            return value;\n        }\n    },\n    RFC1738: 'RFC1738',\n    RFC3986: 'RFC3986'\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/qs/lib/formats.js\n// module id = 327\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class _1btcxe extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': '_1btcxe',\n            'name': '1BTCXE',\n            'countries': 'PA', // Panama\n            'comment': 'Crypto Capital API',\n            'hasCORS': true,\n            'hasFetchOHLCV': true,\n            'hasWithdraw': true,\n            'timeframes': {\n                '1d': '1year',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766049-2b294408-5ecc-11e7-85cc-adaff013dc1a.jpg',\n                'api': 'https://1btcxe.com/api',\n                'www': 'https://1btcxe.com',\n                'doc': 'https://1btcxe.com/api-docs.php',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'stats',\n                        'historical-prices',\n                        'order-book',\n                        'transactions',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'balances-and-info',\n                        'open-orders',\n                        'user-transactions',\n                        'btc-deposit-address/get',\n                        'btc-deposit-address/new',\n                        'deposits/get',\n                        'withdrawals/get',\n                        'orders/new',\n                        'orders/edit',\n                        'orders/cancel',\n                        'orders/status',\n                        'withdrawals/new',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/USD': { 'id': 'USD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },\n                'BTC/EUR': { 'id': 'EUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },\n                'BTC/CNY': { 'id': 'CNY', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY' },\n                'BTC/RUB': { 'id': 'RUB', 'symbol': 'BTC/RUB', 'base': 'BTC', 'quote': 'RUB' },\n                'BTC/CHF': { 'id': 'CHF', 'symbol': 'BTC/CHF', 'base': 'BTC', 'quote': 'CHF' },\n                'BTC/JPY': { 'id': 'JPY', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY' },\n                'BTC/GBP': { 'id': 'GBP', 'symbol': 'BTC/GBP', 'base': 'BTC', 'quote': 'GBP' },\n                'BTC/CAD': { 'id': 'CAD', 'symbol': 'BTC/CAD', 'base': 'BTC', 'quote': 'CAD' },\n                'BTC/AUD': { 'id': 'AUD', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD' },\n                'BTC/AED': { 'id': 'AED', 'symbol': 'BTC/AED', 'base': 'BTC', 'quote': 'AED' },\n                'BTC/BGN': { 'id': 'BGN', 'symbol': 'BTC/BGN', 'base': 'BTC', 'quote': 'BGN' },\n                'BTC/CZK': { 'id': 'CZK', 'symbol': 'BTC/CZK', 'base': 'BTC', 'quote': 'CZK' },\n                'BTC/DKK': { 'id': 'DKK', 'symbol': 'BTC/DKK', 'base': 'BTC', 'quote': 'DKK' },\n                'BTC/HKD': { 'id': 'HKD', 'symbol': 'BTC/HKD', 'base': 'BTC', 'quote': 'HKD' },\n                'BTC/HRK': { 'id': 'HRK', 'symbol': 'BTC/HRK', 'base': 'BTC', 'quote': 'HRK' },\n                'BTC/HUF': { 'id': 'HUF', 'symbol': 'BTC/HUF', 'base': 'BTC', 'quote': 'HUF' },\n                'BTC/ILS': { 'id': 'ILS', 'symbol': 'BTC/ILS', 'base': 'BTC', 'quote': 'ILS' },\n                'BTC/INR': { 'id': 'INR', 'symbol': 'BTC/INR', 'base': 'BTC', 'quote': 'INR' },\n                'BTC/MUR': { 'id': 'MUR', 'symbol': 'BTC/MUR', 'base': 'BTC', 'quote': 'MUR' },\n                'BTC/MXN': { 'id': 'MXN', 'symbol': 'BTC/MXN', 'base': 'BTC', 'quote': 'MXN' },\n                'BTC/NOK': { 'id': 'NOK', 'symbol': 'BTC/NOK', 'base': 'BTC', 'quote': 'NOK' },\n                'BTC/NZD': { 'id': 'NZD', 'symbol': 'BTC/NZD', 'base': 'BTC', 'quote': 'NZD' },\n                'BTC/PLN': { 'id': 'PLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN' },\n                'BTC/RON': { 'id': 'RON', 'symbol': 'BTC/RON', 'base': 'BTC', 'quote': 'RON' },\n                'BTC/SEK': { 'id': 'SEK', 'symbol': 'BTC/SEK', 'base': 'BTC', 'quote': 'SEK' },\n                'BTC/SGD': { 'id': 'SGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' },\n                'BTC/THB': { 'id': 'THB', 'symbol': 'BTC/THB', 'base': 'BTC', 'quote': 'THB' },\n                'BTC/TRY': { 'id': 'TRY', 'symbol': 'BTC/TRY', 'base': 'BTC', 'quote': 'TRY' },\n                'BTC/ZAR': { 'id': 'ZAR', 'symbol': 'BTC/ZAR', 'base': 'BTC', 'quote': 'ZAR' },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        let response = await this.privatePostBalancesAndInfo ();\n        let balance = response['balances-and-info'];\n        let result = { 'info': balance };\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let account = this.account ();\n            account['free'] = this.safeFloat (balance['available'], currency, 0.0);\n            account['used'] = this.safeFloat (balance['on_hold'], currency, 0.0);\n            account['total'] = this.sum (account['free'], account['used']);\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let response = await this.publicGetOrderBook (this.extend ({\n            'currency': this.marketId (symbol),\n        }, params));\n        return this.parseOrderBook (response['order-book'], undefined, 'bid', 'ask', 'price', 'order_amount');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let response = await this.publicGetStats (this.extend ({\n            'currency': this.marketId (symbol),\n        }, params));\n        let ticker = response['stats'];\n        let timestamp = this.milliseconds ();\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['max']),\n            'low': parseFloat (ticker['min']),\n            'bid': parseFloat (ticker['bid']),\n            'ask': parseFloat (ticker['ask']),\n            'vwap': undefined,\n            'open': parseFloat (ticker['open']),\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last_price']),\n            'change': parseFloat (ticker['daily_change']),\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': undefined,\n            'quoteVolume': parseFloat (ticker['total_btc_traded']),\n        };\n    }\n\n    parseOHLCV (ohlcv, market = undefined, timeframe = '1d', since = undefined, limit = undefined) {\n        return [\n            this.parse8601 (ohlcv['date'] + ' 00:00:00'),\n            undefined,\n            undefined,\n            undefined,\n            parseFloat (ohlcv['price']),\n            undefined,\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1d', since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetHistoricalPrices (this.extend ({\n            'currency': market['id'],\n            'timeframe': this.timeframes[timeframe],\n        }, params));\n        let ohlcvs = this.omit (response['historical-prices'], 'request_currency');\n        return this.parseOHLCVs (ohlcvs, market, timeframe, since, limit);\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = parseInt (trade['timestamp']) * 1000;\n        return {\n            'id': trade['id'],\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'order': undefined,\n            'type': undefined,\n            'side': trade['maker_type'],\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['amount']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetTransactions (this.extend ({\n            'currency': market['id'],\n        }, params));\n        let trades = this.omit (response['transactions'], 'request_currency');\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        let order = {\n            'side': side,\n            'type': type,\n            'currency': this.marketId (symbol),\n            'amount': amount,\n        };\n        if (type == 'limit')\n            order['limit_price'] = price;\n        let result = await this.privatePostOrdersNew (this.extend (order, params));\n        return {\n            'info': result,\n            'id': result,\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostOrdersCancel ({ 'id': id });\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostWithdrawalsNew (this.extend ({\n            'currency': currency,\n            'amount': parseFloat (amount),\n            'address': address,\n        }, params));\n        return {\n            'info': response,\n            'id': response['result']['uuid'],\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        if (this.id == 'cryptocapital')\n            throw new ExchangeError (this.id + ' is an abstract base API for _1btcxe');\n        let url = this.urls['api'] + '/' + path;\n        if (api == 'public') {\n            if (Object.keys (params).length)\n                url += '?' + this.urlencode (params);\n        } else {\n            this.checkRequiredCredentials ();\n            let query = this.extend ({\n                'api_key': this.apiKey,\n                'nonce': this.nonce (),\n            }, params);\n            let request = this.json (query);\n            query['signature'] = this.hmac (this.encode (request), this.encode (this.secret));\n            body = this.json (query);\n            headers = { 'Content-Type': 'application/json' };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('errors' in response) {\n            let errors = [];\n            for (let e = 0; e < response['errors'].length; e++) {\n                let error = response['errors'][e];\n                errors.push (error['code'] + ': ' + error['message']);\n            }\n            errors = errors.join (' ');\n            throw new ExchangeError (this.id + ' ' + errors);\n        }\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/_1btcxe.js\n// module id = 328\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, InsufficientFunds, NotSupported, InvalidOrder, OrderNotFound } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitfinex extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitfinex',\n            'name': 'Bitfinex',\n            'countries': 'VG',\n            'version': 'v1',\n            'rateLimit': 1500,\n            'hasCORS': false,\n            // old metainfo interface\n            'hasFetchOrder': true,\n            'hasFetchTickers': true,\n            'hasDeposit': true,\n            'hasWithdraw': true,\n            'hasFetchOHLCV': true,\n            'hasFetchOpenOrders': true,\n            'hasFetchClosedOrders': true,\n            // new metainfo interface\n            'has': {\n                'fetchOHLCV': true,\n                'fetchTickers': true,\n                'fetchOrder': true,\n                'fetchOpenOrders': true,\n                'fetchClosedOrders': true,\n                'fetchMyTrades': true,\n                'withdraw': true,\n                'deposit': true,\n            },\n            'timeframes': {\n                '1m': '1m',\n                '5m': '5m',\n                '15m': '15m',\n                '30m': '30m',\n                '1h': '1h',\n                '3h': '3h',\n                '6h': '6h',\n                '12h': '12h',\n                '1d': '1D',\n                '1w': '7D',\n                '2w': '14D',\n                '1M': '1M',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg',\n                'api': 'https://api.bitfinex.com',\n                'www': 'https://www.bitfinex.com',\n                'doc': [\n                    'https://bitfinex.readme.io/v1/docs',\n                    'https://github.com/bitfinexcom/bitfinex-api-node',\n                ],\n            },\n            'api': {\n                'v2': {\n                    'get': [\n                        'candles/trade:{timeframe}:{symbol}/{section}',\n                        'candles/trade:{timeframe}:{symbol}/last',\n                        'candles/trade:{timeframe}:{symbol}/hist',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'book/{symbol}',\n                        // 'candles/{symbol}',\n                        'lendbook/{currency}',\n                        'lends/{currency}',\n                        'pubticker/{symbol}',\n                        'stats/{symbol}',\n                        'symbols',\n                        'symbols_details',\n                        'tickers',\n                        'today',\n                        'trades/{symbol}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'account_fees',\n                        'account_infos',\n                        'balances',\n                        'basket_manage',\n                        'credits',\n                        'deposit/new',\n                        'funding/close',\n                        'history',\n                        'history/movements',\n                        'key_info',\n                        'margin_infos',\n                        'mytrades',\n                        'mytrades_funding',\n                        'offer/cancel',\n                        'offer/new',\n                        'offer/status',\n                        'offers',\n                        'offers/hist',\n                        'order/cancel',\n                        'order/cancel/all',\n                        'order/cancel/multi',\n                        'order/cancel/replace',\n                        'order/new',\n                        'order/new/multi',\n                        'order/status',\n                        'orders',\n                        'orders/hist',\n                        'position/claim',\n                        'positions',\n                        'summary',\n                        'taken_funds',\n                        'total_taken_funds',\n                        'transfer',\n                        'unused_taken_funds',\n                        'withdraw',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'maker': 0.1 / 100,\n                    'taker': 0.2 / 100,\n                    'tiers': {\n                        'taker': [\n                            [0, 0.2 / 100],\n                            [500000, 0.2 / 100],\n                            [1000000, 0.2 / 100],\n                            [2500000, 0.2 / 100],\n                            [5000000, 0.2 / 100],\n                            [7500000, 0.2 / 100],\n                            [10000000, 0.18 / 100],\n                            [15000000, 0.16 / 100],\n                            [20000000, 0.14 / 100],\n                            [25000000, 0.12 / 100],\n                            [30000000, 0.1 / 100],\n                        ],\n                        'maker': [\n                            [0, 0.1 / 100],\n                            [500000, 0.08 / 100],\n                            [1000000, 0.06 / 100],\n                            [2500000, 0.04 / 100],\n                            [5000000, 0.02 / 100],\n                            [7500000, 0],\n                            [10000000, 0],\n                            [15000000, 0],\n                            [20000000, 0],\n                            [25000000, 0],\n                            [30000000, 0],\n                        ],\n                    },\n                },\n                'funding': {\n                    'tierBased': false, // true for tier-based/progressive\n                    'percentage': false, // fixed commission\n                    'deposit': {\n                        'BTC': 0.0005,\n                        'IOTA': 0.5,\n                        'ETH': 0.01,\n                        'BCH': 0.01,\n                        'LTC': 0.1,\n                        'EOS': 0.1,\n                        'XMR': 0.04,\n                        'SAN': 0.1,\n                        'DASH': 0.01,\n                        'ETC': 0.01,\n                        'XPR': 0.02,\n                        'YYW': 0.1,\n                        'NEO': 0,\n                        'ZEC': 0.1,\n                        'BTG': 0,\n                        'OMG': 0.1,\n                        'DATA': 1,\n                        'QASH': 1,\n                        'ETP': 0.01,\n                        'QTUM': 0.01,\n                        'EDO': 0.5,\n                        'AVT': 0.5,\n                        'USDT': 0,\n                    },\n                    'withdraw': {\n                        'BTC': 0.0005,\n                        'IOTA': 0.5,\n                        'ETH': 0.01,\n                        'BCH': 0.01,\n                        'LTC': 0.1,\n                        'EOS': 0.1,\n                        'XMR': 0.04,\n                        'SAN': 0.1,\n                        'DASH': 0.01,\n                        'ETC': 0.01,\n                        'XPR': 0.02,\n                        'YYW': 0.1,\n                        'NEO': 0,\n                        'ZEC': 0.1,\n                        'BTG': 0,\n                        'OMG': 0.1,\n                        'DATA': 1,\n                        'QASH': 1,\n                        'ETP': 0.01,\n                        'QTUM': 0.01,\n                        'EDO': 0.5,\n                        'AVT': 0.5,\n                        'USDT': 5,\n                    },\n                },\n            },\n        });\n    }\n\n    commonCurrencyCode (currency) {\n        // issue #4 Bitfinex names Dash as DSH, instead of DASH\n        if (currency == 'DSH')\n            return 'DASH';\n        if (currency == 'QTM')\n            return 'QTUM';\n        if (currency == 'BCC')\n            return 'CST_BCC';\n        if (currency == 'BCU')\n            return 'CST_BCU';\n        // issue #796\n        if (currency == 'IOT')\n            return 'IOTA';\n        return currency;\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetSymbolsDetails ();\n        let result = [];\n        for (let p = 0; p < markets.length; p++) {\n            let market = markets[p];\n            let id = market['pair'].toUpperCase ();\n            let baseId = id.slice (0, 3);\n            let quoteId = id.slice (3, 6);\n            let base = this.commonCurrencyCode (baseId);\n            let quote = this.commonCurrencyCode (quoteId);\n            let symbol = base + '/' + quote;\n            let precision = {\n                'price': market['price_precision'],\n                'amount': market['price_precision'],\n            };\n            result.push (this.extend (this.fees['trading'], {\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': true,\n                'info': market,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': parseFloat (market['minimum_order_size']),\n                        'max': parseFloat (market['maximum_order_size']),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': Math.pow (10, precision['price']),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            }));\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let balanceType = this.safeString (params, 'type', 'exchange');\n        let balances = await this.privatePostBalances ();\n        let result = { 'info': balances };\n        for (let i = 0; i < balances.length; i++) {\n            let balance = balances[i];\n            if (balance['type'] == balanceType) {\n                let currency = balance['currency'];\n                let uppercase = currency.toUpperCase ();\n                uppercase = this.commonCurrencyCode (uppercase);\n                let account = this.account ();\n                account['free'] = parseFloat (balance['available']);\n                account['total'] = parseFloat (balance['amount']);\n                account['used'] = account['total'] - account['free'];\n                result[uppercase] = account;\n            }\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let orderbook = await this.publicGetBookSymbol (this.extend ({\n            'symbol': this.marketId (symbol),\n        }, params));\n        return this.parseOrderBook (orderbook, undefined, 'bids', 'asks', 'price', 'amount');\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let tickers = await this.publicGetTickers (params);\n        let result = {};\n        for (let i = 0; i < tickers.length; i++) {\n            let ticker = tickers[i];\n            if ('pair' in ticker) {\n                let id = ticker['pair'];\n                if (id in this.markets_by_id) {\n                    let market = this.markets_by_id[id];\n                    let symbol = market['symbol'];\n                    result[symbol] = this.parseTicker (ticker, market);\n                } else {\n                    throw new ExchangeError (this.id + ' fetchTickers() failed to recognize symbol ' + id + ' ' + this.json (ticker));\n                }\n            } else {\n                throw new ExchangeError (this.id + ' fetchTickers() response not recognized ' + this.json (tickers));\n            }\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let ticker = await this.publicGetPubtickerSymbol (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = parseFloat (ticker['timestamp']) * 1000;\n        let symbol = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        } else if ('pair' in ticker) {\n            let id = ticker['pair'];\n            if (id in this.markets_by_id) {\n                market = this.markets_by_id[id];\n                symbol = market['symbol'];\n            } else {\n                throw new ExchangeError (this.id + ' unrecognized ticker symbol ' + id + ' ' + this.json (ticker));\n            }\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['bid']),\n            'ask': parseFloat (ticker['ask']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last_price']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': parseFloat (ticker['mid']),\n            'baseVolume': parseFloat (ticker['volume']),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = parseInt (parseFloat (trade['timestamp'])) * 1000;\n        let side = trade['type'].toLowerCase ();\n        let orderId = this.safeString (trade, 'order_id');\n        let price = parseFloat (trade['price']);\n        let amount = parseFloat (trade['amount']);\n        let cost = price * amount;\n        return {\n            'id': trade['tid'].toString (),\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'order': orderId,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': undefined,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetTradesSymbol (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = { 'symbol': market['id'] };\n        if (limit) {\n            request['limit_trades'] = limit;\n        }\n        if (since) {\n            request['timestamp'] = parseInt (since / 1000);\n        }\n        let response = await this.privatePostMytrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let orderType = type;\n        if ((type == 'limit') || (type == 'market'))\n            orderType = 'exchange ' + type;\n        // amount = this.amountToPrecision (symbol, amount);\n        let order = {\n            'symbol': this.marketId (symbol),\n            'amount': amount.toString (),\n            'side': side,\n            'type': orderType,\n            'ocoorder': false,\n            'buy_price_oco': 0,\n            'sell_price_oco': 0,\n        };\n        if (type == 'market') {\n            order['price'] = this.nonce ().toString ();\n        } else {\n            // price = this.priceToPrecision (symbol, price);\n            order['price'] = price.toString ();\n        }\n        let result = await this.privatePostOrderNew (this.extend (order, params));\n        return this.parseOrder(result);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privatePostOrderCancel ({ 'order_id': parseInt (id) });\n    }\n\n    parseOrder (order, market = undefined) {\n        let side = order['side'];\n        let open = order['is_live'];\n        let canceled = order['is_cancelled'];\n        let status = undefined;\n        if (open) {\n            status = 'open';\n        } else if (canceled) {\n            status = 'canceled';\n        } else {\n            status = 'closed';\n        }\n        let symbol = undefined;\n        if (!market) {\n            let exchange = order['symbol'].toUpperCase ();\n            if (exchange in this.markets_by_id) {\n                market = this.markets_by_id[exchange];\n            }\n        }\n        if (market)\n            symbol = market['symbol'];\n        let orderType = order['type'];\n        let exchange = orderType.indexOf ('exchange ') >= 0;\n        if (exchange) {\n            let [ prefix, orderType ] = order['type'].split (' ');\n        }\n        let timestamp = parseInt (parseFloat (order['timestamp']) * 1000);\n        let result = {\n            'info': order,\n            'id': order['id'].toString (),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': orderType,\n            'side': side,\n            'price': parseFloat (order['price']),\n            'average': parseFloat (order['avg_execution_price']),\n            'amount': parseFloat (order['original_amount']),\n            'remaining': parseFloat (order['remaining_amount']),\n            'filled': parseFloat (order['executed_amount']),\n            'status': status,\n            'fee': undefined,\n        };\n        return result;\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostOrders (params);\n        let orders = this.parseOrders (response, undefined, since, limit);\n        if (symbol)\n            orders = this.filterBy (orders, 'symbol', symbol);\n        return orders;\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let request = {};\n        if (limit)\n            request['limit'] = limit;\n        let response = await this.privatePostOrdersHist (this.extend (request, params));\n        let orders = this.parseOrders (response, undefined, since, limit);\n        if (symbol)\n            orders = this.filterBy (orders, 'symbol', symbol);\n        orders = this.filterBy (orders, 'status', 'closed');\n        return orders;\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostOrderStatus (this.extend ({\n            'order_id': parseInt (id),\n        }, params));\n        return this.parseOrder (response);\n    }\n\n    parseOHLCV (ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {\n        return [\n            ohlcv[0],\n            ohlcv[1],\n            ohlcv[3],\n            ohlcv[4],\n            ohlcv[2],\n            ohlcv[5],\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let v2id = 't' + market['id'];\n        let request = {\n            'symbol': v2id,\n            'timeframe': this.timeframes[timeframe],\n        };\n        if (limit)\n            request['limit'] = limit;\n        if (since)\n            request['start'] = since;\n        request = this.extend (request, params);\n        let response = await this.v2GetCandlesTradeTimeframeSymbolHist (request);\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    getCurrencyName (currency) {\n        if (currency == 'BTC') {\n            return 'bitcoin';\n        } else if (currency == 'LTC') {\n            return 'litecoin';\n        } else if (currency == 'ETH') {\n            return 'ethereum';\n        } else if (currency == 'ETC') {\n            return 'ethereumc';\n        } else if (currency == 'OMNI') {\n            return 'mastercoin'; // ???\n        } else if (currency == 'ZEC') {\n            return 'zcash';\n        } else if (currency == 'XMR') {\n            return 'monero';\n        } else if (currency == 'USD') {\n            return 'wire';\n        } else if (currency == 'DASH') {\n            return 'dash';\n        } else if (currency == 'XRP') {\n            return 'ripple';\n        } else if (currency == 'EOS') {\n            return 'eos';\n        } else if (currency == 'BCH') {\n            return 'bcash';\n        } else if (currency == 'USDT') {\n            return 'tetheruso';\n        }\n        throw new NotSupported (this.id + ' ' + currency + ' not supported for withdrawal');\n    }\n\n    async createDepositAddress (currency, params = {}) {\n        let response = await this.fetchDepositAddress (currency, this.extend ({\n            'renew': 1,\n        }, params));\n        return {\n            'currency': currency,\n            'address': response['address'],\n            'status': 'ok',\n            'info': response['info'],\n        };\n    }\n\n    async fetchDepositAddress (currency, params = {}) {\n        let name = this.getCurrencyName (currency);\n        let request = {\n            'method': name,\n            'wallet_name': 'exchange',\n            'renew': 0, // a value of 1 will generate a new address\n        };\n        let response = await this.privatePostDepositNew (this.extend (request, params));\n        return {\n            'currency': currency,\n            'address': response['address'],\n            'status': 'ok',\n            'info': response,\n        };\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        let name = this.getCurrencyName (currency);\n        let request = {\n            'withdraw_type': name,\n            'walletselected': 'exchange',\n            'amount': amount.toString (),\n            'address': address,\n        };\n        let responses = await this.privatePostWithdraw (this.extend (request, params));\n        let response = responses[0];\n        return {\n            'info': response,\n            'id': response['withdrawal_id'],\n        };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let request = '/' + this.implodeParams (path, params);\n        if (api == 'v2') {\n            request = '/' + api + request;\n        } else {\n            request = '/' + this.version + request;\n        }\n        let query = this.omit (params, this.extractParams (path));\n        let url = this.urls['api'] + request;\n        if ((api == 'public') || (path.indexOf ('/hist') >= 0)) {\n            if (Object.keys (query).length) {\n                let suffix = '?' + this.urlencode (query);\n                url += suffix;\n                request += suffix;\n            }\n        }\n        if (api == 'private') {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            query = this.extend ({\n                'nonce': nonce.toString (),\n                'request': request,\n            }, query);\n            query = this.json (query);\n            query = this.encode (query);\n            let payload = this.stringToBase64 (query);\n            let secret = this.encode (this.secret);\n            let signature = this.hmac (payload, secret, 'sha384');\n            headers = {\n                'X-BFX-APIKEY': this.apiKey,\n                'X-BFX-PAYLOAD': this.decode (payload),\n                'X-BFX-SIGNATURE': signature,\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body) {\n        if (code == 400) {\n            if (body[0] == \"{\") {\n                let response = JSON.parse (body);\n                let message = response['message'];\n                if (message.indexOf ('Key price should be a decimal number') >= 0) {\n                    throw new InvalidOrder (this.id + ' ' + message);\n                } else if (message.indexOf ('Invalid order: not enough exchange balance') >= 0) {\n                    throw new InsufficientFunds (this.id + ' ' + message);\n                } else if (message.indexOf ('Invalid order') >= 0) {\n                    throw new InvalidOrder (this.id + ' ' + message);\n                } else if (message.indexOf ('Order could not be cancelled.') >= 0) {\n                    throw new OrderNotFound (this.id + ' ' + message);\n                }\n            }\n            throw new ExchangeError (this.id + ' ' + body);\n        }\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('message' in response) {\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        }\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/bitfinex.js\n// module id = 329\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, AuthenticationError, InvalidOrder, InsufficientFunds, OrderNotFound, DDoSProtection } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bittrex extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bittrex',\n            'name': 'Bittrex',\n            'countries': 'US',\n            'version': 'v1.1',\n            'rateLimit': 1500,\n            'hasAlreadyAuthenticatedSuccessfully': false, // a workaround for APIKEY_INVALID\n            'hasCORS': false,\n            // obsolete metainfo interface\n            'hasFetchTickers': true,\n            'hasFetchOHLCV': true,\n            'hasFetchOrder': true,\n            'hasFetchOrders': true,\n            'hasFetchClosedOrders': true,\n            'hasFetchOpenOrders': true,\n            'hasFetchMyTrades': false,\n            'hasFetchCurrencies': true,\n            'hasWithdraw': true,\n            // new metainfo interface\n            'has': {\n                'fetchTickers': true,\n                'fetchOHLCV': true,\n                'fetchOrder': true,\n                'fetchOrders': true,\n                'fetchClosedOrders': 'emulated',\n                'fetchOpenOrders': true,\n                'fetchMyTrades': false,\n                'fetchCurrencies': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': 'oneMin',\n                '5m': 'fiveMin',\n                '30m': 'thirtyMin',\n                '1h': 'hour',\n                '1d': 'day',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766352-cf0b3c26-5ed5-11e7-82b7-f3826b7a97d8.jpg',\n                'api': {\n                    'public': 'https://bittrex.com/api',\n                    'account': 'https://bittrex.com/api',\n                    'market': 'https://bittrex.com/api',\n                    'v2': 'https://bittrex.com/api/v2.0/pub',\n                },\n                'www': 'https://bittrex.com',\n                'doc': [\n                    'https://bittrex.com/Home/Api',\n                    'https://www.npmjs.org/package/node.bittrex.api',\n                ],\n                'fees': [\n                    'https://bittrex.com/Fees',\n                    'https://support.bittrex.com/hc/en-us/articles/115000199651-What-fees-does-Bittrex-charge-',\n                ],\n            },\n            'api': {\n                'v2': {\n                    'get': [\n                        'currencies/GetBTCPrice',\n                        'market/GetTicks',\n                        'market/GetLatestTick',\n                        'Markets/GetMarketSummaries',\n                        'market/GetLatestTick',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'currencies',\n                        'markethistory',\n                        'markets',\n                        'marketsummaries',\n                        'marketsummary',\n                        'orderbook',\n                        'ticker',\n                    ],\n                },\n                'account': {\n                    'get': [\n                        'balance',\n                        'balances',\n                        'depositaddress',\n                        'deposithistory',\n                        'order',\n                        'orderhistory',\n                        'withdrawalhistory',\n                        'withdraw',\n                    ],\n                },\n                'market': {\n                    'get': [\n                        'buylimit',\n                        'buymarket',\n                        'cancel',\n                        'openorders',\n                        'selllimit',\n                        'sellmarket',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0.0025,\n                    'taker': 0.0025,\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {\n                        'BTC': 0.001,\n                        'LTC': 0.01,\n                        'DOGE': 2,\n                        'VTC': 0.02,\n                        'PPC': 0.02,\n                        'FTC': 0.2,\n                        'RDD': 2,\n                        'NXT': 2,\n                        'DASH': 0.002,\n                        'POT': 0.002,\n                    },\n                    'deposit': {\n                        'BTC': 0,\n                        'LTC': 0,\n                        'DOGE': 0,\n                        'VTC': 0,\n                        'PPC': 0,\n                        'FTC': 0,\n                        'RDD': 0,\n                        'NXT': 0,\n                        'DASH': 0,\n                        'POT': 0,\n                    },\n                },\n            },\n        });\n    }\n\n    costToPrecision (symbol, cost) {\n        return this.truncate (parseFloat (cost), this.markets[symbol]['precision']['price']);\n    }\n\n    feeToPrecision (symbol, fee) {\n        return this.truncate (parseFloat (fee), this.markets[symbol]['precision']['price']);\n    }\n\n    async fetchMarkets () {\n        let response = await this.v2GetMarketsGetMarketSummaries ();\n        let result = [];\n        for (let i = 0; i < response['result'].length; i++) {\n            let market = response['result'][i]['Market'];\n            let id = market['MarketName'];\n            let base = market['MarketCurrency'];\n            let quote = market['BaseCurrency'];\n            base = this.commonCurrencyCode (base);\n            quote = this.commonCurrencyCode (quote);\n            let symbol = base + '/' + quote;\n            let precision = {\n                'amount': 8,\n                'price': 8,\n            };\n            let active = market['IsActive'];\n            result.push (this.extend (this.fees['trading'], {\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'active': active,\n                'info': market,\n                'lot': Math.pow (10, -precision['amount']),\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': market['MinTradeSize'],\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            }));\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.accountGetBalances ();\n        let balances = response['result'];\n        let result = { 'info': balances };\n        let indexed = this.indexBy (balances, 'Currency');\n        let keys = Object.keys (indexed);\n        for (let i = 0; i < keys.length; i++) {\n            let id = keys[i];\n            let currency = this.commonCurrencyCode (id);\n            let account = this.account ();\n            let balance = indexed[id];\n            let free = parseFloat (balance['Available']);\n            let total = parseFloat (balance['Balance']);\n            let used = total - free;\n            account['free'] = free;\n            account['used'] = used;\n            account['total'] = total;\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.publicGetOrderbook (this.extend ({\n            'market': this.marketId (symbol),\n            'type': 'both',\n        }, params));\n        let orderbook = response['result'];\n        if ('type' in params) {\n            if (params['type'] == 'buy') {\n                orderbook = {\n                    'buy': response['result'],\n                    'sell': [],\n                };\n            } else if (params['type'] == 'sell') {\n                orderbook = {\n                    'buy': [],\n                    'sell': response['result'],\n                };\n            }\n        }\n        return this.parseOrderBook (orderbook, undefined, 'buy', 'sell', 'Rate', 'Quantity');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = this.parse8601 (ticker['TimeStamp']);\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'High'),\n            'low': this.safeFloat (ticker, 'Low'),\n            'bid': this.safeFloat (ticker, 'Bid'),\n            'ask': this.safeFloat (ticker, 'Ask'),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': this.safeFloat (ticker, 'Last'),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'Volume'),\n            'quoteVolume': this.safeFloat (ticker, 'BaseVolume'),\n            'info': ticker,\n        };\n    }\n\n    async fetchCurrencies (params = {}) {\n        let response = await this.publicGetCurrencies (params);\n        let currencies = response['result'];\n        let result = {};\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let id = currency['Currency'];\n            // todo: will need to rethink the fees\n            // to add support for multiple withdrawal/deposit methods and\n            // differentiated fees for each particular method\n            let code = this.commonCurrencyCode (id);\n            let precision = 8; // default precision, todo: fix \"magic constants\"\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency,\n                'name': currency['CurrencyLong'],\n                'active': currency['IsActive'],\n                'status': 'ok',\n                'fee': currency['TxFee'], // todo: redesign\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': currency['TxFee'],\n                        'max': Math.pow (10, precision),\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.publicGetMarketsummaries (params);\n        let tickers = response['result'];\n        let result = {};\n        for (let t = 0; t < tickers.length; t++) {\n            let ticker = tickers[t];\n            let id = ticker['MarketName'];\n            let market = undefined;\n            let symbol = id;\n            if (id in this.markets_by_id) {\n                market = this.markets_by_id[id];\n                symbol = market['symbol'];\n            } else {\n                let [ quote, base ] = id.split ('-');\n                base = this.commonCurrencyCode (base);\n                quote = this.commonCurrencyCode (quote);\n                symbol = base + '/' + quote;\n            }\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetMarketsummary (this.extend ({\n            'market': market['id'],\n        }, params));\n        let ticker = response['result'][0];\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        let timestamp = this.parse8601 (trade['TimeStamp']);\n        let side = undefined;\n        if (trade['OrderType'] == 'BUY') {\n            side = 'buy';\n        } else if (trade['OrderType'] == 'SELL') {\n            side = 'sell';\n        }\n        let id = undefined;\n        if ('Id' in trade)\n            id = trade['Id'].toString ();\n        return {\n            'id': id,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': 'limit',\n            'side': side,\n            'price': parseFloat (trade['Price']),\n            'amount': parseFloat (trade['Quantity']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetMarkethistory (this.extend ({\n            'market': market['id'],\n        }, params));\n        if ('result' in response) {\n            if (typeof response['result'] != 'undefined')\n                return this.parseTrades (response['result'], market, since, limit);\n        }\n        throw new ExchangeError (this.id + ' fetchTrades() returned undefined response');\n    }\n\n    parseOHLCV (ohlcv, market = undefined, timeframe = '1d', since = undefined, limit = undefined) {\n        let timestamp = this.parse8601 (ohlcv['T']);\n        return [\n            timestamp,\n            ohlcv['O'],\n            ohlcv['H'],\n            ohlcv['L'],\n            ohlcv['C'],\n            ohlcv['V'],\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = {\n            'tickInterval': this.timeframes[timeframe],\n            'marketName': market['id'],\n        };\n        let response = await this.v2GetMarketGetTicks (this.extend (request, params));\n        if ('result' in response) {\n            if (response['result'])\n                return this.parseOHLCVs (response['result'], market, timeframe, since, limit);\n        }\n        throw new ExchangeError (this.id + ' returned an empty or unrecognized response: ' + this.json (response));\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let request = {};\n        let market = undefined;\n        if (symbol) {\n            market = this.market (symbol);\n            request['market'] = market['id'];\n        }\n        let response = await this.marketGetOpenorders (this.extend (request, params));\n        let orders = this.parseOrders (response['result'], market, since, limit);\n        return this.filterOrdersBySymbol (orders, symbol);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let method = 'marketGet' + this.capitalize (side) + type;\n        let order = {\n            'market': market['id'],\n            'quantity': this.amountToPrecision (symbol, amount),\n        };\n        if (type == 'limit')\n            order['rate'] = this.priceToPrecision (symbol, price);\n        let response = await this[method] (this.extend (order, params));\n        let result = {\n            'info': response,\n            'id': response['result']['uuid'],\n        };\n        return result;\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = undefined;\n        try {\n            response = await this.marketGetCancel (this.extend ({\n                'uuid': id,\n            }, params));\n        } catch (e) {\n            if (this.last_json_response) {\n                let message = this.safeString (this.last_json_response, 'message');\n                if (message == 'ORDER_NOT_OPEN')\n                    throw new InvalidOrder (this.id + ' cancelOrder() error: ' + this.last_http_response);\n                if (message == 'UUID_INVALID')\n                    throw new OrderNotFound (this.id + ' cancelOrder() error: ' + this.last_http_response);\n            }\n            throw e;\n        }\n        return response;\n    }\n\n    parseOrder (order, market = undefined) {\n        let side = undefined;\n        if ('OrderType' in order)\n            side = (order['OrderType'] == 'LIMIT_BUY') ? 'buy' : 'sell';\n        if ('Type' in order)\n            side = (order['Type'] == 'LIMIT_BUY') ? 'buy' : 'sell';\n        let status = 'open';\n        if (order['Closed']) {\n            status = 'closed';\n        } else if (order['CancelInitiated']) {\n            status = 'canceled';\n        }\n        let symbol = undefined;\n        if (!market) {\n            if ('Exchange' in order)\n                if (order['Exchange'] in this.markets_by_id)\n                    market = this.markets_by_id[order['Exchange']];\n        }\n        if (market)\n            symbol = market['symbol'];\n        let timestamp = undefined;\n        if ('Opened' in order)\n            timestamp = this.parse8601 (order['Opened']);\n        if ('TimeStamp' in order)\n            timestamp = this.parse8601 (order['TimeStamp']);\n        let fee = undefined;\n        let commission = undefined;\n        if ('Commission' in order) {\n            commission = 'Commission';\n        } else if ('CommissionPaid' in order) {\n            commission = 'CommissionPaid';\n        }\n        if (commission) {\n            fee = {\n                'cost': parseFloat (order[commission]),\n                'currency': market['quote'],\n            };\n        }\n        let price = this.safeFloat (order, 'Limit');\n        let cost = this.safeFloat (order, 'Price');\n        let amount = this.safeFloat (order, 'Quantity');\n        let remaining = this.safeFloat (order, 'QuantityRemaining', 0.0);\n        let filled = amount - remaining;\n        if (!cost) {\n            if (price && amount)\n                cost = price * amount;\n        }\n        if (!price) {\n            if (cost && filled)\n                price = cost / filled;\n        }\n        let average = this.safeFloat (order, 'PricePerUnit');\n        let result = {\n            'info': order,\n            'id': order['OrderUuid'],\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': 'limit',\n            'side': side,\n            'price': price,\n            'cost': cost,\n            'average': average,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': fee,\n        };\n        return result;\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = undefined;\n        try {\n            response = await this.accountGetOrder (this.extend ({ 'uuid': id }, params));\n        } catch (e) {\n            if (this.last_json_response) {\n                let message = this.safeString (this.last_json_response, 'message');\n                if (message == 'UUID_INVALID')\n                    throw new OrderNotFound (this.id + ' fetchOrder() error: ' + this.last_http_response);\n            }\n            throw e;\n        }\n        return this.parseOrder (response['result']);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let request = {};\n        let market = undefined;\n        if (symbol) {\n            market = this.market (symbol);\n            request['market'] = market['id'];\n        }\n        let response = await this.accountGetOrderhistory (this.extend (request, params));\n        let orders = this.parseOrders (response['result'], market, since, limit);\n        return this.filterOrdersBySymbol (orders, symbol);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        let orders = await this.fetchOrders (symbol, params);\n        return this.filterBy (orders, 'status', 'closed');\n    }\n\n    currencyId (currency) {\n        if (currency == 'BCH')\n            return 'BCC';\n        return currency;\n    }\n\n    async fetchDepositAddress (currency, params = {}) {\n        let currencyId = this.currencyId (currency);\n        let response = await this.accountGetDepositaddress (this.extend ({\n            'currency': currencyId,\n        }, params));\n        let address = this.safeString (response['result'], 'Address');\n        let message = this.safeString (response, 'message');\n        let status = 'ok';\n        if (!address || message == 'ADDRESS_GENERATING')\n            status = 'pending';\n        return {\n            'currency': currency,\n            'address': address,\n            'status': status,\n            'info': response,\n        };\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        let currencyId = this.currencyId (currency);\n        let response = await this.accountGetWithdraw (this.extend ({\n            'currency': currencyId,\n            'quantity': amount,\n            'address': address,\n        }, params));\n        let id = undefined;\n        if ('result' in response) {\n            if ('uuid' in response['result'])\n                id = response['result']['uuid'];\n        }\n        return {\n            'info': response,\n            'id': id,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api] + '/';\n        if (api != 'v2')\n            url += this.version + '/';\n        if (api == 'public') {\n            url += api + '/' + method.toLowerCase () + path;\n            if (Object.keys (params).length)\n                url += '?' + this.urlencode (params);\n        } else if (api == 'v2') {\n            url += path;\n            if (Object.keys (params).length)\n                url += '?' + this.urlencode (params);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            url += api + '/';\n            if (((api == 'account') && (path != 'withdraw')) || (path == 'openorders'))\n                url += method.toLowerCase ();\n            url += path + '?' + this.urlencode (this.extend ({\n                'nonce': nonce,\n                'apikey': this.apiKey,\n            }, params));\n            let signature = this.hmac (this.encode (url), this.encode (this.secret), 'sha512');\n            headers = { 'apisign': signature };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body) {\n        if (code >= 400) {\n            if (body[0] == \"{\") {\n                let response = JSON.parse (body);\n                if ('success' in response) {\n                    if (!response['success']) {\n                        if ('message' in response) {\n                            if (response['message'] == 'MIN_TRADE_REQUIREMENT_NOT_MET')\n                                throw new InvalidOrder (this.id + ' ' + this.json (response));\n                            if (response['message'] == 'APIKEY_INVALID') {\n                                if (this.hasAlreadyAuthenticatedSuccessfully) {\n                                    throw new DDoSProtection (this.id + ' ' + this.json (response));\n                                } else {\n                                    throw new AuthenticationError (this.id + ' ' + this.json (response));\n                                }\n                            }\n                            if (response['message'] == 'DUST_TRADE_DISALLOWED_MIN_VALUE_50K_SAT')\n                                throw new InvalidOrder (this.id + ' order cost should be over 50k satoshi ' + this.json (response));\n                        }\n                        throw new ExchangeError (this.id + ' ' + this.json (response));\n                    }\n                }\n            }\n        }\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('success' in response) {\n            if (response['success']) {\n                // a workaround for APIKEY_INVALID\n                if ((api == 'account') || (api == 'market'))\n                    this.hasAlreadyAuthenticatedSuccessfully = true;\n                return response;\n            }\n        }\n        if ('message' in response) {\n            if (response['message'] == 'ADDRESS_GENERATING')\n                return response;\n            if (response['message'] == \"INSUFFICIENT_FUNDS\")\n                throw new InsufficientFunds (this.id + ' ' + this.json (response));\n            if (response['message'] == 'APIKEY_INVALID') {\n                if (this.hasAlreadyAuthenticatedSuccessfully) {\n                    throw new DDoSProtection (this.id + ' ' + this.json (response));\n                } else {\n                    throw new AuthenticationError (this.id + ' ' + this.json (response));\n                }\n            }\n        }\n        throw new ExchangeError (this.id + ' ' + this.json (response));\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/bittrex.js\n// module id = 330\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class btcbox extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'btcbox',\n            'name': 'BtcBox',\n            'countries': 'JP',\n            'rateLimit': 1000,\n            'version': 'v1',\n            'hasCORS': false,\n            'hasFetchOHLCV': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/31275803-4df755a8-aaa1-11e7-9abb-11ec2fad9f2d.jpg',\n                'api': 'https://www.btcbox.co.jp/api',\n                'www': 'https://www.btcbox.co.jp/',\n                'doc': 'https://www.btcbox.co.jp/help/asm',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'depth',\n                        'orders',\n                        'ticker',\n                        'allticker',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'balance',\n                        'trade_add',\n                        'trade_cancel',\n                        'trade_list',\n                        'trade_view',\n                        'wallet',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/JPY': { 'id': 'BTC/JPY', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY' },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let balances = await this.privatePostBalance ();\n        let result = { 'info': balances };\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let lowercase = currency.toLowerCase ();\n            if (lowercase == 'dash')\n                lowercase = 'drk';\n            let account = this.account ();\n            let free = lowercase + '_balance';\n            let used = lowercase + '_lock';\n            if (free in balances)\n                account['free'] = parseFloat (balances[free]);\n            if (used in balances)\n                account['used'] = parseFloat (balances[used]);\n            account['total'] = this.sum (account['free'], account['used']);\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = {};\n        let numSymbols = this.symbols.length;\n        if (numSymbols > 1)\n            request['coin'] = market['id'];\n        let orderbook = await this.publicGetDepth (this.extend (request, params));\n        let result = this.parseOrderBook (orderbook);\n        result['asks'] = this.sortBy (result['asks'], 0);\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy'),\n            'ask': this.safeFloat (ticker, 'sell'),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': this.safeFloat (ticker, 'last'),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'vol'),\n            'quoteVolume': this.safeFloat (ticker, 'volume'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let tickers = await this.publicGetAllticker (params);\n        let ids = Object.keys (tickers);\n        let result = {};\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            let market = this.markets_by_id[id];\n            let symbol = market['symbol'];\n            let ticker = tickers[id];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = {};\n        let numSymbols = this.symbols.length;\n        if (numSymbols > 1)\n            request['coin'] = market['id'];\n        let ticker = await this.publicGetTicker (this.extend (request, params));\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = parseInt (trade['date']) * 1000;\n        return {\n            'info': trade,\n            'id': trade['tid'],\n            'order': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': trade['type'],\n            'price': trade['price'],\n            'amount': trade['amount'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = {};\n        let numSymbols = this.symbols.length;\n        if (numSymbols > 1)\n            request['coin'] = market['id'];\n        let response = await this.publicGetOrders (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = {\n            'amount': amount,\n            'price': price,\n            'type': side,\n        };\n        let numSymbols = this.symbols.length;\n        if (numSymbols > 1)\n            request['coin'] = market['id'];\n        let response = await this.privatePostTradeAdd (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privatePostTradeCancel (this.extend ({\n            'id': id,\n        }, params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version + '/' + path;\n        if (api == 'public') {\n            if (Object.keys (params).length)\n                url += '?' + this.urlencode (params);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ().toString ();\n            let query = this.extend ({\n                'key': this.apiKey,\n                'nonce': nonce,\n            }, params);\n            let request = this.urlencode (query);\n            let secret = this.hash (this.encode (this.secret));\n            query['signature'] = this.hmac (this.encode (request), this.encode (secret));\n            body = this.urlencode (query);\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('result' in response)\n            if (!response['result'])\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/btcbox.js\n// module id = 331\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class btcturk extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'btcturk',\n            'name': 'BTCTurk',\n            'countries': 'TR', // Turkey\n            'rateLimit': 1000,\n            'hasCORS': true,\n            'hasFetchTickers': true,\n            'hasFetchOHLCV': true,\n            'timeframes': {\n                '1d': '1d',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27992709-18e15646-64a3-11e7-9fa2-b0950ec7712f.jpg',\n                'api': 'https://www.btcturk.com/api',\n                'www': 'https://www.btcturk.com',\n                'doc': 'https://github.com/BTCTrader/broker-api-docs',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'ohlcdata', // ?last=COUNT\n                        'orderbook',\n                        'ticker',\n                        'trades',   // ?last=COUNT (max 50)\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'balance',\n                        'openOrders',\n                        'userTransactions', // ?offset=0&limit=25&sort=asc\n                    ],\n                    'post': [\n                        'buy',\n                        'cancelOrder',\n                        'sell',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/TRY': { 'id': 'BTCTRY', 'symbol': 'BTC/TRY', 'base': 'BTC', 'quote': 'TRY', 'maker': 0.002 * 1.18, 'taker': 0.0035 * 1.18 },\n                'ETH/TRY': { 'id': 'ETHTRY', 'symbol': 'ETH/TRY', 'base': 'ETH', 'quote': 'TRY', 'maker': 0.002 * 1.18, 'taker': 0.0035 * 1.18 },\n                'ETH/BTC': { 'id': 'ETHBTC', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'maker': 0.002 * 1.18, 'taker': 0.0035 * 1.18 },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        let response = await this.privateGetBalance ();\n        let result = { 'info': response };\n        let base = {\n            'free': response['bitcoin_available'],\n            'used': response['bitcoin_reserved'],\n            'total': response['bitcoin_balance'],\n        };\n        let quote = {\n            'free': response['money_available'],\n            'used': response['money_reserved'],\n            'total': response['money_balance'],\n        };\n        let symbol = this.symbols[0];\n        let market = this.markets[symbol];\n        result[market['base']] = base;\n        result[market['quote']] = quote;\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let market = this.market (symbol);\n        let orderbook = await this.publicGetOrderbook (this.extend ({\n            'pairSymbol': market['id'],\n        }, params));\n        let timestamp = parseInt (orderbook['timestamp'] * 1000);\n        return this.parseOrderBook (orderbook, timestamp);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        let timestamp = parseInt (ticker['timestamp']) * 1000;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['bid']),\n            'ask': parseFloat (ticker['ask']),\n            'vwap': undefined,\n            'open': parseFloat (ticker['open']),\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': parseFloat (ticker['average']),\n            'baseVolume': parseFloat (ticker['volume']),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let tickers = await this.publicGetTicker (params);\n        let result = {};\n        for (let i = 0; i < tickers.length; i++) {\n            let ticker = tickers[i];\n            let symbol = ticker['pair'];\n            let market = undefined;\n            if (symbol in this.markets_by_id) {\n                market = this.markets_by_id[symbol];\n                symbol = market['symbol'];\n            }\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let tickers = await this.fetchTickers ();\n        let result = undefined;\n        if (symbol in tickers)\n            result = tickers[symbol];\n        return result;\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = trade['date'] * 1000;\n        return {\n            'id': trade['tid'],\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': undefined,\n            'price': trade['price'],\n            'amount': trade['amount'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        // let maxCount = 50;\n        let response = await this.publicGetTrades (this.extend ({\n            'pairSymbol': market['id'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined, timeframe = '1d', since = undefined, limit = undefined) {\n        let timestamp = this.parse8601 (ohlcv['Time']);\n        return [\n            timestamp,\n            ohlcv['Open'],\n            ohlcv['High'],\n            ohlcv['Low'],\n            ohlcv['Close'],\n            ohlcv['Volume'],\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1d', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = {};\n        if (limit)\n            request['last'] = limit;\n        let response = await this.publicGetOhlcdata (this.extend (request, params));\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        let method = 'privatePost' + this.capitalize (side);\n        let order = {\n            'Type': (side == 'buy') ? 'BuyBtc' : 'SelBtc',\n            'IsMarketOrder': (type == 'market') ? 1 : 0,\n        };\n        if (type == 'market') {\n            if (side == 'buy')\n                order['Total'] = amount;\n            else\n                order['Amount'] = amount;\n        } else {\n            order['Price'] = price;\n            order['Amount'] = amount;\n        }\n        let response = await this[method] (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostCancelOrder ({ 'id': id });\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        if (this.id == 'btctrader')\n            throw new ExchangeError (this.id + ' is an abstract base API for BTCExchange, BTCTurk');\n        let url = this.urls['api'] + '/' + path;\n        if (api == 'public') {\n            if (Object.keys (params).length)\n                url += '?' + this.urlencode (params);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ().toString ();\n            body = this.urlencode (params);\n            let secret = this.base64ToBinary (this.secret);\n            let auth = this.apiKey + nonce;\n            headers = {\n                'X-PCK': this.apiKey,\n                'X-Stamp': nonce,\n                'X-Signature': this.stringToBase64(this.hmac (this.encode (auth), secret, 'sha256', 'binary')),\n                'Content-Type': 'application/x-www-form-urlencoded',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/btcturk.js\n// module id = 332\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bter extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bter',\n            'name': 'Bter',\n            'countries': [ 'VG', 'CN' ], // British Virgin Islands, China\n            'version': '2',\n            'hasCORS': false,\n            'hasFetchTickers': true,\n            'hasWithdraw': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27980479-cfa3188c-6387-11e7-8191-93fc4184ba5c.jpg',\n                'api': {\n                    'public': 'https://data.bter.com/api',\n                    'private': 'https://api.bter.com/api',\n                },\n                'www': 'https://bter.com',\n                'doc': 'https://bter.com/api2',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'pairs',\n                        'marketinfo',\n                        'marketlist',\n                        'tickers',\n                        'ticker/{id}',\n                        'orderBook/{id}',\n                        'trade/{id}',\n                        'tradeHistory/{id}',\n                        'tradeHistory/{id}/{tid}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'balances',\n                        'depositAddress',\n                        'newAddress',\n                        'depositsWithdrawals',\n                        'buy',\n                        'sell',\n                        'cancelOrder',\n                        'cancelAllOrders',\n                        'getOrder',\n                        'openOrders',\n                        'tradeHistory',\n                        'withdraw',\n                    ],\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let response = await this.publicGetMarketinfo ();\n        let markets = this.safeValue (response, 'pairs');\n        if (!markets)\n            throw new ExchangeError (this.id + ' fetchMarkets got an unrecognized response');\n        let result = [];\n        for (let i = 0; i < markets.length; i++) {\n            let market = markets[i];\n            let keys = Object.keys (market);\n            let id = keys[0];\n            let details = market[id];\n            let [ base, quote ] = id.split ('_');\n            base = base.toUpperCase ();\n            quote = quote.toUpperCase ();\n            base = this.commonCurrencyCode (base);\n            quote = this.commonCurrencyCode (quote);\n            let symbol = base + '/' + quote;\n            let precision = {\n                'amount': details['decimal_places'],\n                'price': details['decimal_places'],\n            };\n            let amountLimits = {\n                'min': details['min_amount'],\n                'max': undefined,\n            };\n            let priceLimits = {\n                'min': undefined,\n                'max': undefined,\n            };\n            let limits = {\n                'amount': amountLimits,\n                'price': priceLimits,\n            };\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n                'maker': details['fee'] / 100,\n                'taker': details['fee'] / 100,\n                'precision': precision,\n                'limits': limits,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let balance = await this.privatePostBalances ();\n        let result = { 'info': balance };\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let code = this.commonCurrencyCode (currency);\n            let account = this.account ();\n            if ('available' in balance) {\n                if (currency in balance['available']) {\n                    account['free'] = parseFloat (balance['available'][currency]);\n                }\n            }\n            if ('locked' in balance) {\n                if (currency in balance['locked']) {\n                    account['used'] = parseFloat (balance['locked'][currency]);\n                }\n            }\n            account['total'] = this.sum (account['free'], account['used']);\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let orderbook = await this.publicGetOrderBookId (this.extend ({\n            'id': this.marketId (symbol),\n        }, params));\n        let result = this.parseOrderBook (orderbook);\n        result['asks'] = this.sortBy (result['asks'], 0);\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high24hr']),\n            'low': parseFloat (ticker['low24hr']),\n            'bid': parseFloat (ticker['highestBid']),\n            'ask': parseFloat (ticker['lowestAsk']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': parseFloat (ticker['percentChange']),\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['quoteVolume']),\n            'quoteVolume': parseFloat (ticker['baseVolume']),\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let tickers = await this.publicGetTickers (params);\n        let result = {};\n        let ids = Object.keys (tickers);\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            let [ baseId, quoteId ] = id.split ('_');\n            let base = baseId.toUpperCase ();\n            let quote = quoteId.toUpperCase ();\n            base = this.commonCurrencyCode (base);\n            quote = this.commonCurrencyCode (quote);\n            let symbol = base + '/' + quote;\n            let ticker = tickers[id];\n            let market = undefined;\n            if (symbol in this.markets)\n                market = this.markets[symbol];\n            if (id in this.markets_by_id)\n                market = this.markets_by_id[id];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let ticker = await this.publicGetTickerId (this.extend ({\n            'id': market['id'],\n        }, params));\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = this.parse8601 (trade['date']);\n        return {\n            'id': trade['tradeID'],\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': trade['type'],\n            'price': trade['rate'],\n            'amount': this.safeFloat (trade, 'amount'),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetTradeHistoryId (this.extend ({\n            'id': market['id'],\n        }, params));\n        return this.parseTrades (response['data'], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type == 'market')\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        await this.loadMarkets ();\n        let method = 'privatePost' + this.capitalize (side);\n        let order = {\n            'currencyPair': this.marketId (symbol),\n            'rate': price,\n            'amount': amount,\n        };\n        let response = await this[method] (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['orderNumber'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privatePostCancelOrder ({ 'orderNumber': id });\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostWithdraw (this.extend ({\n            'currency': currency.toLowerCase (),\n            'amount': amount,\n            'address': address, // Address must exist in you AddressBook in security settings\n        }, params));\n        return {\n            'info': response,\n            'id': undefined,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let prefix = (api == 'private') ? (api + '/') : '';\n        let url = this.urls['api'][api] + this.version + '/1/' + prefix + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'public') {\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            let request = { 'nonce': nonce };\n            body = this.urlencode (this.extend (request, query));\n            let signature = this.hmac (this.encode (body), this.encode (this.secret), 'sha512');\n            headers = {\n                'Key': this.apiKey,\n                'Sign': signature,\n                'Content-Type': 'application/x-www-form-urlencoded',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('result' in response)\n            if (response['result'] != 'true')\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/bter.js\n// module id = 333\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class zb extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'zb',\n            'name': 'ZB',\n            'countries': 'CN',\n            'rateLimit': 1000,\n            'version': 'v1',\n            'hasCORS': false,\n            'hasFetchOrder': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/32859187-cd5214f0-ca5e-11e7-967d-96568e2e2bd1.jpg',\n                'api': {\n                    'public': 'http://api.zb.com/data', // no https for public API\n                    'private': 'https://trade.zb.com/api',\n                },\n                'www': 'https://trade.zb.com/api',\n                'doc': 'https://www.zb.com/i/developer',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'markets',\n                        'ticker',\n                        'depth',\n                        'trades',\n                        'kline',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'order',\n                        'cancelOrder',\n                        'getOrder',\n                        'getOrders',\n                        'getOrdersNew',\n                        'getOrdersIgnoreTradeType',\n                        'getUnfinishedOrdersIgnoreTradeType',\n                        'getAccountInfo',\n                        'getUserAddress',\n                        'getWithdrawAddress',\n                        'getWithdrawRecord',\n                        'getChargeRecord',\n                        'getCnyWithdrawRecord',\n                        'getCnyChargeRecord',\n                        'withdraw',\n                    ],\n                },\n            },\n        });\n    }\n\n    getTradingFeeFromBaseQuote (base, quote) {\n        // base: quote\n        let fees = {\n            'BTC': { 'USDT': 0.0 },\n            'BCH': { 'BTC': 0.001, 'USDT': 0.001 },\n            'LTC': { 'BTC': 0.001, 'USDT': 0.0 },\n            'ETH': { 'BTC': 0.001, 'USDT': 0.0 },\n            'ETC': { 'BTC': 0.001, 'USDT': 0.0 },\n            'BTS': { 'BTC': 0.001, 'USDT': 0.001 },\n            'EOS': { 'BTC': 0.001, 'USDT': 0.001 },\n            'HSR': { 'BTC': 0.001, 'USDT': 0.001 },\n            'QTUM': { 'BTC': 0.001, 'USDT': 0.001 },\n            'USDT': { 'BTC': 0.0 },\n        };\n        if (base in fees) {\n            let quoteFees = fees[base];\n            if (quote in quoteFees)\n                return quoteFees[quote];\n        }\n        return undefined;\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetMarkets ();\n        let keys = Object.keys (markets);\n        let result = [];\n        for (let i = 0; i < keys.length; i++) {\n            let id = keys[i];\n            let market = markets[id];\n            let [ baseId, quoteId ] = id.split ('_');\n            let base = this.commonCurrencyCode (baseId.toUpperCase ());\n            let quote = this.commonCurrencyCode (quoteId.toUpperCase ());\n            let symbol = base + '/' + quote;\n            let fee = this.getTradingFeeFromBaseQuote (base, quote);\n            let precision = {\n                'amount': market['amountScale'],\n                'price': market['priceScale'],\n            };\n            let lot = Math.pow (10, -precision['amount']);\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'base': base,\n                'quote': quote,\n                'info': market,\n                'maker': fee,\n                'taker': fee,\n                'lot': lot,\n                'active': true,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': lot,\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': 0,\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostGetAccountInfo ();\n        let balances = response['result'];\n        let result = { 'info': balances };\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let account = this.account ();\n            if (currency in balances['balance'])\n                account['free'] = parseFloat (balances['balance'][currency]['amount']);\n            if (currency in balances['frozen'])\n                account['used'] = parseFloat (balances['frozen'][currency]['amount']);\n            account['total'] = this.sum (account['free'], account['used']);\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    getMarketFieldName () {\n        return 'market';\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let marketFieldName = this.getMarketFieldName ();\n        let request = {};\n        request[marketFieldName] = market['id'];\n        let orderbook = await this.publicGetDepth (this.extend (request, params));\n        let timestamp = this.milliseconds ();\n        let bids = undefined;\n        let asks = undefined;\n        if ('bids' in orderbook)\n            bids = orderbook['bids'];\n        if ('asks' in orderbook)\n            asks = orderbook['asks'];\n        let result = {\n            'bids': bids,\n            'asks': asks,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n        };\n        if (result['bids'])\n            result['bids'] = this.sortBy (result['bids'], 0, true);\n        if (result['asks'])\n            result['asks'] = this.sortBy (result['asks'], 0);\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let marketFieldName = this.getMarketFieldName ();\n        let request = {};\n        request[marketFieldName] = market['id'];\n        let response = await this.publicGetTicker (this.extend (request, params));\n        let ticker = response['ticker'];\n        let timestamp = this.milliseconds ();\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['buy']),\n            'ask': parseFloat (ticker['sell']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['vol']),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        let timestamp = trade['date'] * 1000;\n        let side = (trade['trade_type'] == 'bid') ? 'buy' : 'sell';\n        return {\n            'info': trade,\n            'id': trade['tid'].toString (),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': side,\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['amount']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let marketFieldName = this.getMarketFieldName ();\n        let request = {};\n        request[marketFieldName] = market['id'];\n        let response = await this.publicGetTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let paramString = '&price=' + price.toString ();\n        paramString += '&amount=' + amount.toString ();\n        let tradeType = (side == 'buy') ? '1' : '0';\n        paramString += '&tradeType=' + tradeType;\n        paramString += '&currency=' + this.marketId (symbol);\n        let response = await this.privatePostOrder (paramString);\n        return {\n            'info': response,\n            'id': response['id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let paramString = '&id=' + id.toString ();\n        if ('currency' in params)\n            paramString += '&currency=' + params['currency'];\n        return await this.privatePostCancelOrder (paramString);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let paramString = '&id=' + id.toString ();\n        if ('currency' in params)\n            paramString += '&currency=' + params['currency'];\n        return await this.privatePostGetOrder (paramString);\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api];\n        if (api == 'public') {\n            url += '/' + this.version + '/' + path;\n            if (Object.keys (params).length)\n                url += '?' + this.urlencode (params);\n        } else {\n            this.checkRequiredCredentials ();\n            let paramsLength = params.length; // params should be a string here\n            let nonce = this.nonce ();\n            let auth = 'method=' + path;\n            auth += '&accesskey=' + this.apiKey;\n            auth += paramsLength ? params : '';\n            let secret = this.hash (this.encode (this.secret), 'sha1');\n            let signature = this.hmac (this.encode (auth), this.encode (secret), 'md5');\n            let suffix = 'sign=' + signature + '&reqTime=' + nonce.toString ();\n            url += '/' + path + '?' + auth + '&' + suffix;\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if (api == 'private')\n            if ('code' in response)\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/zb.js\n// module id = 334\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class fybse extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'fybse',\n            'name': 'FYB-SE',\n            'countries': 'SE', // Sweden\n            'hasCORS': false,\n            'rateLimit': 1500,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766512-31019772-5edb-11e7-8241-2e675e6797f1.jpg',\n                'api': 'https://www.fybse.se/api/SEK',\n                'www': 'https://www.fybse.se',\n                'doc': 'http://docs.fyb.apiary.io',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'ticker',\n                        'tickerdetailed',\n                        'orderbook',\n                        'trades',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'test',\n                        'getaccinfo',\n                        'getpendingorders',\n                        'getorderhistory',\n                        'cancelpendingorder',\n                        'placeorder',\n                        'withdraw',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/SEK': { 'id': 'SEK', 'symbol': 'BTC/SEK', 'base': 'BTC', 'quote': 'SEK' },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        let balance = await this.privatePostGetaccinfo ();\n        let btc = parseFloat (balance['btcBal']);\n        let symbol = this.symbols[0];\n        let quote = this.markets[symbol]['quote'];\n        let lowercase = quote.toLowerCase () + 'Bal';\n        let fiat = parseFloat (balance[lowercase]);\n        let crypto = {\n            'free': btc,\n            'used': 0.0,\n            'total': btc,\n        };\n        let result = { 'BTC': crypto };\n        result[quote] = {\n            'free': fiat,\n            'used': 0.0,\n            'total': fiat,\n        };\n        result['info'] = balance;\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let orderbook = await this.publicGetOrderbook (params);\n        return this.parseOrderBook (orderbook);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let ticker = await this.publicGetTickerdetailed (params);\n        let timestamp = this.milliseconds ();\n        let last = undefined;\n        let volume = undefined;\n        if ('last' in ticker)\n            last = parseFloat (ticker['last']);\n        if ('vol' in ticker)\n            volume = parseFloat (ticker['vol']);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': parseFloat (ticker['bid']),\n            'ask': parseFloat (ticker['ask']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': last,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': volume,\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = parseInt (trade['date']) * 1000;\n        return {\n            'info': trade,\n            'id': trade['tid'].toString (),\n            'order': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': undefined,\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['amount']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetTrades (params);\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        let response = await this.privatePostPlaceorder (this.extend ({\n            'qty': amount,\n            'price': price,\n            'type': side[0].toUpperCase ()\n        }, params));\n        return {\n            'info': response,\n            'id': response['pending_oid'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostCancelpendingorder ({ 'orderNo': id });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + path;\n        if (api == 'public') {\n            url += '.json';\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            body = this.urlencode (this.extend ({ 'timestamp': nonce }, params));\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'key': this.apiKey,\n                'sig': this.hmac (this.encode (body), this.encode (this.secret), 'sha1')\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if (api == 'private')\n            if ('error' in response)\n                if (response['error'])\n                    throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/fybse.js\n// module id = 335\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, InsufficientFunds } = require ('./base/errors')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class hitbtc extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'hitbtc',\n            'name': 'HitBTC',\n            'countries': 'HK', // Hong Kong\n            'rateLimit': 1500,\n            'version': '1',\n            'hasCORS': false,\n            'hasFetchTickers': true,\n            'hasFetchOrder': true,\n            'hasFetchOpenOrders': true,\n            'hasFetchClosedOrders': true,\n            'hasWithdraw': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg',\n                'api': 'http://api.hitbtc.com',\n                'www': 'https://hitbtc.com',\n                'doc': 'https://github.com/hitbtc-com/hitbtc-api/blob/master/APIv1.md',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        '{symbol}/orderbook',\n                        '{symbol}/ticker',\n                        '{symbol}/trades',\n                        '{symbol}/trades/recent',\n                        'symbols',\n                        'ticker',\n                        'time,'\n                    ],\n                },\n                'trading': {\n                    'get': [\n                        'balance',\n                        'orders/active',\n                        'orders/recent',\n                        'order',\n                        'trades/by/order',\n                        'trades',\n                    ],\n                    'post': [\n                        'new_order',\n                        'cancel_order',\n                        'cancel_orders',\n                    ],\n                },\n                'payment': {\n                    'get': [\n                        'balance',\n                        'address/{currency}',\n                        'transactions',\n                        'transactions/{transaction}',\n                    ],\n                    'post': [\n                        'transfer_to_trading',\n                        'transfer_to_main',\n                        'address/{currency}',\n                        'payout',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': -0.01 / 100,\n                    'taker': 0.1 / 100,\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {\n                        'BTC': 0.0007,\n                        'ETH': 0.00958,\n                        'BCH': 0.0018,\n                        'USDT': 5,\n                        'BTG': 0.0005,\n                        'LTC': 0.003,\n                        'ZEC': 0.0001,\n                        'XMR': 0.09,\n                        '1ST': 0.84,\n                        'ADX': 5.7,\n                        'AE': 6.7,\n                        'AEON': 0.01006,\n                        'AIR': 565,\n                        'AMP': 9,\n                        'ANT': 6.7,\n                        'ARDR': 2,\n                        'ARN': 18.5,\n                        'ART': 26,\n                        'ATB': 0.0004,\n                        'ATL': 27,\n                        'ATM': 504,\n                        'ATS': 860,\n                        'AVT': 1.9,\n                        'BAS': 113,\n                        'BCN': 0.1,\n                        'BET': 124,\n                        'BKB': 46,\n                        'BMC': 32,\n                        'BMT': 100,\n                        'BNT': 2.57,\n                        'BQX': 4.7,\n                        'BTM': 40,\n                        'BTX': 0.04,\n                        'BUS': 0.004,\n                        'CCT': 115,\n                        'CDT': 100,\n                        'CDX': 30,\n                        'CFI': 61,\n                        'CLD': 0.88,\n                        'CND': 574,\n                        'CNX': 0.04,\n                        'COSS': 65,\n                        'CSNO': 16,\n                        'CTR': 15,\n                        'CTX': 146,\n                        'CVC': 8.46,\n                        'DBIX': 0.0168,\n                        'DCN': 120000,\n                        'DCT': 0.02,\n                        'DDF': 342,\n                        'DENT': 6240,\n                        'DGB': 0.4,\n                        'DGD': 0.01,\n                        'DICE': 0.32,\n                        'DLT': 0.26,\n                        'DNT': 0.21,\n                        'DOGE': 2,\n                        'DOV': 34,\n                        'DRPU': 24,\n                        'DRT': 240,\n                        'DSH': 0.017,\n                        'EBET': 84,\n                        'EBTC': 20,\n                        'EBTCOLD': 6.6,\n                        'ECAT': 14,\n                        'EDG': 2,\n                        'EDO': 2.9,\n                        'ELE': 0.00172,\n                        'ELM': 0.004,\n                        'EMC': 0.03,\n                        'EMGO': 14,\n                        'ENJ': 163,\n                        'EOS': 1.5,\n                        'ERO': 34,\n                        'ETBS': 15,\n                        'ETC': 0.002,\n                        'ETP': 0.004,\n                        'EVX': 5.4,\n                        'EXN': 456,\n                        'FRD': 65,\n                        'FUEL': 123.00105,\n                        'FUN': 202.9598309,\n                        'FYN': 1.849,\n                        'FYP': 66.13,\n                        'GNO': 0.0034,\n                        'GUP': 4,\n                        'GVT': 1.2,\n                        'HAC': 144,\n                        'HDG': 7,\n                        'HGT': 1082,\n                        'HPC': 0.4,\n                        'HVN': 120,\n                        'ICN': 0.55,\n                        'ICO': 34,\n                        'ICOS': 0.35,\n                        'IND': 76,\n                        'INDI': 5913,\n                        'ITS': 15.0012,\n                        'IXT': 11,\n                        'KBR': 143,\n                        'KICK': 112,\n                        'LA': 41,\n                        'LAT': 1.44,\n                        'LIFE': 13000,\n                        'LRC': 27,\n                        'LSK': 0.3,\n                        'LUN': 0.34,\n                        'MAID': 5,\n                        'MANA': 143,\n                        'MCAP': 5.44,\n                        'MIPS': 43,\n                        'MNE': 1.33,\n                        'MSP': 121,\n                        'MTH': 92,\n                        'MYB': 3.9,\n                        'NDC': 165,\n                        'NEBL': 0.04,\n                        'NET': 3.96,\n                        'NTO': 998,\n                        'NXC': 13.39,\n                        'NXT': 3,\n                        'OAX': 15,\n                        'ODN': 0.004,\n                        'OMG': 2,\n                        'OPT': 335,\n                        'ORME': 2.8,\n                        'OTN': 0.57,\n                        'PAY': 3.1,\n                        'PIX': 96,\n                        'PLBT': 0.33,\n                        'PLR': 114,\n                        'PLU': 0.87,\n                        'POE': 784,\n                        'POLL': 3.5,\n                        'PPT': 2,\n                        'PRE': 32,\n                        'PRG': 39,\n                        'PRO': 41,\n                        'PRS': 60,\n                        'PTOY': 0.5,\n                        'QAU': 63,\n                        'QCN': 0.03,\n                        'QTUM': 0.04,\n                        'QVT': 64,\n                        'REP': 0.02,\n                        'RKC': 15,\n                        'RVT': 14,\n                        'SAN': 2.24,\n                        'SBD': 0.03,\n                        'SCL': 2.6,\n                        'SISA': 1640,\n                        'SKIN': 407,\n                        'SMART': 0.4,\n                        'SMS': 0.0375,\n                        'SNC': 36,\n                        'SNGLS': 4,\n                        'SNM': 48,\n                        'SNT': 233,\n                        'STEEM': 0.01,\n                        'STRAT': 0.01,\n                        'STU': 14,\n                        'STX': 11,\n                        'SUB': 17,\n                        'SUR': 3,\n                        'SWT': 0.51,\n                        'TAAS': 0.91,\n                        'TBT': 2.37,\n                        'TFL': 15,\n                        'TIME': 0.03,\n                        'TIX': 7.1,\n                        'TKN': 1,\n                        'TKR': 84,\n                        'TNT': 90,\n                        'TRST': 1.6,\n                        'TRX': 1395,\n                        'UET': 480,\n                        'UGT': 15,\n                        'VEN': 14,\n                        'VERI': 0.037,\n                        'VIB': 50,\n                        'VIBE': 145,\n                        'VOISE': 618,\n                        'WEALTH': 0.0168,\n                        'WINGS': 2.4,\n                        'WTC': 0.75,\n                        'XAUR': 3.23,\n                        'XDN': 0.01,\n                        'XEM': 15,\n                        'XUC': 0.9,\n                        'YOYOW': 140,\n                        'ZAP': 24,\n                        'ZRX': 23,\n                        'ZSC': 191,\n                    },\n                    'deposit': {\n                        'BTC': 0,\n                        'ETH': 0,\n                        'BCH': 0,\n                        'USDT': 0,\n                        'BTG': 0,\n                        'LTC': 0,\n                        'ZEC': 0,\n                        'XMR': 0,\n                        '1ST': 0,\n                        'ADX': 0,\n                        'AE': 0,\n                        'AEON': 0,\n                        'AIR': 0,\n                        'AMP': 0,\n                        'ANT': 0,\n                        'ARDR': 0,\n                        'ARN': 0,\n                        'ART': 0,\n                        'ATB': 0,\n                        'ATL': 0,\n                        'ATM': 0,\n                        'ATS': 0,\n                        'AVT': 0,\n                        'BAS': 0,\n                        'BCN': 0,\n                        'BET': 0,\n                        'BKB': 0,\n                        'BMC': 0,\n                        'BMT': 0,\n                        'BNT': 0,\n                        'BQX': 0,\n                        'BTM': 0,\n                        'BTX': 0,\n                        'BUS': 0,\n                        'CCT': 0,\n                        'CDT': 0,\n                        'CDX': 0,\n                        'CFI': 0,\n                        'CLD': 0,\n                        'CND': 0,\n                        'CNX': 0,\n                        'COSS': 0,\n                        'CSNO': 0,\n                        'CTR': 0,\n                        'CTX': 0,\n                        'CVC': 0,\n                        'DBIX': 0,\n                        'DCN': 0,\n                        'DCT': 0,\n                        'DDF': 0,\n                        'DENT': 0,\n                        'DGB': 0,\n                        'DGD': 0,\n                        'DICE': 0,\n                        'DLT': 0,\n                        'DNT': 0,\n                        'DOGE': 0,\n                        'DOV': 0,\n                        'DRPU': 0,\n                        'DRT': 0,\n                        'DSH': 0,\n                        'EBET': 0,\n                        'EBTC': 0,\n                        'EBTCOLD': 0,\n                        'ECAT': 0,\n                        'EDG': 0,\n                        'EDO': 0,\n                        'ELE': 0,\n                        'ELM': 0,\n                        'EMC': 0,\n                        'EMGO': 0,\n                        'ENJ': 0,\n                        'EOS': 0,\n                        'ERO': 0,\n                        'ETBS': 0,\n                        'ETC': 0,\n                        'ETP': 0,\n                        'EVX': 0,\n                        'EXN': 0,\n                        'FRD': 0,\n                        'FUEL': 0,\n                        'FUN': 0,\n                        'FYN': 0,\n                        'FYP': 0,\n                        'GNO': 0,\n                        'GUP': 0,\n                        'GVT': 0,\n                        'HAC': 0,\n                        'HDG': 0,\n                        'HGT': 0,\n                        'HPC': 0,\n                        'HVN': 0,\n                        'ICN': 0,\n                        'ICO': 0,\n                        'ICOS': 0,\n                        'IND': 0,\n                        'INDI': 0,\n                        'ITS': 0,\n                        'IXT': 0,\n                        'KBR': 0,\n                        'KICK': 0,\n                        'LA': 0,\n                        'LAT': 0,\n                        'LIFE': 0,\n                        'LRC': 0,\n                        'LSK': 0,\n                        'LUN': 0,\n                        'MAID': 0,\n                        'MANA': 0,\n                        'MCAP': 0,\n                        'MIPS': 0,\n                        'MNE': 0,\n                        'MSP': 0,\n                        'MTH': 0,\n                        'MYB': 0,\n                        'NDC': 0,\n                        'NEBL': 0,\n                        'NET': 0,\n                        'NTO': 0,\n                        'NXC': 0,\n                        'NXT': 0,\n                        'OAX': 0,\n                        'ODN': 0,\n                        'OMG': 0,\n                        'OPT': 0,\n                        'ORME': 0,\n                        'OTN': 0,\n                        'PAY': 0,\n                        'PIX': 0,\n                        'PLBT': 0,\n                        'PLR': 0,\n                        'PLU': 0,\n                        'POE': 0,\n                        'POLL': 0,\n                        'PPT': 0,\n                        'PRE': 0,\n                        'PRG': 0,\n                        'PRO': 0,\n                        'PRS': 0,\n                        'PTOY': 0,\n                        'QAU': 0,\n                        'QCN': 0,\n                        'QTUM': 0,\n                        'QVT': 0,\n                        'REP': 0,\n                        'RKC': 0,\n                        'RVT': 0,\n                        'SAN': 0,\n                        'SBD': 0,\n                        'SCL': 0,\n                        'SISA': 0,\n                        'SKIN': 0,\n                        'SMART': 0,\n                        'SMS': 0,\n                        'SNC': 0,\n                        'SNGLS': 0,\n                        'SNM': 0,\n                        'SNT': 0,\n                        'STEEM': 0,\n                        'STRAT': 0,\n                        'STU': 0,\n                        'STX': 0,\n                        'SUB': 0,\n                        'SUR': 0,\n                        'SWT': 0,\n                        'TAAS': 0,\n                        'TBT': 0,\n                        'TFL': 0,\n                        'TIME': 0,\n                        'TIX': 0,\n                        'TKN': 0,\n                        'TKR': 0,\n                        'TNT': 0,\n                        'TRST': 0,\n                        'TRX': 0,\n                        'UET': 0,\n                        'UGT': 0,\n                        'VEN': 0,\n                        'VERI': 0,\n                        'VIB': 0,\n                        'VIBE': 0,\n                        'VOISE': 0,\n                        'WEALTH': 0,\n                        'WINGS': 0,\n                        'WTC': 0,\n                        'XAUR': 0,\n                        'XDN': 0,\n                        'XEM': 0,\n                        'XUC': 0,\n                        'YOYOW': 0,\n                        'ZAP': 0,\n                        'ZRX': 0,\n                        'ZSC': 0,\n                    },\n                },\n            },\n        });\n    }\n\n    commonCurrencyCode (currency) {\n        if (currency == 'XBT')\n            return 'BTC';\n        if (currency == 'DRK')\n            return 'DASH';\n        if (currency == 'CAT')\n            return 'BitClave';\n        if (currency == 'USD')\n            return 'USDT';\n        return currency;\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetSymbols ();\n        let result = [];\n        for (let p = 0; p < markets['symbols'].length; p++) {\n            let market = markets['symbols'][p];\n            let id = market['symbol'];\n            let baseId = market['commodity'];\n            let quoteId = market['currency'];\n            let lot = parseFloat (market['lot']);\n            let step = parseFloat (market['step']);\n            let base = this.commonCurrencyCode (baseId);\n            let quote = this.commonCurrencyCode (quoteId);\n            let symbol = base + '/' + quote;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'lot': lot,\n                'step': step,\n                'info': market,\n                'precision': {\n                    'amount': this.precisionFromString (market['lot']),\n                    'price': this.precisionFromString (market['step']),\n                },\n                'limits': {\n                    'amount': {\n                        'min': lot,\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': step,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let method = this.safeString (params, 'type', 'trading');\n        method += 'GetBalance';\n        let query = this.omit (params, 'type');\n        let response = await this[method] (query);\n        let balances = response['balance'];\n        let result = { 'info': balances };\n        for (let b = 0; b < balances.length; b++) {\n            let balance = balances[b];\n            let code = balance['currency_code'];\n            let currency = this.commonCurrencyCode (code);\n            let free = this.safeFloat (balance, 'cash', 0.0);\n            free = this.safeFloat (balance, 'balance', free);\n            let used = this.safeFloat (balance, 'reserved', 0.0);\n            let account = {\n                'free': free,\n                'used': used,\n                'total': this.sum (free, used),\n            };\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let orderbook = await this.publicGetSymbolOrderbook (this.extend ({\n            'symbol': this.marketId (symbol),\n        }, params));\n        return this.parseOrderBook (orderbook);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = ticker['timestamp'];\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'ask': this.safeFloat (ticker, 'ask'),\n            'vwap': undefined,\n            'open': this.safeFloat (ticker, 'open'),\n            'close': undefined,\n            'first': undefined,\n            'last': this.safeFloat (ticker, 'last'),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'volume'),\n            'quoteVolume': this.safeFloat (ticker, 'volume_quote'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let tickers = await this.publicGetTicker (params);\n        let ids = Object.keys (tickers);\n        let result = {};\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            let market = this.markets_by_id[id];\n            let symbol = market['symbol'];\n            let ticker = tickers[id];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let ticker = await this.publicGetSymbolTicker (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        if ('message' in ticker)\n            throw new ExchangeError (this.id + ' ' + ticker['message']);\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        return {\n            'info': trade,\n            'id': trade[0],\n            'timestamp': trade[3],\n            'datetime': this.iso8601 (trade[3]),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': trade[4],\n            'price': parseFloat (trade[1]),\n            'amount': parseFloat (trade[2]),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetSymbolTrades (this.extend ({\n            'symbol': market['id'],\n            // 'from': 0,\n            // 'till': 100,\n            // 'by': 'ts', // or by trade_id\n            // 'sort': 'desc', // or asc\n            // 'start_index': 0,\n            // 'max_results': 1000,\n            // 'format_item': 'object',\n            // 'format_price': 'number',\n            // 'format_amount': 'number',\n            // 'format_tid': 'string',\n            // 'format_timestamp': 'millisecond',\n            // 'format_wrap': false,\n            'side': 'true',\n        }, params));\n        return this.parseTrades (response['trades'], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        // check if amount can be evenly divided into lots\n        // they want integer quantity in lot units\n        let quantity = parseFloat (amount) / market['lot'];\n        let wholeLots = Math.round (quantity);\n        let difference = quantity - wholeLots;\n        if (Math.abs (difference) > market['step'])\n            throw new ExchangeError (this.id + ' order amount should be evenly divisible by lot unit size of ' + market['lot'].toString ());\n        let clientOrderId = this.milliseconds ();\n        let order = {\n            'clientOrderId': clientOrderId.toString (),\n            'symbol': market['id'],\n            'side': side,\n            'quantity': wholeLots.toString (), // quantity in integer lot units\n            'type': type,\n        };\n        if (type == 'limit') {\n            order['price'] = this.priceToPrecision (symbol, price);\n        } else {\n            order['timeInForce'] = 'FOK';\n        }\n        let response = await this.tradingPostNewOrder (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['ExecutionReport']['clientOrderId'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.tradingPostCancelOrder (this.extend ({\n            'clientOrderId': id,\n        }, params));\n    }\n\n    parseOrderStatus (status) {\n        let statuses = {\n            'new': 'open',\n            'partiallyFilled': 'open',\n            'filled': 'closed',\n            'canceled': 'canceled',\n            'rejected': 'rejected',\n            'expired': 'expired',\n        };\n        return this.safeString (statuses, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        let timestamp = parseInt (order['lastTimestamp']);\n        let symbol = undefined;\n        if (!market)\n            market = this.markets_by_id[order['symbol']];\n        let status = this.safeString (order, 'orderStatus');\n        if (status)\n            status = this.parseOrderStatus (status);\n        let averagePrice = this.safeFloat (order, 'avgPrice', 0.0);\n        let price = this.safeFloat (order, 'orderPrice');\n        let amount = this.safeFloat (order, 'orderQuantity');\n        let remaining = this.safeFloat (order, 'quantityLeaves');\n        let filled = undefined;\n        let cost = undefined;\n        if (market) {\n            symbol = market['symbol'];\n            amount *= market['lot'];\n            remaining *= market['lot'];\n        }\n        if (amount && remaining) {\n            filled = amount - remaining;\n            cost = averagePrice * filled;\n        }\n        return {\n            'id': order['clientOrderId'].toString (),\n            'info': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'status': status,\n            'symbol': symbol,\n            'type': order['type'],\n            'side': order['side'],\n            'price': price,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'fee': undefined,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.tradingGetOrder (this.extend ({\n            'clientOrderId': id,\n        }, params));\n        return this.parseOrder (response['orders'][0]);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let statuses = [ 'new', 'partiallyFiiled' ];\n        let market = undefined;\n        let request = {\n            'sort': 'desc',\n            'statuses': statuses.join (','),\n        };\n        if (symbol) {\n            market = this.market (symbol);\n            request['symbols'] = market['id'];\n        }\n        let response = await this.tradingGetOrdersActive (this.extend (request, params));\n        return this.parseOrders (response['orders'], market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        let statuses = [ 'filled', 'canceled', 'rejected', 'expired' ];\n        let request = {\n            'sort': 'desc',\n            'statuses': statuses.join (','),\n            'max_results': 1000,\n        };\n        if (symbol) {\n            market = this.market (symbol);\n            request['symbols'] = market['id'];\n        }\n        let response = await this.tradingGetOrdersRecent (this.extend (request, params));\n        return this.parseOrders (response['orders'], market, since, limit);\n    }\n\n    async withdraw (code, amount, address, params = {}) {\n        await this.loadMarkets ();\n        let currency = this.currency (code);\n        let response = await this.paymentPostPayout (this.extend ({\n            'currency_code': currency['id'],\n            'amount': amount,\n            'address': address,\n        }, params));\n        return {\n            'info': response,\n            'id': response['transaction'],\n        };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = '/' + 'api' + '/' + this.version + '/' + api + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'public') {\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            let payload = { 'nonce': nonce, 'apikey': this.apiKey };\n            query = this.extend (payload, query);\n            if (method == 'GET')\n                url += '?' + this.urlencode (query);\n            else\n                url += '?' + this.urlencode (payload);\n            let auth = url;\n            if (method == 'POST') {\n                if (Object.keys (query).length) {\n                    body = this.urlencode (query);\n                    auth += body;\n                }\n            }\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'X-Signature': this.hmac (this.encode (auth), this.encode (this.secret), 'sha512').toLowerCase (),\n            };\n        }\n        url = this.urls['api'] + url;\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('code' in response) {\n            if ('ExecutionReport' in response) {\n                if (response['ExecutionReport']['orderRejectReason'] == 'orderExceedsLimit')\n                    throw new InsufficientFunds (this.id + ' ' + this.json (response));\n            }\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        }\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/hitbtc.js\n// module id = 336\n// module chunks = 0","\"use strict\";\n\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class huobipro extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'huobipro',\n            'name': 'Huobi Pro',\n            'countries': 'CN',\n            'rateLimit': 2000,\n            'userAgent': this.userAgents['chrome39'],\n            'version': 'v1',\n            'accounts': undefined,\n            'accountsById': undefined,\n            'hostname': 'api.huobi.pro',\n            'hasCORS': false,\n            // obsolete metainfo structure\n            'hasFetchOHLCV': true,\n            'hasFetchOrders': true,\n            'hasFetchOpenOrders': true,\n            // new metainfo structure\n            'has': {\n                'fetchOHCLV': true,\n                'fetchOrders': true,\n                'fetchOpenOrders': true,\n            },\n            'timeframes': {\n                '1m': '1min',\n                '5m': '5min',\n                '15m': '15min',\n                '30m': '30min',\n                '1h': '60min',\n                '1d': '1day',\n                '1w': '1week',\n                '1M': '1mon',\n                '1y': '1year',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766569-15aa7b9a-5edd-11e7-9e7f-44791f4ee49c.jpg',\n                'api': 'https://api.huobi.pro',\n                'www': 'https://www.huobi.pro',\n                'doc': 'https://github.com/huobiapi/API_Docs/wiki/REST_api_reference',\n            },\n            'api': {\n                'market': {\n                    'get': [\n                        'history/kline', // 获取K线数据\n                        'detail/merged', // 获取聚合行情(Ticker)\n                        'depth', // 获取 Market Depth 数据\n                        'trade', // 获取 Trade Detail 数据\n                        'history/trade', // 批量获取最近的交易记录\n                        'detail', // 获取 Market Detail 24小时成交量数据\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'common/symbols', // 查询系统支持的所有交易对\n                        'common/currencys', // 查询系统支持的所有币种\n                        'common/timestamp', // 查询系统当前时间\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'account/accounts', // 查询当前用户的所有账户(即account-id)\n                        'account/accounts/{id}/balance', // 查询指定账户的余额\n                        'order/orders/{id}', // 查询某个订单详情\n                        'order/orders/{id}/matchresults', // 查询某个订单的成交明细\n                        'order/orders', // 查询当前委托、历史委托\n                        'order/matchresults', // 查询当前成交、历史成交\n                        'dw/withdraw-virtual/addresses', // 查询虚拟币提现地址\n                    ],\n                    'post': [\n                        'order/orders/place', // 创建并执行一个新订单 (一步下单， 推荐使用)\n                        'order/orders', // 创建一个新的订单请求 （仅创建订单，不执行下单）\n                        'order/orders/{id}/place', // 执行一个订单 （仅执行已创建的订单）\n                        'order/orders/{id}/submitcancel', // 申请撤销一个订单请求\n                        'order/orders/batchcancel', // 批量撤销订单\n                        'dw/balance/transfer', // 资产划转\n                        'dw/withdraw-virtual/create', // 申请提现虚拟币\n                        'dw/withdraw-virtual/{id}/place', // 确认申请虚拟币提现\n                        'dw/withdraw-virtual/{id}/cancel', // 申请取消提现虚拟币\n                    ],\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let response = await this.publicGetCommonSymbols ();\n        let markets = response['data'];\n        let numMarkets = markets.length;\n        if (numMarkets < 1)\n            throw new ExchangeError (this.id + ' publicGetCommonSymbols returned empty response: ' + this.json (response));\n        let result = [];\n        for (let i = 0; i < markets.length; i++) {\n            let market = markets[i];\n            let baseId = market['base-currency'];\n            let quoteId = market['quote-currency'];\n            let base = baseId.toUpperCase ();\n            let quote = quoteId.toUpperCase ();\n            let id = baseId + quoteId;\n            base = this.commonCurrencyCode (base);\n            quote = this.commonCurrencyCode (quote);\n            let symbol = base + '/' + quote;\n            let precision = {\n                'amount': market['amount-precision'],\n                'price': market['price-precision'],\n            };\n            let lot = Math.pow (10, -precision['amount']);\n            let maker = (base == 'OMG') ? 0 : 0.2 / 100;\n            let taker = (base == 'OMG') ? 0 : 0.2 / 100;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'lot': lot,\n                'precision': precision,\n                'taker': taker,\n                'maker': maker,\n                'limits': {\n                    'amount': {\n                        'min': lot,\n                        'max': Math.pow (10, precision['amount']),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': 0,\n                        'max': undefined,\n                    },\n                },\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        let last = undefined;\n        if ('last' in ticker)\n            last = ticker['last'];\n        let timestamp = this.milliseconds ();\n        if ('ts' in ticker)\n            timestamp = ticker['ts'];\n        let bid = undefined;\n        let ask = undefined;\n        if ('bid' in ticker) {\n            if (ticker['bid'])\n                bid = this.safeFloat (ticker['bid'], 0);\n        }\n        if ('ask' in ticker) {\n            if (ticker['ask'])\n                ask = this.safeFloat (ticker['ask'], 0);\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': ticker['high'],\n            'low': ticker['low'],\n            'bid': bid,\n            'ask': ask,\n            'vwap': undefined,\n            'open': ticker['open'],\n            'close': ticker['close'],\n            'first': undefined,\n            'last': last,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['amount']),\n            'quoteVolume': ticker['vol'],\n            'info': ticker,\n        };\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.marketGetDepth (this.extend ({\n            'symbol': market['id'],\n            'type': 'step0',\n        }, params));\n        if ('tick' in response) {\n            if (!response['tick']) {\n                throw new ExchangeError (this.id + ' fetchOrderBook() returned empty response: ' + this.json (response));\n            }\n            return this.parseOrderBook (response['tick'], response['tick']['ts']);\n        }\n        throw new ExchangeError (this.id + ' fetchOrderBook() returned unrecognized response: ' + this.json (response));\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.marketGetDetailMerged (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        return this.parseTicker (response['tick'], market);\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = trade['ts'];\n        return {\n            'info': trade,\n            'id': trade['id'].toString (),\n            'order': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': trade['direction'],\n            'price': trade['price'],\n            'amount': trade['amount'],\n        };\n    }\n\n    parseTradesData (data, market, since = undefined, limit = undefined) {\n        let result = [];\n        for (let i = 0; i < data.length; i++) {\n            let trades = this.parseTrades (data[i]['data'], market, since, limit);\n            for (let k = 0; k < trades.length; k++) {\n                result.push (trades[k]);\n            }\n        }\n        return result;\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.marketGetHistoryTrade (this.extend ({\n            'symbol': market['id'],\n            'size': 2000,\n        }, params));\n        return this.parseTradesData (response['data'], market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {\n        return [\n            ohlcv['id'] * 1000,\n            ohlcv['open'],\n            ohlcv['high'],\n            ohlcv['low'],\n            ohlcv['close'],\n            ohlcv['vol'],\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.marketGetHistoryKline (this.extend ({\n            'symbol': market['id'],\n            'period': this.timeframes[timeframe],\n            'size': 2000, // max = 2000\n        }, params));\n        return this.parseOHLCVs (response['data'], market, timeframe, since, limit);\n    }\n\n    async loadAccounts (reload = false) {\n        if (reload) {\n            this.accounts = await this.fetchAccounts ();\n        } else {\n            if (this.accounts) {\n                return this.accounts;\n            } else {\n                this.accounts = await this.fetchAccounts ();\n                this.accountsById = this.indexBy (this.accounts, 'id');\n            }\n        }\n        return this.accounts;\n    }\n\n    async fetchAccounts () {\n        await this.loadMarkets ();\n        let response = await this.privateGetAccountAccounts ();\n        return response['data'];\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        let response = await this.privateGetAccountAccountsIdBalance (this.extend ({\n            'id': this.accounts[0]['id'],\n        }, params));\n        let balances = response['data']['list'];\n        let result = { 'info': response };\n        for (let i = 0; i < balances.length; i++) {\n            let balance = balances[i];\n            let uppercase = balance['currency'].toUpperCase ();\n            let currency = this.commonCurrencyCode (uppercase);\n            let account = undefined;\n            if (currency in result)\n                account = result[currency];\n            else\n                account = this.account ();\n            if (balance['type'] == 'trade')\n                account['free'] = parseFloat (balance['balance']);\n            if (balance['type'] == 'frozen')\n                account['used'] = parseFloat (balance['balance']);\n            account['total'] = this.sum (account['free'], account['used']);\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (!symbol)\n            throw new ExchangeError (this.id + ' fetchOrders() requires a symbol parameter');\n        this.load_markets ();\n        let market = this.market (symbol);\n        let status = undefined;\n        if ('type' in params) {\n            status = params['type'];\n        } else if ('status' in params) {\n            status = params['status'];\n        } else {\n            throw new ExchangeError (this.id + ' fetchOrders() requires type param or status param for spot market ' + symbol + '(0 or \"open\" for unfilled or partial filled orders, 1 or \"closed\" for filled orders)');\n        }\n        if ((status == 0) || (status == 'open')) {\n            status = 'submitted,partial-filled';\n        } else if ((status == 1) || (status == 'closed')) {\n            status = 'filled,partial-canceled';\n        } else {\n            throw new ExchangeError (this.id + ' fetchOrders() wrong type param or status param for spot market ' + symbol + '(0 or \"open\" for unfilled or partial filled orders, 1 or \"closed\" for filled orders)');\n        }\n        let response = await this.privateGetOrderOrders (this.extend ({\n            'symbol': market['id'],\n            'states': status,\n        }));\n        return this.parseOrders (response['data'], market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        let open = 0; // 0 for unfilled orders, 1 for filled orders\n        return this.fetchOrders (symbol, undefined, undefined, this.extend ({\n            'status': open,\n        }, params));\n    }\n\n    parseOrderStatus (status) {\n        if (status == 'partial-filled') {\n            return 'open';\n        } else if (status == 'filled') {\n            return 'closed';\n        } else if (status == 'canceled') {\n            return 'canceled';\n        } else if (status == 'submitted') {\n            return 'open';\n        }\n        return status;\n    }\n\n    parseOrder (order, market = undefined) {\n        let side = undefined;\n        let type = undefined;\n        let status = undefined;\n        if ('type' in order) {\n            let orderType = order['type'].split ('-');\n            side = orderType[0];\n            type = orderType[1];\n            status = this.parseOrderStatus (order['state']);\n        }\n        let symbol = undefined;\n        if (!market) {\n            if ('symbol' in order) {\n                if (order['symbol'] in this.markets_by_id) {\n                    let marketId = order['symbol'];\n                    market = this.markets_by_id[marketId];\n                }\n            }\n        }\n        if (market)\n            symbol = market['symbol'];\n        let timestamp = order['created-at'];\n        let amount = parseFloat (order['amount']);\n        let filled = parseFloat (order['field-amount']);\n        let remaining = amount - filled;\n        let price = parseFloat (order['price']);\n        let cost = parseFloat (order['field-cash-amount']);\n        let average = 0;\n        if (filled)\n            average = parseFloat (cost / filled);\n        let result = {\n            'info': order,\n            'id': order['id'],\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'price': price,\n            'average': average,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': undefined,\n        };\n        return result;\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        await this.loadAccounts ();\n        let market = this.market (symbol);\n        let order = {\n            'account-id': this.accounts[0]['id'],\n            'amount': this.amountToPrecision (symbol, amount),\n            'symbol': market['id'],\n            'type': side + '-' + type,\n        };\n        if (type == 'limit')\n            order['price'] = this.priceToPrecision (symbol, price);\n        let response = await this.privatePostOrderOrdersPlace (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['data'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostOrderOrdersIdSubmitcancel ({ 'id': id });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = '/';\n        if (api == 'market')\n            url += api;\n        else\n            url += this.version;\n        url += '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'private') {\n            this.checkRequiredCredentials ();\n            let timestamp = this.YmdHMS (this.milliseconds (), 'T');\n            let request = this.keysort (this.extend ({\n                'SignatureMethod': 'HmacSHA256',\n                'SignatureVersion': '2',\n                'AccessKeyId': this.apiKey,\n                'Timestamp': timestamp,\n            }, query));\n            let auth = this.urlencode (request);\n            let payload = [ method, this.hostname, url, auth ].join (\"\\n\");\n            let signature = this.hmac (this.encode (payload), this.encode (this.secret), 'sha256', 'base64');\n            auth += '&' + this.urlencode ({ 'Signature': signature });\n            url += '?' + auth;\n            if (method == 'POST') {\n                body = this.json (query);\n                headers = {\n                    'Content-Type': 'application/json',\n                };\n            }\n        } else {\n            if (Object.keys (params).length)\n                url += '?' + this.urlencode (params);\n        }\n        url = this.urls['api'] + url;\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('status' in response)\n            if (response['status'] == 'error')\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/huobipro.js\n// module id = 337\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, OrderNotFound, InvalidOrder, InsufficientFunds } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class qryptos extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'qryptos',\n            'name': 'QRYPTOS',\n            'countries': [ 'CN', 'TW' ],\n            'version': '2',\n            'rateLimit': 1000,\n            'hasFetchTickers': true,\n            'hasCORS': false,\n            'has': {\n                'fetchOrder': true,\n                'fetchOrders': true,\n                'fetchOpenOrders': true,\n                'fetchClosedOrders': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/30953915-b1611dc0-a436-11e7-8947-c95bd5a42086.jpg',\n                'api': 'https://api.qryptos.com',\n                'www': 'https://www.qryptos.com',\n                'doc': 'https://developers.quoine.com',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'products',\n                        'products/{id}',\n                        'products/{id}/price_levels',\n                        'executions',\n                        'ir_ladders/{currency}',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'accounts/balance',\n                        'crypto_accounts',\n                        'executions/me',\n                        'fiat_accounts',\n                        'loan_bids',\n                        'loans',\n                        'orders',\n                        'orders/{id}',\n                        'orders/{id}/trades',\n                        'trades',\n                        'trades/{id}/loans',\n                        'trading_accounts',\n                        'trading_accounts/{id}',\n                    ],\n                    'post': [\n                        'fiat_accounts',\n                        'loan_bids',\n                        'orders',\n                    ],\n                    'put': [\n                        'loan_bids/{id}/close',\n                        'loans/{id}',\n                        'orders/{id}',\n                        'orders/{id}/cancel',\n                        'trades/{id}',\n                        'trades/{id}/close',\n                        'trades/close_all',\n                        'trading_accounts/{id}',\n                    ],\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetProducts ();\n        let result = [];\n        for (let p = 0; p < markets.length; p++) {\n            let market = markets[p];\n            let id = market['id'];\n            let base = market['base_currency'];\n            let quote = market['quoted_currency'];\n            let symbol = base + '/' + quote;\n            let maker = this.safeFloat (market, 'maker_fee');\n            let taker = this.safeFloat (market, 'taker_fee');\n            let active = !market['disabled'];\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'maker': maker,\n                'taker': taker,\n                'active': active,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let balances = await this.privateGetAccountsBalance ();\n        let result = { 'info': balances };\n        for (let b = 0; b < balances.length; b++) {\n            let balance = balances[b];\n            let currency = balance['currency'];\n            let total = parseFloat (balance['balance']);\n            let account = {\n                'free': total,\n                'used': 0.0,\n                'total': total,\n            };\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let orderbook = await this.publicGetProductsIdPriceLevels (this.extend ({\n            'id': this.marketId (symbol),\n        }, params));\n        return this.parseOrderBook (orderbook, undefined, 'buy_price_levels', 'sell_price_levels');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = this.milliseconds ();\n        let last = undefined;\n        if ('last_traded_price' in ticker) {\n            if (ticker['last_traded_price']) {\n                let length = ticker['last_traded_price'].length;\n                if (length > 0)\n                    last = parseFloat (ticker['last_traded_price']);\n            }\n        }\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high_market_ask'),\n            'low': this.safeFloat (ticker, 'low_market_bid'),\n            'bid': this.safeFloat (ticker, 'market_bid'),\n            'ask': this.safeFloat (ticker, 'market_ask'),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': last,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'volume_24h'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let tickers = await this.publicGetProducts (params);\n        let result = {};\n        for (let t = 0; t < tickers.length; t++) {\n            let ticker = tickers[t];\n            let base = ticker['base_currency'];\n            let quote = ticker['quoted_currency'];\n            let symbol = base + '/' + quote;\n            let market = this.markets[symbol];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let ticker = await this.publicGetProductsId (this.extend ({\n            'id': market['id'],\n        }, params));\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = trade['created_at'] * 1000;\n        return {\n            'info': trade,\n            'id': trade['id'].toString (),\n            'order': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': trade['taker_side'],\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['quantity']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = {\n            'product_id': market['id'],\n        };\n        if (limit)\n            request['limit'] = limit;\n        let response = await this.publicGetExecutions (this.extend (request, params));\n        return this.parseTrades (response['models'], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let order = {\n            'order_type': type,\n            'product_id': this.marketId (symbol),\n            'side': side,\n            'quantity': amount,\n        };\n        if (type == 'limit')\n            order['price'] = price;\n        let response = await this.privatePostOrders (this.extend ({\n            'order': order,\n        }, params));\n        return this.parseOrder(response);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let result = await this.privatePutOrdersIdCancel (this.extend ({\n            'id': id,\n        }, params));\n        let order = this.parseOrder (result);\n        if (order['status'] == 'closed')\n            throw new OrderNotFound (this.id + ' ' + this.json (order));\n        return order;\n    }\n\n    parseOrder (order) {\n        let timestamp = order['created_at'] * 1000;\n        let marketId = order['product_id'];\n        let market = this.marketsById[marketId];\n        let status = undefined;\n        if ('status' in order) {\n            if (order['status'] == 'live') {\n                status = 'open';\n            } else if (order['status'] == 'filled') {\n                status = 'closed';\n            } else if (order['status'] == 'cancelled') { // 'll' intended\n                status = 'canceled';\n            }\n        }\n        let amount = parseFloat (order['quantity']);\n        let filled = parseFloat (order['filled_quantity']);\n        let symbol = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        }\n        return {\n            'id': order['id'],\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'type': order['order_type'],\n            'status': status,\n            'symbol': symbol,\n            'side': order['side'],\n            'price': order['price'],\n            'amount': amount,\n            'filled': filled,\n            'remaining': amount - filled,\n            'trades': undefined,\n            'fee': {\n                'currency': undefined,\n                'cost': parseFloat (order['order_fee']),\n            },\n            'info': order,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let order = await this.privateGetOrdersId (this.extend ({\n            'id': id,\n        }, params));\n        return this.parseOrder (order);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params={}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        let request = {};\n        if (symbol) {\n            market = this.market (symbol);\n            request['product_id'] = market['id'];\n        }\n        let status = params['status'];\n        if (status == 'open') {\n            request['status'] = 'live';\n        } else if (status == 'closed') {\n            request['status'] = 'filled';\n        } else if (status == 'canceled') {\n            request['status'] = 'cancelled';\n        }\n        let result = await this.privateGetOrders (request);\n        let orders = result['models'];\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return this.fetchOrders (symbol, since, limit, this.extend ({ 'status': 'open' }, params));\n    }\n\n    fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        return this.fetchOrders (symbol, since, limit, this.extend ({ 'status': 'closed' }, params));\n    }\n\n    handleErrors (code, reason, url, method, headers, body) {\n        let response = undefined;\n        if (code == 200 || code == 404 || code == 422) {\n            if ((body[0] == '{') || (body[0] == '[')) {\n                response = JSON.parse (body);\n            } else {\n                // if not a JSON response\n                throw new ExchangeError (this.id + ' returned a non-JSON reply: ' + body);\n            }\n        }\n        if (code == 404) {\n            if ('message' in response) {\n                if (response['message'] == 'Order not found') {\n                    throw new OrderNotFound (this.id + ' ' + body);\n                }\n            }\n        } else if (code == 422) {\n            if ('errors' in response) {\n                let errors = response['errors'];\n                if ('user' in errors) {\n                    let messages = errors['user'];\n                    if (messages.indexOf ('not_enough_free_balance') >= 0) {\n                        throw new InsufficientFunds (this.id + ' ' + body);\n                    }\n                } else if ('quantity' in errors) {\n                    let messages = errors['quantity'];\n                    if (messages.indexOf ('less_than_order_size') >= 0) {\n                        throw new InvalidOrder (this.id + ' ' + body);\n                    }\n                }\n            }\n        }\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        headers = {\n            'X-Quoine-API-Version': this.version,\n            'Content-Type': 'application/json',\n        };\n        if (api == 'public') {\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            if (method == 'GET') {\n                if (Object.keys (query).length)\n                    url += '?' + this.urlencode (query);\n            } else if (Object.keys (query).length) {\n                body = this.json (query);\n            }\n            let nonce = this.nonce ();\n            let request = {\n                'path': url,\n                'nonce': nonce,\n                'token_id': this.apiKey,\n                'iat': Math.floor (nonce / 1000), // issued at\n            };\n            headers['X-Quoine-Auth'] = this.jwt (request, this.secret);\n        }\n        url = this.urls['api'] + url;\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/qryptos.js\n// module id = 338\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/process/browser.js\n// module id = 340\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"), require(\"./lib-typedarrays\"), require(\"./enc-utf16\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./sha1\"), require(\"./sha256\"), require(\"./sha224\"), require(\"./sha512\"), require(\"./sha384\"), require(\"./sha3\"), require(\"./ripemd160\"), require(\"./hmac\"), require(\"./pbkdf2\"), require(\"./evpkdf\"), require(\"./cipher-core\"), require(\"./mode-cfb\"), require(\"./mode-ctr\"), require(\"./mode-ctr-gladman\"), require(\"./mode-ofb\"), require(\"./mode-ecb\"), require(\"./pad-ansix923\"), require(\"./pad-iso10126\"), require(\"./pad-iso97971\"), require(\"./pad-zeropadding\"), require(\"./pad-nopadding\"), require(\"./format-hex\"), require(\"./aes\"), require(\"./tripledes\"), require(\"./rc4\"), require(\"./rabbit\"), require(\"./rabbit-legacy\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\", \"./lib-typedarrays\", \"./enc-utf16\", \"./enc-base64\", \"./md5\", \"./sha1\", \"./sha256\", \"./sha224\", \"./sha512\", \"./sha384\", \"./sha3\", \"./ripemd160\", \"./hmac\", \"./pbkdf2\", \"./evpkdf\", \"./cipher-core\", \"./mode-cfb\", \"./mode-ctr\", \"./mode-ctr-gladman\", \"./mode-ofb\", \"./mode-ecb\", \"./pad-ansix923\", \"./pad-iso10126\", \"./pad-iso97971\", \"./pad-zeropadding\", \"./pad-nopadding\", \"./format-hex\", \"./aes\", \"./tripledes\", \"./rc4\", \"./rabbit\", \"./rabbit-legacy\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\treturn CryptoJS;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/index.js\n// module id = 341\n// module chunks = 0",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Check if typed arrays are supported\n\t    if (typeof ArrayBuffer != 'function') {\n\t        return;\n\t    }\n\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\n\t    // Reference original init\n\t    var superInit = WordArray.init;\n\n\t    // Augment WordArray.init to handle typed arrays\n\t    var subInit = WordArray.init = function (typedArray) {\n\t        // Convert buffers to uint8\n\t        if (typedArray instanceof ArrayBuffer) {\n\t            typedArray = new Uint8Array(typedArray);\n\t        }\n\n\t        // Convert other array views to uint8\n\t        if (\n\t            typedArray instanceof Int8Array ||\n\t            (typeof Uint8ClampedArray !== \"undefined\" && typedArray instanceof Uint8ClampedArray) ||\n\t            typedArray instanceof Int16Array ||\n\t            typedArray instanceof Uint16Array ||\n\t            typedArray instanceof Int32Array ||\n\t            typedArray instanceof Uint32Array ||\n\t            typedArray instanceof Float32Array ||\n\t            typedArray instanceof Float64Array\n\t        ) {\n\t            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n\t        }\n\n\t        // Handle Uint8Array\n\t        if (typedArray instanceof Uint8Array) {\n\t            // Shortcut\n\t            var typedArrayByteLength = typedArray.byteLength;\n\n\t            // Extract bytes\n\t            var words = [];\n\t            for (var i = 0; i < typedArrayByteLength; i++) {\n\t                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\n\t            }\n\n\t            // Initialize this word array\n\t            superInit.call(this, words, typedArrayByteLength);\n\t        } else {\n\t            // Else call normal init\n\t            superInit.apply(this, arguments);\n\t        }\n\t    };\n\n\t    subInit.prototype = WordArray;\n\t}());\n\n\n\treturn CryptoJS.lib.WordArray;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/lib-typedarrays.js\n// module id = 342\n// module chunks = 0",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * UTF-16 BE encoding strategy.\n\t     */\n\t    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 BE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 BE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 BE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 BE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-16 LE encoding strategy.\n\t     */\n\t    C_enc.Utf16LE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 LE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 LE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 LE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 LE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    function swapEndian(word) {\n\t        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Utf16;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/enc-utf16.js\n// module id = 343\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha256\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha256\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA256 = C_algo.SHA256;\n\n\t    /**\n\t     * SHA-224 hash algorithm.\n\t     */\n\t    var SHA224 = C_algo.SHA224 = SHA256.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n\t                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4\n\t            ]);\n\t        },\n\n\t        _doFinalize: function () {\n\t            var hash = SHA256._doFinalize.call(this);\n\n\t            hash.sigBytes -= 4;\n\n\t            return hash;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA224('message');\n\t     *     var hash = CryptoJS.SHA224(wordArray);\n\t     */\n\t    C.SHA224 = SHA256._createHelper(SHA224);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA224(message, key);\n\t     */\n\t    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);\n\t}());\n\n\n\treturn CryptoJS.SHA224;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/sha224.js\n// module id = 344\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"), require(\"./sha512\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\", \"./sha512\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var X64WordArray = C_x64.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA512 = C_algo.SHA512;\n\n\t    /**\n\t     * SHA-384 hash algorithm.\n\t     */\n\t    var SHA384 = C_algo.SHA384 = SHA512.extend({\n\t        _doReset: function () {\n\t            this._hash = new X64WordArray.init([\n\t                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),\n\t                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),\n\t                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),\n\t                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)\n\t            ]);\n\t        },\n\n\t        _doFinalize: function () {\n\t            var hash = SHA512._doFinalize.call(this);\n\n\t            hash.sigBytes -= 16;\n\n\t            return hash;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA384('message');\n\t     *     var hash = CryptoJS.SHA384(wordArray);\n\t     */\n\t    C.SHA384 = SHA512._createHelper(SHA384);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA384(message, key);\n\t     */\n\t    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);\n\t}());\n\n\n\treturn CryptoJS.SHA384;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/sha384.js\n// module id = 345\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./x64-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var C_algo = C.algo;\n\n\t    // Constants tables\n\t    var RHO_OFFSETS = [];\n\t    var PI_INDEXES  = [];\n\t    var ROUND_CONSTANTS = [];\n\n\t    // Compute Constants\n\t    (function () {\n\t        // Compute rho offset constants\n\t        var x = 1, y = 0;\n\t        for (var t = 0; t < 24; t++) {\n\t            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;\n\n\t            var newX = y % 5;\n\t            var newY = (2 * x + 3 * y) % 5;\n\t            x = newX;\n\t            y = newY;\n\t        }\n\n\t        // Compute pi index constants\n\t        for (var x = 0; x < 5; x++) {\n\t            for (var y = 0; y < 5; y++) {\n\t                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;\n\t            }\n\t        }\n\n\t        // Compute round constants\n\t        var LFSR = 0x01;\n\t        for (var i = 0; i < 24; i++) {\n\t            var roundConstantMsw = 0;\n\t            var roundConstantLsw = 0;\n\n\t            for (var j = 0; j < 7; j++) {\n\t                if (LFSR & 0x01) {\n\t                    var bitPosition = (1 << j) - 1;\n\t                    if (bitPosition < 32) {\n\t                        roundConstantLsw ^= 1 << bitPosition;\n\t                    } else /* if (bitPosition >= 32) */ {\n\t                        roundConstantMsw ^= 1 << (bitPosition - 32);\n\t                    }\n\t                }\n\n\t                // Compute next LFSR\n\t                if (LFSR & 0x80) {\n\t                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1\n\t                    LFSR = (LFSR << 1) ^ 0x71;\n\t                } else {\n\t                    LFSR <<= 1;\n\t                }\n\t            }\n\n\t            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);\n\t        }\n\t    }());\n\n\t    // Reusable objects for temporary values\n\t    var T = [];\n\t    (function () {\n\t        for (var i = 0; i < 25; i++) {\n\t            T[i] = X64Word.create();\n\t        }\n\t    }());\n\n\t    /**\n\t     * SHA-3 hash algorithm.\n\t     */\n\t    var SHA3 = C_algo.SHA3 = Hasher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} outputLength\n\t         *   The desired number of bits in the output hash.\n\t         *   Only values permitted are: 224, 256, 384, 512.\n\t         *   Default: 512\n\t         */\n\t        cfg: Hasher.cfg.extend({\n\t            outputLength: 512\n\t        }),\n\n\t        _doReset: function () {\n\t            var state = this._state = []\n\t            for (var i = 0; i < 25; i++) {\n\t                state[i] = new X64Word.init();\n\t            }\n\n\t            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcuts\n\t            var state = this._state;\n\t            var nBlockSizeLanes = this.blockSize / 2;\n\n\t            // Absorb\n\t            for (var i = 0; i < nBlockSizeLanes; i++) {\n\t                // Shortcuts\n\t                var M2i  = M[offset + 2 * i];\n\t                var M2i1 = M[offset + 2 * i + 1];\n\n\t                // Swap endian\n\t                M2i = (\n\t                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |\n\t                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)\n\t                );\n\t                M2i1 = (\n\t                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |\n\t                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)\n\t                );\n\n\t                // Absorb message into state\n\t                var lane = state[i];\n\t                lane.high ^= M2i1;\n\t                lane.low  ^= M2i;\n\t            }\n\n\t            // Rounds\n\t            for (var round = 0; round < 24; round++) {\n\t                // Theta\n\t                for (var x = 0; x < 5; x++) {\n\t                    // Mix column lanes\n\t                    var tMsw = 0, tLsw = 0;\n\t                    for (var y = 0; y < 5; y++) {\n\t                        var lane = state[x + 5 * y];\n\t                        tMsw ^= lane.high;\n\t                        tLsw ^= lane.low;\n\t                    }\n\n\t                    // Temporary values\n\t                    var Tx = T[x];\n\t                    Tx.high = tMsw;\n\t                    Tx.low  = tLsw;\n\t                }\n\t                for (var x = 0; x < 5; x++) {\n\t                    // Shortcuts\n\t                    var Tx4 = T[(x + 4) % 5];\n\t                    var Tx1 = T[(x + 1) % 5];\n\t                    var Tx1Msw = Tx1.high;\n\t                    var Tx1Lsw = Tx1.low;\n\n\t                    // Mix surrounding columns\n\t                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));\n\t                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));\n\t                    for (var y = 0; y < 5; y++) {\n\t                        var lane = state[x + 5 * y];\n\t                        lane.high ^= tMsw;\n\t                        lane.low  ^= tLsw;\n\t                    }\n\t                }\n\n\t                // Rho Pi\n\t                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {\n\t                    // Shortcuts\n\t                    var lane = state[laneIndex];\n\t                    var laneMsw = lane.high;\n\t                    var laneLsw = lane.low;\n\t                    var rhoOffset = RHO_OFFSETS[laneIndex];\n\n\t                    // Rotate lanes\n\t                    if (rhoOffset < 32) {\n\t                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));\n\t                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));\n\t                    } else /* if (rhoOffset >= 32) */ {\n\t                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));\n\t                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));\n\t                    }\n\n\t                    // Transpose lanes\n\t                    var TPiLane = T[PI_INDEXES[laneIndex]];\n\t                    TPiLane.high = tMsw;\n\t                    TPiLane.low  = tLsw;\n\t                }\n\n\t                // Rho pi at x = y = 0\n\t                var T0 = T[0];\n\t                var state0 = state[0];\n\t                T0.high = state0.high;\n\t                T0.low  = state0.low;\n\n\t                // Chi\n\t                for (var x = 0; x < 5; x++) {\n\t                    for (var y = 0; y < 5; y++) {\n\t                        // Shortcuts\n\t                        var laneIndex = x + 5 * y;\n\t                        var lane = state[laneIndex];\n\t                        var TLane = T[laneIndex];\n\t                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];\n\t                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];\n\n\t                        // Mix rows\n\t                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);\n\t                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);\n\t                    }\n\t                }\n\n\t                // Iota\n\t                var lane = state[0];\n\t                var roundConstant = ROUND_CONSTANTS[round];\n\t                lane.high ^= roundConstant.high;\n\t                lane.low  ^= roundConstant.low;;\n\t            }\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\t            var blockSizeBits = this.blockSize * 32;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);\n\t            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var state = this._state;\n\t            var outputLengthBytes = this.cfg.outputLength / 8;\n\t            var outputLengthLanes = outputLengthBytes / 8;\n\n\t            // Squeeze\n\t            var hashWords = [];\n\t            for (var i = 0; i < outputLengthLanes; i++) {\n\t                // Shortcuts\n\t                var lane = state[i];\n\t                var laneMsw = lane.high;\n\t                var laneLsw = lane.low;\n\n\t                // Swap endian\n\t                laneMsw = (\n\t                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |\n\t                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)\n\t                );\n\t                laneLsw = (\n\t                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |\n\t                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)\n\t                );\n\n\t                // Squeeze state to retrieve hash\n\t                hashWords.push(laneLsw);\n\t                hashWords.push(laneMsw);\n\t            }\n\n\t            // Return final computed hash\n\t            return new WordArray.init(hashWords, outputLengthBytes);\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\n\t            var state = clone._state = this._state.slice(0);\n\t            for (var i = 0; i < 25; i++) {\n\t                state[i] = state[i].clone();\n\t            }\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA3('message');\n\t     *     var hash = CryptoJS.SHA3(wordArray);\n\t     */\n\t    C.SHA3 = Hasher._createHelper(SHA3);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA3(message, key);\n\t     */\n\t    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA3;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/sha3.js\n// module id = 346\n// module chunks = 0",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/** @preserve\n\t(c) 2012 by Cédric Mesnil. All rights reserved.\n\n\tRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n\t    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\t    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n\tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t*/\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Constants table\n\t    var _zl = WordArray.create([\n\t        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n\t        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,\n\t        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,\n\t        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,\n\t        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);\n\t    var _zr = WordArray.create([\n\t        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,\n\t        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,\n\t        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,\n\t        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,\n\t        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);\n\t    var _sl = WordArray.create([\n\t         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,\n\t        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,\n\t        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,\n\t          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,\n\t        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);\n\t    var _sr = WordArray.create([\n\t        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,\n\t        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,\n\t        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,\n\t        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,\n\t        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);\n\n\t    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);\n\t    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);\n\n\t    /**\n\t     * RIPEMD160 hash algorithm.\n\t     */\n\t    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\n\t            // Swap endian\n\t            for (var i = 0; i < 16; i++) {\n\t                // Shortcuts\n\t                var offset_i = offset + i;\n\t                var M_offset_i = M[offset_i];\n\n\t                // Swap\n\t                M[offset_i] = (\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n\t                );\n\t            }\n\t            // Shortcut\n\t            var H  = this._hash.words;\n\t            var hl = _hl.words;\n\t            var hr = _hr.words;\n\t            var zl = _zl.words;\n\t            var zr = _zr.words;\n\t            var sl = _sl.words;\n\t            var sr = _sr.words;\n\n\t            // Working variables\n\t            var al, bl, cl, dl, el;\n\t            var ar, br, cr, dr, er;\n\n\t            ar = al = H[0];\n\t            br = bl = H[1];\n\t            cr = cl = H[2];\n\t            dr = dl = H[3];\n\t            er = el = H[4];\n\t            // Computation\n\t            var t;\n\t            for (var i = 0; i < 80; i += 1) {\n\t                t = (al +  M[offset+zl[i]])|0;\n\t                if (i<16){\n\t\t            t +=  f1(bl,cl,dl) + hl[0];\n\t                } else if (i<32) {\n\t\t            t +=  f2(bl,cl,dl) + hl[1];\n\t                } else if (i<48) {\n\t\t            t +=  f3(bl,cl,dl) + hl[2];\n\t                } else if (i<64) {\n\t\t            t +=  f4(bl,cl,dl) + hl[3];\n\t                } else {// if (i<80) {\n\t\t            t +=  f5(bl,cl,dl) + hl[4];\n\t                }\n\t                t = t|0;\n\t                t =  rotl(t,sl[i]);\n\t                t = (t+el)|0;\n\t                al = el;\n\t                el = dl;\n\t                dl = rotl(cl, 10);\n\t                cl = bl;\n\t                bl = t;\n\n\t                t = (ar + M[offset+zr[i]])|0;\n\t                if (i<16){\n\t\t            t +=  f5(br,cr,dr) + hr[0];\n\t                } else if (i<32) {\n\t\t            t +=  f4(br,cr,dr) + hr[1];\n\t                } else if (i<48) {\n\t\t            t +=  f3(br,cr,dr) + hr[2];\n\t                } else if (i<64) {\n\t\t            t +=  f2(br,cr,dr) + hr[3];\n\t                } else {// if (i<80) {\n\t\t            t +=  f1(br,cr,dr) + hr[4];\n\t                }\n\t                t = t|0;\n\t                t =  rotl(t,sr[i]) ;\n\t                t = (t+er)|0;\n\t                ar = er;\n\t                er = dr;\n\t                dr = rotl(cr, 10);\n\t                cr = br;\n\t                br = t;\n\t            }\n\t            // Intermediate hash value\n\t            t    = (H[1] + cl + dr)|0;\n\t            H[1] = (H[2] + dl + er)|0;\n\t            H[2] = (H[3] + el + ar)|0;\n\t            H[3] = (H[4] + al + br)|0;\n\t            H[4] = (H[0] + bl + cr)|0;\n\t            H[0] =  t;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n\t                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)\n\t            );\n\t            data.sigBytes = (dataWords.length + 1) * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var hash = this._hash;\n\t            var H = hash.words;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 5; i++) {\n\t                // Shortcut\n\t                var H_i = H[i];\n\n\t                // Swap\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\n\t    function f1(x, y, z) {\n\t        return ((x) ^ (y) ^ (z));\n\n\t    }\n\n\t    function f2(x, y, z) {\n\t        return (((x)&(y)) | ((~x)&(z)));\n\t    }\n\n\t    function f3(x, y, z) {\n\t        return (((x) | (~(y))) ^ (z));\n\t    }\n\n\t    function f4(x, y, z) {\n\t        return (((x) & (z)) | ((y)&(~(z))));\n\t    }\n\n\t    function f5(x, y, z) {\n\t        return ((x) ^ ((y) |(~(z))));\n\n\t    }\n\n\t    function rotl(x,n) {\n\t        return (x<<n) | (x>>>(32-n));\n\t    }\n\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.RIPEMD160('message');\n\t     *     var hash = CryptoJS.RIPEMD160(wordArray);\n\t     */\n\t    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);\n\t     */\n\t    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);\n\t}(Math));\n\n\n\treturn CryptoJS.RIPEMD160;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/ripemd160.js\n// module id = 347\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA1 = C_algo.SHA1;\n\t    var HMAC = C_algo.HMAC;\n\n\t    /**\n\t     * Password-Based Key Derivation Function 2 algorithm.\n\t     */\n\t    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hasher to use. Default: SHA1\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: SHA1,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create();\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Computes the Password-Based Key Derivation Function 2.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init HMAC\n\t            var hmac = HMAC.create(cfg.hasher, password);\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\t            var blockIndex = WordArray.create([0x00000001]);\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var blockIndexWords = blockIndex.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                var block = hmac.update(salt).finalize(blockIndex);\n\t                hmac.reset();\n\n\t                // Shortcuts\n\t                var blockWords = block.words;\n\t                var blockWordsLength = blockWords.length;\n\n\t                // Iterations\n\t                var intermediate = block;\n\t                for (var i = 1; i < iterations; i++) {\n\t                    intermediate = hmac.finalize(intermediate);\n\t                    hmac.reset();\n\n\t                    // Shortcut\n\t                    var intermediateWords = intermediate.words;\n\n\t                    // XOR intermediate with block\n\t                    for (var j = 0; j < blockWordsLength; j++) {\n\t                        blockWords[j] ^= intermediateWords[j];\n\t                    }\n\t                }\n\n\t                derivedKey.concat(block);\n\t                blockIndexWords[0]++;\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Computes the Password-Based Key Derivation Function 2.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.PBKDF2(password, salt);\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.PBKDF2 = function (password, salt, cfg) {\n\t        return PBKDF2.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.PBKDF2;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/pbkdf2.js\n// module id = 348\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher Feedback block mode.\n\t */\n\tCryptoJS.mode.CFB = (function () {\n\t    var CFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    CFB.Encryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // Remember this block to use with next block\n\t            this._prevBlock = words.slice(offset, offset + blockSize);\n\t        }\n\t    });\n\n\t    CFB.Decryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            // Remember this block to use with next block\n\t            var thisBlock = words.slice(offset, offset + blockSize);\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // This block becomes the previous block\n\t            this._prevBlock = thisBlock;\n\t        }\n\t    });\n\n\t    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n\t        // Shortcut\n\t        var iv = this._iv;\n\n\t        // Generate keystream\n\t        if (iv) {\n\t            var keystream = iv.slice(0);\n\n\t            // Remove IV for subsequent blocks\n\t            this._iv = undefined;\n\t        } else {\n\t            var keystream = this._prevBlock;\n\t        }\n\t        cipher.encryptBlock(keystream, 0);\n\n\t        // Encrypt\n\t        for (var i = 0; i < blockSize; i++) {\n\t            words[offset + i] ^= keystream[i];\n\t        }\n\t    }\n\n\t    return CFB;\n\t}());\n\n\n\treturn CryptoJS.mode.CFB;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/mode-cfb.js\n// module id = 349\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Counter block mode.\n\t */\n\tCryptoJS.mode.CTR = (function () {\n\t    var CTR = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    var Encryptor = CTR.Encryptor = CTR.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\t            var keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Increment counter\n\t            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTR.Decryptor = Encryptor;\n\n\t    return CTR;\n\t}());\n\n\n\treturn CryptoJS.mode.CTR;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/mode-ctr.js\n// module id = 350\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/** @preserve\n\t * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n\t * derived from CryptoJS.mode.CTR\n\t * Jan Hruby jhruby.web@gmail.com\n\t */\n\tCryptoJS.mode.CTRGladman = (function () {\n\t    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();\n\n\t\tfunction incWord(word)\n\t\t{\n\t\t\tif (((word >> 24) & 0xff) === 0xff) { //overflow\n\t\t\tvar b1 = (word >> 16)&0xff;\n\t\t\tvar b2 = (word >> 8)&0xff;\n\t\t\tvar b3 = word & 0xff;\n\n\t\t\tif (b1 === 0xff) // overflow b1\n\t\t\t{\n\t\t\tb1 = 0;\n\t\t\tif (b2 === 0xff)\n\t\t\t{\n\t\t\t\tb2 = 0;\n\t\t\t\tif (b3 === 0xff)\n\t\t\t\t{\n\t\t\t\t\tb3 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t++b3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t++b2;\n\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t++b1;\n\t\t\t}\n\n\t\t\tword = 0;\n\t\t\tword += (b1 << 16);\n\t\t\tword += (b2 << 8);\n\t\t\tword += b3;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tword += (0x01 << 24);\n\t\t\t}\n\t\t\treturn word;\n\t\t}\n\n\t\tfunction incCounter(counter)\n\t\t{\n\t\t\tif ((counter[0] = incWord(counter[0])) === 0)\n\t\t\t{\n\t\t\t\t// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n\t\t\t\tcounter[1] = incWord(counter[1]);\n\t\t\t}\n\t\t\treturn counter;\n\t\t}\n\n\t    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\n\t\t\t\tincCounter(counter);\n\n\t\t\t\tvar keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTRGladman.Decryptor = Encryptor;\n\n\t    return CTRGladman;\n\t}());\n\n\n\n\n\treturn CryptoJS.mode.CTRGladman;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/mode-ctr-gladman.js\n// module id = 351\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Output Feedback block mode.\n\t */\n\tCryptoJS.mode.OFB = (function () {\n\t    var OFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    var Encryptor = OFB.Encryptor = OFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var keystream = this._keystream;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                keystream = this._keystream = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    OFB.Decryptor = Encryptor;\n\n\t    return OFB;\n\t}());\n\n\n\treturn CryptoJS.mode.OFB;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/mode-ofb.js\n// module id = 352\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Electronic Codebook block mode.\n\t */\n\tCryptoJS.mode.ECB = (function () {\n\t    var ECB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    ECB.Encryptor = ECB.extend({\n\t        processBlock: function (words, offset) {\n\t            this._cipher.encryptBlock(words, offset);\n\t        }\n\t    });\n\n\t    ECB.Decryptor = ECB.extend({\n\t        processBlock: function (words, offset) {\n\t            this._cipher.decryptBlock(words, offset);\n\t        }\n\t    });\n\n\t    return ECB;\n\t}());\n\n\n\treturn CryptoJS.mode.ECB;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/mode-ecb.js\n// module id = 353\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ANSI X.923 padding strategy.\n\t */\n\tCryptoJS.pad.AnsiX923 = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcuts\n\t        var dataSigBytes = data.sigBytes;\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Count padding bytes\n\t        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;\n\n\t        // Compute last byte position\n\t        var lastBytePos = dataSigBytes + nPaddingBytes - 1;\n\n\t        // Pad\n\t        data.clamp();\n\t        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);\n\t        data.sigBytes += nPaddingBytes;\n\t    },\n\n\t    unpad: function (data) {\n\t        // Get number of padding bytes from last byte\n\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t        // Remove padding\n\t        data.sigBytes -= nPaddingBytes;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Ansix923;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/pad-ansix923.js\n// module id = 354\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ISO 10126 padding strategy.\n\t */\n\tCryptoJS.pad.Iso10126 = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcut\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Count padding bytes\n\t        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t        // Pad\n\t        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).\n\t             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));\n\t    },\n\n\t    unpad: function (data) {\n\t        // Get number of padding bytes from last byte\n\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t        // Remove padding\n\t        data.sigBytes -= nPaddingBytes;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Iso10126;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/pad-iso10126.js\n// module id = 355\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ISO/IEC 9797-1 Padding Method 2.\n\t */\n\tCryptoJS.pad.Iso97971 = {\n\t    pad: function (data, blockSize) {\n\t        // Add 0x80 byte\n\t        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));\n\n\t        // Zero pad the rest\n\t        CryptoJS.pad.ZeroPadding.pad(data, blockSize);\n\t    },\n\n\t    unpad: function (data) {\n\t        // Remove zero padding\n\t        CryptoJS.pad.ZeroPadding.unpad(data);\n\n\t        // Remove one more byte -- the 0x80 byte\n\t        data.sigBytes--;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Iso97971;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/pad-iso97971.js\n// module id = 356\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Zero padding strategy.\n\t */\n\tCryptoJS.pad.ZeroPadding = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcut\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Pad\n\t        data.clamp();\n\t        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);\n\t    },\n\n\t    unpad: function (data) {\n\t        // Shortcut\n\t        var dataWords = data.words;\n\n\t        // Unpad\n\t        var i = data.sigBytes - 1;\n\t        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {\n\t            i--;\n\t        }\n\t        data.sigBytes = i + 1;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.ZeroPadding;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/pad-zeropadding.js\n// module id = 357\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * A noop padding strategy.\n\t */\n\tCryptoJS.pad.NoPadding = {\n\t    pad: function () {\n\t    },\n\n\t    unpad: function () {\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.NoPadding;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/pad-nopadding.js\n// module id = 358\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var CipherParams = C_lib.CipherParams;\n\t    var C_enc = C.enc;\n\t    var Hex = C_enc.Hex;\n\t    var C_format = C.format;\n\n\t    var HexFormatter = C_format.Hex = {\n\t        /**\n\t         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The hexadecimally encoded string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);\n\t         */\n\t        stringify: function (cipherParams) {\n\t            return cipherParams.ciphertext.toString(Hex);\n\t        },\n\n\t        /**\n\t         * Converts a hexadecimally encoded ciphertext string to a cipher params object.\n\t         *\n\t         * @param {string} input The hexadecimally encoded string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);\n\t         */\n\t        parse: function (input) {\n\t            var ciphertext = Hex.parse(input);\n\t            return CipherParams.create({ ciphertext: ciphertext });\n\t        }\n\t    };\n\t}());\n\n\n\treturn CryptoJS.format.Hex;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/format-hex.js\n// module id = 359\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var BlockCipher = C_lib.BlockCipher;\n\t    var C_algo = C.algo;\n\n\t    // Lookup tables\n\t    var SBOX = [];\n\t    var INV_SBOX = [];\n\t    var SUB_MIX_0 = [];\n\t    var SUB_MIX_1 = [];\n\t    var SUB_MIX_2 = [];\n\t    var SUB_MIX_3 = [];\n\t    var INV_SUB_MIX_0 = [];\n\t    var INV_SUB_MIX_1 = [];\n\t    var INV_SUB_MIX_2 = [];\n\t    var INV_SUB_MIX_3 = [];\n\n\t    // Compute lookup tables\n\t    (function () {\n\t        // Compute double table\n\t        var d = [];\n\t        for (var i = 0; i < 256; i++) {\n\t            if (i < 128) {\n\t                d[i] = i << 1;\n\t            } else {\n\t                d[i] = (i << 1) ^ 0x11b;\n\t            }\n\t        }\n\n\t        // Walk GF(2^8)\n\t        var x = 0;\n\t        var xi = 0;\n\t        for (var i = 0; i < 256; i++) {\n\t            // Compute sbox\n\t            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n\t            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n\t            SBOX[x] = sx;\n\t            INV_SBOX[sx] = x;\n\n\t            // Compute multiplication\n\t            var x2 = d[x];\n\t            var x4 = d[x2];\n\t            var x8 = d[x4];\n\n\t            // Compute sub bytes, mix columns tables\n\t            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n\t            SUB_MIX_0[x] = (t << 24) | (t >>> 8);\n\t            SUB_MIX_1[x] = (t << 16) | (t >>> 16);\n\t            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);\n\t            SUB_MIX_3[x] = t;\n\n\t            // Compute inv sub bytes, inv mix columns tables\n\t            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n\t            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\n\t            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\n\t            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);\n\t            INV_SUB_MIX_3[sx] = t;\n\n\t            // Compute next counter\n\t            if (!x) {\n\t                x = xi = 1;\n\t            } else {\n\t                x = x2 ^ d[d[d[x8 ^ x2]]];\n\t                xi ^= d[d[xi]];\n\t            }\n\t        }\n\t    }());\n\n\t    // Precomputed Rcon lookup\n\t    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n\t    /**\n\t     * AES block cipher algorithm.\n\t     */\n\t    var AES = C_algo.AES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Skip reset of nRounds has been set before and key did not change\n\t            if (this._nRounds && this._keyPriorReset === this._key) {\n\t                return;\n\t            }\n\n\t            // Shortcuts\n\t            var key = this._keyPriorReset = this._key;\n\t            var keyWords = key.words;\n\t            var keySize = key.sigBytes / 4;\n\n\t            // Compute number of rounds\n\t            var nRounds = this._nRounds = keySize + 6;\n\n\t            // Compute number of key schedule rows\n\t            var ksRows = (nRounds + 1) * 4;\n\n\t            // Compute key schedule\n\t            var keySchedule = this._keySchedule = [];\n\t            for (var ksRow = 0; ksRow < ksRows; ksRow++) {\n\t                if (ksRow < keySize) {\n\t                    keySchedule[ksRow] = keyWords[ksRow];\n\t                } else {\n\t                    var t = keySchedule[ksRow - 1];\n\n\t                    if (!(ksRow % keySize)) {\n\t                        // Rot word\n\t                        t = (t << 8) | (t >>> 24);\n\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\n\t                        // Mix Rcon\n\t                        t ^= RCON[(ksRow / keySize) | 0] << 24;\n\t                    } else if (keySize > 6 && ksRow % keySize == 4) {\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\t                    }\n\n\t                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n\t                }\n\t            }\n\n\t            // Compute inv key schedule\n\t            var invKeySchedule = this._invKeySchedule = [];\n\t            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n\t                var ksRow = ksRows - invKsRow;\n\n\t                if (invKsRow % 4) {\n\t                    var t = keySchedule[ksRow];\n\t                } else {\n\t                    var t = keySchedule[ksRow - 4];\n\t                }\n\n\t                if (invKsRow < 4 || ksRow <= 4) {\n\t                    invKeySchedule[invKsRow] = t;\n\t                } else {\n\t                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\n\t                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n\t                }\n\t            }\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            // Swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\n\t            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n\n\t            // Inv swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\t        },\n\n\t        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n\t            // Shortcut\n\t            var nRounds = this._nRounds;\n\n\t            // Get input, add round key\n\t            var s0 = M[offset]     ^ keySchedule[0];\n\t            var s1 = M[offset + 1] ^ keySchedule[1];\n\t            var s2 = M[offset + 2] ^ keySchedule[2];\n\t            var s3 = M[offset + 3] ^ keySchedule[3];\n\n\t            // Key schedule row counter\n\t            var ksRow = 4;\n\n\t            // Rounds\n\t            for (var round = 1; round < nRounds; round++) {\n\t                // Shift rows, sub bytes, mix columns, add round key\n\t                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];\n\t                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];\n\t                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];\n\t                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];\n\n\t                // Update state\n\t                s0 = t0;\n\t                s1 = t1;\n\t                s2 = t2;\n\t                s3 = t3;\n\t            }\n\n\t            // Shift rows, sub bytes, add round key\n\t            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n\n\t            // Set output\n\t            M[offset]     = t0;\n\t            M[offset + 1] = t1;\n\t            M[offset + 2] = t2;\n\t            M[offset + 3] = t3;\n\t        },\n\n\t        keySize: 256/32\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.AES = BlockCipher._createHelper(AES);\n\t}());\n\n\n\treturn CryptoJS.AES;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/aes.js\n// module id = 360\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var BlockCipher = C_lib.BlockCipher;\n\t    var C_algo = C.algo;\n\n\t    // Permuted Choice 1 constants\n\t    var PC1 = [\n\t        57, 49, 41, 33, 25, 17, 9,  1,\n\t        58, 50, 42, 34, 26, 18, 10, 2,\n\t        59, 51, 43, 35, 27, 19, 11, 3,\n\t        60, 52, 44, 36, 63, 55, 47, 39,\n\t        31, 23, 15, 7,  62, 54, 46, 38,\n\t        30, 22, 14, 6,  61, 53, 45, 37,\n\t        29, 21, 13, 5,  28, 20, 12, 4\n\t    ];\n\n\t    // Permuted Choice 2 constants\n\t    var PC2 = [\n\t        14, 17, 11, 24, 1,  5,\n\t        3,  28, 15, 6,  21, 10,\n\t        23, 19, 12, 4,  26, 8,\n\t        16, 7,  27, 20, 13, 2,\n\t        41, 52, 31, 37, 47, 55,\n\t        30, 40, 51, 45, 33, 48,\n\t        44, 49, 39, 56, 34, 53,\n\t        46, 42, 50, 36, 29, 32\n\t    ];\n\n\t    // Cumulative bit shift constants\n\t    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];\n\n\t    // SBOXes and round permutation constants\n\t    var SBOX_P = [\n\t        {\n\t            0x0: 0x808200,\n\t            0x10000000: 0x8000,\n\t            0x20000000: 0x808002,\n\t            0x30000000: 0x2,\n\t            0x40000000: 0x200,\n\t            0x50000000: 0x808202,\n\t            0x60000000: 0x800202,\n\t            0x70000000: 0x800000,\n\t            0x80000000: 0x202,\n\t            0x90000000: 0x800200,\n\t            0xa0000000: 0x8200,\n\t            0xb0000000: 0x808000,\n\t            0xc0000000: 0x8002,\n\t            0xd0000000: 0x800002,\n\t            0xe0000000: 0x0,\n\t            0xf0000000: 0x8202,\n\t            0x8000000: 0x0,\n\t            0x18000000: 0x808202,\n\t            0x28000000: 0x8202,\n\t            0x38000000: 0x8000,\n\t            0x48000000: 0x808200,\n\t            0x58000000: 0x200,\n\t            0x68000000: 0x808002,\n\t            0x78000000: 0x2,\n\t            0x88000000: 0x800200,\n\t            0x98000000: 0x8200,\n\t            0xa8000000: 0x808000,\n\t            0xb8000000: 0x800202,\n\t            0xc8000000: 0x800002,\n\t            0xd8000000: 0x8002,\n\t            0xe8000000: 0x202,\n\t            0xf8000000: 0x800000,\n\t            0x1: 0x8000,\n\t            0x10000001: 0x2,\n\t            0x20000001: 0x808200,\n\t            0x30000001: 0x800000,\n\t            0x40000001: 0x808002,\n\t            0x50000001: 0x8200,\n\t            0x60000001: 0x200,\n\t            0x70000001: 0x800202,\n\t            0x80000001: 0x808202,\n\t            0x90000001: 0x808000,\n\t            0xa0000001: 0x800002,\n\t            0xb0000001: 0x8202,\n\t            0xc0000001: 0x202,\n\t            0xd0000001: 0x800200,\n\t            0xe0000001: 0x8002,\n\t            0xf0000001: 0x0,\n\t            0x8000001: 0x808202,\n\t            0x18000001: 0x808000,\n\t            0x28000001: 0x800000,\n\t            0x38000001: 0x200,\n\t            0x48000001: 0x8000,\n\t            0x58000001: 0x800002,\n\t            0x68000001: 0x2,\n\t            0x78000001: 0x8202,\n\t            0x88000001: 0x8002,\n\t            0x98000001: 0x800202,\n\t            0xa8000001: 0x202,\n\t            0xb8000001: 0x808200,\n\t            0xc8000001: 0x800200,\n\t            0xd8000001: 0x0,\n\t            0xe8000001: 0x8200,\n\t            0xf8000001: 0x808002\n\t        },\n\t        {\n\t            0x0: 0x40084010,\n\t            0x1000000: 0x4000,\n\t            0x2000000: 0x80000,\n\t            0x3000000: 0x40080010,\n\t            0x4000000: 0x40000010,\n\t            0x5000000: 0x40084000,\n\t            0x6000000: 0x40004000,\n\t            0x7000000: 0x10,\n\t            0x8000000: 0x84000,\n\t            0x9000000: 0x40004010,\n\t            0xa000000: 0x40000000,\n\t            0xb000000: 0x84010,\n\t            0xc000000: 0x80010,\n\t            0xd000000: 0x0,\n\t            0xe000000: 0x4010,\n\t            0xf000000: 0x40080000,\n\t            0x800000: 0x40004000,\n\t            0x1800000: 0x84010,\n\t            0x2800000: 0x10,\n\t            0x3800000: 0x40004010,\n\t            0x4800000: 0x40084010,\n\t            0x5800000: 0x40000000,\n\t            0x6800000: 0x80000,\n\t            0x7800000: 0x40080010,\n\t            0x8800000: 0x80010,\n\t            0x9800000: 0x0,\n\t            0xa800000: 0x4000,\n\t            0xb800000: 0x40080000,\n\t            0xc800000: 0x40000010,\n\t            0xd800000: 0x84000,\n\t            0xe800000: 0x40084000,\n\t            0xf800000: 0x4010,\n\t            0x10000000: 0x0,\n\t            0x11000000: 0x40080010,\n\t            0x12000000: 0x40004010,\n\t            0x13000000: 0x40084000,\n\t            0x14000000: 0x40080000,\n\t            0x15000000: 0x10,\n\t            0x16000000: 0x84010,\n\t            0x17000000: 0x4000,\n\t            0x18000000: 0x4010,\n\t            0x19000000: 0x80000,\n\t            0x1a000000: 0x80010,\n\t            0x1b000000: 0x40000010,\n\t            0x1c000000: 0x84000,\n\t            0x1d000000: 0x40004000,\n\t            0x1e000000: 0x40000000,\n\t            0x1f000000: 0x40084010,\n\t            0x10800000: 0x84010,\n\t            0x11800000: 0x80000,\n\t            0x12800000: 0x40080000,\n\t            0x13800000: 0x4000,\n\t            0x14800000: 0x40004000,\n\t            0x15800000: 0x40084010,\n\t            0x16800000: 0x10,\n\t            0x17800000: 0x40000000,\n\t            0x18800000: 0x40084000,\n\t            0x19800000: 0x40000010,\n\t            0x1a800000: 0x40004010,\n\t            0x1b800000: 0x80010,\n\t            0x1c800000: 0x0,\n\t            0x1d800000: 0x4010,\n\t            0x1e800000: 0x40080010,\n\t            0x1f800000: 0x84000\n\t        },\n\t        {\n\t            0x0: 0x104,\n\t            0x100000: 0x0,\n\t            0x200000: 0x4000100,\n\t            0x300000: 0x10104,\n\t            0x400000: 0x10004,\n\t            0x500000: 0x4000004,\n\t            0x600000: 0x4010104,\n\t            0x700000: 0x4010000,\n\t            0x800000: 0x4000000,\n\t            0x900000: 0x4010100,\n\t            0xa00000: 0x10100,\n\t            0xb00000: 0x4010004,\n\t            0xc00000: 0x4000104,\n\t            0xd00000: 0x10000,\n\t            0xe00000: 0x4,\n\t            0xf00000: 0x100,\n\t            0x80000: 0x4010100,\n\t            0x180000: 0x4010004,\n\t            0x280000: 0x0,\n\t            0x380000: 0x4000100,\n\t            0x480000: 0x4000004,\n\t            0x580000: 0x10000,\n\t            0x680000: 0x10004,\n\t            0x780000: 0x104,\n\t            0x880000: 0x4,\n\t            0x980000: 0x100,\n\t            0xa80000: 0x4010000,\n\t            0xb80000: 0x10104,\n\t            0xc80000: 0x10100,\n\t            0xd80000: 0x4000104,\n\t            0xe80000: 0x4010104,\n\t            0xf80000: 0x4000000,\n\t            0x1000000: 0x4010100,\n\t            0x1100000: 0x10004,\n\t            0x1200000: 0x10000,\n\t            0x1300000: 0x4000100,\n\t            0x1400000: 0x100,\n\t            0x1500000: 0x4010104,\n\t            0x1600000: 0x4000004,\n\t            0x1700000: 0x0,\n\t            0x1800000: 0x4000104,\n\t            0x1900000: 0x4000000,\n\t            0x1a00000: 0x4,\n\t            0x1b00000: 0x10100,\n\t            0x1c00000: 0x4010000,\n\t            0x1d00000: 0x104,\n\t            0x1e00000: 0x10104,\n\t            0x1f00000: 0x4010004,\n\t            0x1080000: 0x4000000,\n\t            0x1180000: 0x104,\n\t            0x1280000: 0x4010100,\n\t            0x1380000: 0x0,\n\t            0x1480000: 0x10004,\n\t            0x1580000: 0x4000100,\n\t            0x1680000: 0x100,\n\t            0x1780000: 0x4010004,\n\t            0x1880000: 0x10000,\n\t            0x1980000: 0x4010104,\n\t            0x1a80000: 0x10104,\n\t            0x1b80000: 0x4000004,\n\t            0x1c80000: 0x4000104,\n\t            0x1d80000: 0x4010000,\n\t            0x1e80000: 0x4,\n\t            0x1f80000: 0x10100\n\t        },\n\t        {\n\t            0x0: 0x80401000,\n\t            0x10000: 0x80001040,\n\t            0x20000: 0x401040,\n\t            0x30000: 0x80400000,\n\t            0x40000: 0x0,\n\t            0x50000: 0x401000,\n\t            0x60000: 0x80000040,\n\t            0x70000: 0x400040,\n\t            0x80000: 0x80000000,\n\t            0x90000: 0x400000,\n\t            0xa0000: 0x40,\n\t            0xb0000: 0x80001000,\n\t            0xc0000: 0x80400040,\n\t            0xd0000: 0x1040,\n\t            0xe0000: 0x1000,\n\t            0xf0000: 0x80401040,\n\t            0x8000: 0x80001040,\n\t            0x18000: 0x40,\n\t            0x28000: 0x80400040,\n\t            0x38000: 0x80001000,\n\t            0x48000: 0x401000,\n\t            0x58000: 0x80401040,\n\t            0x68000: 0x0,\n\t            0x78000: 0x80400000,\n\t            0x88000: 0x1000,\n\t            0x98000: 0x80401000,\n\t            0xa8000: 0x400000,\n\t            0xb8000: 0x1040,\n\t            0xc8000: 0x80000000,\n\t            0xd8000: 0x400040,\n\t            0xe8000: 0x401040,\n\t            0xf8000: 0x80000040,\n\t            0x100000: 0x400040,\n\t            0x110000: 0x401000,\n\t            0x120000: 0x80000040,\n\t            0x130000: 0x0,\n\t            0x140000: 0x1040,\n\t            0x150000: 0x80400040,\n\t            0x160000: 0x80401000,\n\t            0x170000: 0x80001040,\n\t            0x180000: 0x80401040,\n\t            0x190000: 0x80000000,\n\t            0x1a0000: 0x80400000,\n\t            0x1b0000: 0x401040,\n\t            0x1c0000: 0x80001000,\n\t            0x1d0000: 0x400000,\n\t            0x1e0000: 0x40,\n\t            0x1f0000: 0x1000,\n\t            0x108000: 0x80400000,\n\t            0x118000: 0x80401040,\n\t            0x128000: 0x0,\n\t            0x138000: 0x401000,\n\t            0x148000: 0x400040,\n\t            0x158000: 0x80000000,\n\t            0x168000: 0x80001040,\n\t            0x178000: 0x40,\n\t            0x188000: 0x80000040,\n\t            0x198000: 0x1000,\n\t            0x1a8000: 0x80001000,\n\t            0x1b8000: 0x80400040,\n\t            0x1c8000: 0x1040,\n\t            0x1d8000: 0x80401000,\n\t            0x1e8000: 0x400000,\n\t            0x1f8000: 0x401040\n\t        },\n\t        {\n\t            0x0: 0x80,\n\t            0x1000: 0x1040000,\n\t            0x2000: 0x40000,\n\t            0x3000: 0x20000000,\n\t            0x4000: 0x20040080,\n\t            0x5000: 0x1000080,\n\t            0x6000: 0x21000080,\n\t            0x7000: 0x40080,\n\t            0x8000: 0x1000000,\n\t            0x9000: 0x20040000,\n\t            0xa000: 0x20000080,\n\t            0xb000: 0x21040080,\n\t            0xc000: 0x21040000,\n\t            0xd000: 0x0,\n\t            0xe000: 0x1040080,\n\t            0xf000: 0x21000000,\n\t            0x800: 0x1040080,\n\t            0x1800: 0x21000080,\n\t            0x2800: 0x80,\n\t            0x3800: 0x1040000,\n\t            0x4800: 0x40000,\n\t            0x5800: 0x20040080,\n\t            0x6800: 0x21040000,\n\t            0x7800: 0x20000000,\n\t            0x8800: 0x20040000,\n\t            0x9800: 0x0,\n\t            0xa800: 0x21040080,\n\t            0xb800: 0x1000080,\n\t            0xc800: 0x20000080,\n\t            0xd800: 0x21000000,\n\t            0xe800: 0x1000000,\n\t            0xf800: 0x40080,\n\t            0x10000: 0x40000,\n\t            0x11000: 0x80,\n\t            0x12000: 0x20000000,\n\t            0x13000: 0x21000080,\n\t            0x14000: 0x1000080,\n\t            0x15000: 0x21040000,\n\t            0x16000: 0x20040080,\n\t            0x17000: 0x1000000,\n\t            0x18000: 0x21040080,\n\t            0x19000: 0x21000000,\n\t            0x1a000: 0x1040000,\n\t            0x1b000: 0x20040000,\n\t            0x1c000: 0x40080,\n\t            0x1d000: 0x20000080,\n\t            0x1e000: 0x0,\n\t            0x1f000: 0x1040080,\n\t            0x10800: 0x21000080,\n\t            0x11800: 0x1000000,\n\t            0x12800: 0x1040000,\n\t            0x13800: 0x20040080,\n\t            0x14800: 0x20000000,\n\t            0x15800: 0x1040080,\n\t            0x16800: 0x80,\n\t            0x17800: 0x21040000,\n\t            0x18800: 0x40080,\n\t            0x19800: 0x21040080,\n\t            0x1a800: 0x0,\n\t            0x1b800: 0x21000000,\n\t            0x1c800: 0x1000080,\n\t            0x1d800: 0x40000,\n\t            0x1e800: 0x20040000,\n\t            0x1f800: 0x20000080\n\t        },\n\t        {\n\t            0x0: 0x10000008,\n\t            0x100: 0x2000,\n\t            0x200: 0x10200000,\n\t            0x300: 0x10202008,\n\t            0x400: 0x10002000,\n\t            0x500: 0x200000,\n\t            0x600: 0x200008,\n\t            0x700: 0x10000000,\n\t            0x800: 0x0,\n\t            0x900: 0x10002008,\n\t            0xa00: 0x202000,\n\t            0xb00: 0x8,\n\t            0xc00: 0x10200008,\n\t            0xd00: 0x202008,\n\t            0xe00: 0x2008,\n\t            0xf00: 0x10202000,\n\t            0x80: 0x10200000,\n\t            0x180: 0x10202008,\n\t            0x280: 0x8,\n\t            0x380: 0x200000,\n\t            0x480: 0x202008,\n\t            0x580: 0x10000008,\n\t            0x680: 0x10002000,\n\t            0x780: 0x2008,\n\t            0x880: 0x200008,\n\t            0x980: 0x2000,\n\t            0xa80: 0x10002008,\n\t            0xb80: 0x10200008,\n\t            0xc80: 0x0,\n\t            0xd80: 0x10202000,\n\t            0xe80: 0x202000,\n\t            0xf80: 0x10000000,\n\t            0x1000: 0x10002000,\n\t            0x1100: 0x10200008,\n\t            0x1200: 0x10202008,\n\t            0x1300: 0x2008,\n\t            0x1400: 0x200000,\n\t            0x1500: 0x10000000,\n\t            0x1600: 0x10000008,\n\t            0x1700: 0x202000,\n\t            0x1800: 0x202008,\n\t            0x1900: 0x0,\n\t            0x1a00: 0x8,\n\t            0x1b00: 0x10200000,\n\t            0x1c00: 0x2000,\n\t            0x1d00: 0x10002008,\n\t            0x1e00: 0x10202000,\n\t            0x1f00: 0x200008,\n\t            0x1080: 0x8,\n\t            0x1180: 0x202000,\n\t            0x1280: 0x200000,\n\t            0x1380: 0x10000008,\n\t            0x1480: 0x10002000,\n\t            0x1580: 0x2008,\n\t            0x1680: 0x10202008,\n\t            0x1780: 0x10200000,\n\t            0x1880: 0x10202000,\n\t            0x1980: 0x10200008,\n\t            0x1a80: 0x2000,\n\t            0x1b80: 0x202008,\n\t            0x1c80: 0x200008,\n\t            0x1d80: 0x0,\n\t            0x1e80: 0x10000000,\n\t            0x1f80: 0x10002008\n\t        },\n\t        {\n\t            0x0: 0x100000,\n\t            0x10: 0x2000401,\n\t            0x20: 0x400,\n\t            0x30: 0x100401,\n\t            0x40: 0x2100401,\n\t            0x50: 0x0,\n\t            0x60: 0x1,\n\t            0x70: 0x2100001,\n\t            0x80: 0x2000400,\n\t            0x90: 0x100001,\n\t            0xa0: 0x2000001,\n\t            0xb0: 0x2100400,\n\t            0xc0: 0x2100000,\n\t            0xd0: 0x401,\n\t            0xe0: 0x100400,\n\t            0xf0: 0x2000000,\n\t            0x8: 0x2100001,\n\t            0x18: 0x0,\n\t            0x28: 0x2000401,\n\t            0x38: 0x2100400,\n\t            0x48: 0x100000,\n\t            0x58: 0x2000001,\n\t            0x68: 0x2000000,\n\t            0x78: 0x401,\n\t            0x88: 0x100401,\n\t            0x98: 0x2000400,\n\t            0xa8: 0x2100000,\n\t            0xb8: 0x100001,\n\t            0xc8: 0x400,\n\t            0xd8: 0x2100401,\n\t            0xe8: 0x1,\n\t            0xf8: 0x100400,\n\t            0x100: 0x2000000,\n\t            0x110: 0x100000,\n\t            0x120: 0x2000401,\n\t            0x130: 0x2100001,\n\t            0x140: 0x100001,\n\t            0x150: 0x2000400,\n\t            0x160: 0x2100400,\n\t            0x170: 0x100401,\n\t            0x180: 0x401,\n\t            0x190: 0x2100401,\n\t            0x1a0: 0x100400,\n\t            0x1b0: 0x1,\n\t            0x1c0: 0x0,\n\t            0x1d0: 0x2100000,\n\t            0x1e0: 0x2000001,\n\t            0x1f0: 0x400,\n\t            0x108: 0x100400,\n\t            0x118: 0x2000401,\n\t            0x128: 0x2100001,\n\t            0x138: 0x1,\n\t            0x148: 0x2000000,\n\t            0x158: 0x100000,\n\t            0x168: 0x401,\n\t            0x178: 0x2100400,\n\t            0x188: 0x2000001,\n\t            0x198: 0x2100000,\n\t            0x1a8: 0x0,\n\t            0x1b8: 0x2100401,\n\t            0x1c8: 0x100401,\n\t            0x1d8: 0x400,\n\t            0x1e8: 0x2000400,\n\t            0x1f8: 0x100001\n\t        },\n\t        {\n\t            0x0: 0x8000820,\n\t            0x1: 0x20000,\n\t            0x2: 0x8000000,\n\t            0x3: 0x20,\n\t            0x4: 0x20020,\n\t            0x5: 0x8020820,\n\t            0x6: 0x8020800,\n\t            0x7: 0x800,\n\t            0x8: 0x8020000,\n\t            0x9: 0x8000800,\n\t            0xa: 0x20800,\n\t            0xb: 0x8020020,\n\t            0xc: 0x820,\n\t            0xd: 0x0,\n\t            0xe: 0x8000020,\n\t            0xf: 0x20820,\n\t            0x80000000: 0x800,\n\t            0x80000001: 0x8020820,\n\t            0x80000002: 0x8000820,\n\t            0x80000003: 0x8000000,\n\t            0x80000004: 0x8020000,\n\t            0x80000005: 0x20800,\n\t            0x80000006: 0x20820,\n\t            0x80000007: 0x20,\n\t            0x80000008: 0x8000020,\n\t            0x80000009: 0x820,\n\t            0x8000000a: 0x20020,\n\t            0x8000000b: 0x8020800,\n\t            0x8000000c: 0x0,\n\t            0x8000000d: 0x8020020,\n\t            0x8000000e: 0x8000800,\n\t            0x8000000f: 0x20000,\n\t            0x10: 0x20820,\n\t            0x11: 0x8020800,\n\t            0x12: 0x20,\n\t            0x13: 0x800,\n\t            0x14: 0x8000800,\n\t            0x15: 0x8000020,\n\t            0x16: 0x8020020,\n\t            0x17: 0x20000,\n\t            0x18: 0x0,\n\t            0x19: 0x20020,\n\t            0x1a: 0x8020000,\n\t            0x1b: 0x8000820,\n\t            0x1c: 0x8020820,\n\t            0x1d: 0x20800,\n\t            0x1e: 0x820,\n\t            0x1f: 0x8000000,\n\t            0x80000010: 0x20000,\n\t            0x80000011: 0x800,\n\t            0x80000012: 0x8020020,\n\t            0x80000013: 0x20820,\n\t            0x80000014: 0x20,\n\t            0x80000015: 0x8020000,\n\t            0x80000016: 0x8000000,\n\t            0x80000017: 0x8000820,\n\t            0x80000018: 0x8020820,\n\t            0x80000019: 0x8000020,\n\t            0x8000001a: 0x8000800,\n\t            0x8000001b: 0x0,\n\t            0x8000001c: 0x20800,\n\t            0x8000001d: 0x820,\n\t            0x8000001e: 0x20020,\n\t            0x8000001f: 0x8020800\n\t        }\n\t    ];\n\n\t    // Masks that select the SBOX input\n\t    var SBOX_MASK = [\n\t        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,\n\t        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f\n\t    ];\n\n\t    /**\n\t     * DES block cipher algorithm.\n\t     */\n\t    var DES = C_algo.DES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\n\t            // Select 56 bits according to PC1\n\t            var keyBits = [];\n\t            for (var i = 0; i < 56; i++) {\n\t                var keyBitPos = PC1[i] - 1;\n\t                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;\n\t            }\n\n\t            // Assemble 16 subkeys\n\t            var subKeys = this._subKeys = [];\n\t            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {\n\t                // Create subkey\n\t                var subKey = subKeys[nSubKey] = [];\n\n\t                // Shortcut\n\t                var bitShift = BIT_SHIFTS[nSubKey];\n\n\t                // Select 48 bits according to PC2\n\t                for (var i = 0; i < 24; i++) {\n\t                    // Select from the left 28 key bits\n\t                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);\n\n\t                    // Select from the right 28 key bits\n\t                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);\n\t                }\n\n\t                // Since each subkey is applied to an expanded 32-bit input,\n\t                // the subkey can be broken into 8 values scaled to 32-bits,\n\t                // which allows the key to be used without expansion\n\t                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);\n\t                for (var i = 1; i < 7; i++) {\n\t                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);\n\t                }\n\t                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);\n\t            }\n\n\t            // Compute inverse subkeys\n\t            var invSubKeys = this._invSubKeys = [];\n\t            for (var i = 0; i < 16; i++) {\n\t                invSubKeys[i] = subKeys[15 - i];\n\t            }\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._subKeys);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._invSubKeys);\n\t        },\n\n\t        _doCryptBlock: function (M, offset, subKeys) {\n\t            // Get input\n\t            this._lBlock = M[offset];\n\t            this._rBlock = M[offset + 1];\n\n\t            // Initial permutation\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);\n\t            exchangeLR.call(this, 16, 0x0000ffff);\n\t            exchangeRL.call(this, 2,  0x33333333);\n\t            exchangeRL.call(this, 8,  0x00ff00ff);\n\t            exchangeLR.call(this, 1,  0x55555555);\n\n\t            // Rounds\n\t            for (var round = 0; round < 16; round++) {\n\t                // Shortcuts\n\t                var subKey = subKeys[round];\n\t                var lBlock = this._lBlock;\n\t                var rBlock = this._rBlock;\n\n\t                // Feistel function\n\t                var f = 0;\n\t                for (var i = 0; i < 8; i++) {\n\t                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];\n\t                }\n\t                this._lBlock = rBlock;\n\t                this._rBlock = lBlock ^ f;\n\t            }\n\n\t            // Undo swap from last round\n\t            var t = this._lBlock;\n\t            this._lBlock = this._rBlock;\n\t            this._rBlock = t;\n\n\t            // Final permutation\n\t            exchangeLR.call(this, 1,  0x55555555);\n\t            exchangeRL.call(this, 8,  0x00ff00ff);\n\t            exchangeRL.call(this, 2,  0x33333333);\n\t            exchangeLR.call(this, 16, 0x0000ffff);\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);\n\n\t            // Set output\n\t            M[offset] = this._lBlock;\n\t            M[offset + 1] = this._rBlock;\n\t        },\n\n\t        keySize: 64/32,\n\n\t        ivSize: 64/32,\n\n\t        blockSize: 64/32\n\t    });\n\n\t    // Swap bits across the left and right words\n\t    function exchangeLR(offset, mask) {\n\t        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;\n\t        this._rBlock ^= t;\n\t        this._lBlock ^= t << offset;\n\t    }\n\n\t    function exchangeRL(offset, mask) {\n\t        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;\n\t        this._lBlock ^= t;\n\t        this._rBlock ^= t << offset;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.DES = BlockCipher._createHelper(DES);\n\n\t    /**\n\t     * Triple-DES block cipher algorithm.\n\t     */\n\t    var TripleDES = C_algo.TripleDES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\n\t            // Create DES instances\n\t            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));\n\t            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));\n\t            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._des1.encryptBlock(M, offset);\n\t            this._des2.decryptBlock(M, offset);\n\t            this._des3.encryptBlock(M, offset);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            this._des3.decryptBlock(M, offset);\n\t            this._des2.encryptBlock(M, offset);\n\t            this._des1.decryptBlock(M, offset);\n\t        },\n\n\t        keySize: 192/32,\n\n\t        ivSize: 64/32,\n\n\t        blockSize: 64/32\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.TripleDES = BlockCipher._createHelper(TripleDES);\n\t}());\n\n\n\treturn CryptoJS.TripleDES;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/tripledes.js\n// module id = 361\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var StreamCipher = C_lib.StreamCipher;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * RC4 stream cipher algorithm.\n\t     */\n\t    var RC4 = C_algo.RC4 = StreamCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\t            var keySigBytes = key.sigBytes;\n\n\t            // Init sbox\n\t            var S = this._S = [];\n\t            for (var i = 0; i < 256; i++) {\n\t                S[i] = i;\n\t            }\n\n\t            // Key setup\n\t            for (var i = 0, j = 0; i < 256; i++) {\n\t                var keyByteIndex = i % keySigBytes;\n\t                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;\n\n\t                j = (j + S[i] + keyByte) % 256;\n\n\t                // Swap\n\t                var t = S[i];\n\t                S[i] = S[j];\n\t                S[j] = t;\n\t            }\n\n\t            // Counters\n\t            this._i = this._j = 0;\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            M[offset] ^= generateKeystreamWord.call(this);\n\t        },\n\n\t        keySize: 256/32,\n\n\t        ivSize: 0\n\t    });\n\n\t    function generateKeystreamWord() {\n\t        // Shortcuts\n\t        var S = this._S;\n\t        var i = this._i;\n\t        var j = this._j;\n\n\t        // Generate keystream word\n\t        var keystreamWord = 0;\n\t        for (var n = 0; n < 4; n++) {\n\t            i = (i + 1) % 256;\n\t            j = (j + S[i]) % 256;\n\n\t            // Swap\n\t            var t = S[i];\n\t            S[i] = S[j];\n\t            S[j] = t;\n\n\t            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);\n\t        }\n\n\t        // Update counters\n\t        this._i = i;\n\t        this._j = j;\n\n\t        return keystreamWord;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.RC4 = StreamCipher._createHelper(RC4);\n\n\t    /**\n\t     * Modified RC4 stream cipher algorithm.\n\t     */\n\t    var RC4Drop = C_algo.RC4Drop = RC4.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} drop The number of keystream words to drop. Default 192\n\t         */\n\t        cfg: RC4.cfg.extend({\n\t            drop: 192\n\t        }),\n\n\t        _doReset: function () {\n\t            RC4._doReset.call(this);\n\n\t            // Drop\n\t            for (var i = this.cfg.drop; i > 0; i--) {\n\t                generateKeystreamWord.call(this);\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.RC4Drop = StreamCipher._createHelper(RC4Drop);\n\t}());\n\n\n\treturn CryptoJS.RC4;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/rc4.js\n// module id = 362\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var StreamCipher = C_lib.StreamCipher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable objects\n\t    var S  = [];\n\t    var C_ = [];\n\t    var G  = [];\n\n\t    /**\n\t     * Rabbit stream cipher algorithm\n\t     */\n\t    var Rabbit = C_algo.Rabbit = StreamCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var K = this._key.words;\n\t            var iv = this.cfg.iv;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 4; i++) {\n\t                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |\n\t                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Generate initial state values\n\t            var X = this._X = [\n\t                K[0], (K[3] << 16) | (K[2] >>> 16),\n\t                K[1], (K[0] << 16) | (K[3] >>> 16),\n\t                K[2], (K[1] << 16) | (K[0] >>> 16),\n\t                K[3], (K[2] << 16) | (K[1] >>> 16)\n\t            ];\n\n\t            // Generate initial counter values\n\t            var C = this._C = [\n\t                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),\n\t                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),\n\t                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),\n\t                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)\n\t            ];\n\n\t            // Carry bit\n\t            this._b = 0;\n\n\t            // Iterate the system four times\n\t            for (var i = 0; i < 4; i++) {\n\t                nextState.call(this);\n\t            }\n\n\t            // Modify the counters\n\t            for (var i = 0; i < 8; i++) {\n\t                C[i] ^= X[(i + 4) & 7];\n\t            }\n\n\t            // IV setup\n\t            if (iv) {\n\t                // Shortcuts\n\t                var IV = iv.words;\n\t                var IV_0 = IV[0];\n\t                var IV_1 = IV[1];\n\n\t                // Generate four subvectors\n\t                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);\n\t                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);\n\t                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);\n\t                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);\n\n\t                // Modify counter values\n\t                C[0] ^= i0;\n\t                C[1] ^= i1;\n\t                C[2] ^= i2;\n\t                C[3] ^= i3;\n\t                C[4] ^= i0;\n\t                C[5] ^= i1;\n\t                C[6] ^= i2;\n\t                C[7] ^= i3;\n\n\t                // Iterate the system four times\n\t                for (var i = 0; i < 4; i++) {\n\t                    nextState.call(this);\n\t                }\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var X = this._X;\n\n\t            // Iterate the system\n\t            nextState.call(this);\n\n\t            // Generate four keystream words\n\t            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);\n\t            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);\n\t            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);\n\t            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);\n\n\t            for (var i = 0; i < 4; i++) {\n\t                // Swap endian\n\t                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |\n\t                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);\n\n\t                // Encrypt\n\t                M[offset + i] ^= S[i];\n\t            }\n\t        },\n\n\t        blockSize: 128/32,\n\n\t        ivSize: 64/32\n\t    });\n\n\t    function nextState() {\n\t        // Shortcuts\n\t        var X = this._X;\n\t        var C = this._C;\n\n\t        // Save old counter values\n\t        for (var i = 0; i < 8; i++) {\n\t            C_[i] = C[i];\n\t        }\n\n\t        // Calculate new counter values\n\t        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;\n\t        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;\n\t        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;\n\t        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;\n\t        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;\n\t        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;\n\t        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;\n\t        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;\n\t        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;\n\n\t        // Calculate the g-values\n\t        for (var i = 0; i < 8; i++) {\n\t            var gx = X[i] + C[i];\n\n\t            // Construct high and low argument for squaring\n\t            var ga = gx & 0xffff;\n\t            var gb = gx >>> 16;\n\n\t            // Calculate high and low result of squaring\n\t            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;\n\t            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);\n\n\t            // High XOR low\n\t            G[i] = gh ^ gl;\n\t        }\n\n\t        // Calculate new state values\n\t        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;\n\t        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;\n\t        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;\n\t        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;\n\t        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;\n\t        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;\n\t        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;\n\t        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.Rabbit = StreamCipher._createHelper(Rabbit);\n\t}());\n\n\n\treturn CryptoJS.Rabbit;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/rabbit.js\n// module id = 363\n// module chunks = 0",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var StreamCipher = C_lib.StreamCipher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable objects\n\t    var S  = [];\n\t    var C_ = [];\n\t    var G  = [];\n\n\t    /**\n\t     * Rabbit stream cipher algorithm.\n\t     *\n\t     * This is a legacy version that neglected to convert the key to little-endian.\n\t     * This error doesn't affect the cipher's security,\n\t     * but it does affect its compatibility with other implementations.\n\t     */\n\t    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var K = this._key.words;\n\t            var iv = this.cfg.iv;\n\n\t            // Generate initial state values\n\t            var X = this._X = [\n\t                K[0], (K[3] << 16) | (K[2] >>> 16),\n\t                K[1], (K[0] << 16) | (K[3] >>> 16),\n\t                K[2], (K[1] << 16) | (K[0] >>> 16),\n\t                K[3], (K[2] << 16) | (K[1] >>> 16)\n\t            ];\n\n\t            // Generate initial counter values\n\t            var C = this._C = [\n\t                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),\n\t                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),\n\t                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),\n\t                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)\n\t            ];\n\n\t            // Carry bit\n\t            this._b = 0;\n\n\t            // Iterate the system four times\n\t            for (var i = 0; i < 4; i++) {\n\t                nextState.call(this);\n\t            }\n\n\t            // Modify the counters\n\t            for (var i = 0; i < 8; i++) {\n\t                C[i] ^= X[(i + 4) & 7];\n\t            }\n\n\t            // IV setup\n\t            if (iv) {\n\t                // Shortcuts\n\t                var IV = iv.words;\n\t                var IV_0 = IV[0];\n\t                var IV_1 = IV[1];\n\n\t                // Generate four subvectors\n\t                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);\n\t                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);\n\t                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);\n\t                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);\n\n\t                // Modify counter values\n\t                C[0] ^= i0;\n\t                C[1] ^= i1;\n\t                C[2] ^= i2;\n\t                C[3] ^= i3;\n\t                C[4] ^= i0;\n\t                C[5] ^= i1;\n\t                C[6] ^= i2;\n\t                C[7] ^= i3;\n\n\t                // Iterate the system four times\n\t                for (var i = 0; i < 4; i++) {\n\t                    nextState.call(this);\n\t                }\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var X = this._X;\n\n\t            // Iterate the system\n\t            nextState.call(this);\n\n\t            // Generate four keystream words\n\t            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);\n\t            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);\n\t            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);\n\t            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);\n\n\t            for (var i = 0; i < 4; i++) {\n\t                // Swap endian\n\t                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |\n\t                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);\n\n\t                // Encrypt\n\t                M[offset + i] ^= S[i];\n\t            }\n\t        },\n\n\t        blockSize: 128/32,\n\n\t        ivSize: 64/32\n\t    });\n\n\t    function nextState() {\n\t        // Shortcuts\n\t        var X = this._X;\n\t        var C = this._C;\n\n\t        // Save old counter values\n\t        for (var i = 0; i < 8; i++) {\n\t            C_[i] = C[i];\n\t        }\n\n\t        // Calculate new counter values\n\t        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;\n\t        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;\n\t        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;\n\t        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;\n\t        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;\n\t        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;\n\t        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;\n\t        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;\n\t        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;\n\n\t        // Calculate the g-values\n\t        for (var i = 0; i < 8; i++) {\n\t            var gx = X[i] + C[i];\n\n\t            // Construct high and low argument for squaring\n\t            var ga = gx & 0xffff;\n\t            var gb = gx >>> 16;\n\n\t            // Calculate high and low result of squaring\n\t            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;\n\t            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);\n\n\t            // High XOR low\n\t            G[i] = gh ^ gl;\n\t        }\n\n\t        // Calculate new state values\n\t        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;\n\t        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;\n\t        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;\n\t        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;\n\t        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;\n\t        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;\n\t        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;\n\t        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);\n\t}());\n\n\n\treturn CryptoJS.RabbitLegacy;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/crypto-js/rabbit-legacy.js\n// module id = 364\n// module chunks = 0","'use strict';\n\nvar stringify = require('./stringify');\nvar parse = require('./parse');\nvar formats = require('./formats');\n\nmodule.exports = {\n    formats: formats,\n    parse: parse,\n    stringify: stringify\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/qs/lib/index.js\n// module id = 365\n// module chunks = 0","'use strict';\n\nvar utils = require('./utils');\nvar formats = require('./formats');\n\nvar arrayPrefixGenerators = {\n    brackets: function brackets(prefix) { // eslint-disable-line func-name-matching\n        return prefix + '[]';\n    },\n    indices: function indices(prefix, key) { // eslint-disable-line func-name-matching\n        return prefix + '[' + key + ']';\n    },\n    repeat: function repeat(prefix) { // eslint-disable-line func-name-matching\n        return prefix;\n    }\n};\n\nvar toISO = Date.prototype.toISOString;\n\nvar defaults = {\n    delimiter: '&',\n    encode: true,\n    encoder: utils.encode,\n    encodeValuesOnly: false,\n    serializeDate: function serializeDate(date) { // eslint-disable-line func-name-matching\n        return toISO.call(date);\n    },\n    skipNulls: false,\n    strictNullHandling: false\n};\n\nvar stringify = function stringify( // eslint-disable-line func-name-matching\n    object,\n    prefix,\n    generateArrayPrefix,\n    strictNullHandling,\n    skipNulls,\n    encoder,\n    filter,\n    sort,\n    allowDots,\n    serializeDate,\n    formatter,\n    encodeValuesOnly\n) {\n    var obj = object;\n    if (typeof filter === 'function') {\n        obj = filter(prefix, obj);\n    } else if (obj instanceof Date) {\n        obj = serializeDate(obj);\n    } else if (obj === null) {\n        if (strictNullHandling) {\n            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder) : prefix;\n        }\n\n        obj = '';\n    }\n\n    if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || utils.isBuffer(obj)) {\n        if (encoder) {\n            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder);\n            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder))];\n        }\n        return [formatter(prefix) + '=' + formatter(String(obj))];\n    }\n\n    var values = [];\n\n    if (typeof obj === 'undefined') {\n        return values;\n    }\n\n    var objKeys;\n    if (Array.isArray(filter)) {\n        objKeys = filter;\n    } else {\n        var keys = Object.keys(obj);\n        objKeys = sort ? keys.sort(sort) : keys;\n    }\n\n    for (var i = 0; i < objKeys.length; ++i) {\n        var key = objKeys[i];\n\n        if (skipNulls && obj[key] === null) {\n            continue;\n        }\n\n        if (Array.isArray(obj)) {\n            values = values.concat(stringify(\n                obj[key],\n                generateArrayPrefix(prefix, key),\n                generateArrayPrefix,\n                strictNullHandling,\n                skipNulls,\n                encoder,\n                filter,\n                sort,\n                allowDots,\n                serializeDate,\n                formatter,\n                encodeValuesOnly\n            ));\n        } else {\n            values = values.concat(stringify(\n                obj[key],\n                prefix + (allowDots ? '.' + key : '[' + key + ']'),\n                generateArrayPrefix,\n                strictNullHandling,\n                skipNulls,\n                encoder,\n                filter,\n                sort,\n                allowDots,\n                serializeDate,\n                formatter,\n                encodeValuesOnly\n            ));\n        }\n    }\n\n    return values;\n};\n\nmodule.exports = function (object, opts) {\n    var obj = object;\n    var options = opts ? utils.assign({}, opts) : {};\n\n    if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') {\n        throw new TypeError('Encoder has to be a function.');\n    }\n\n    var delimiter = typeof options.delimiter === 'undefined' ? defaults.delimiter : options.delimiter;\n    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;\n    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults.skipNulls;\n    var encode = typeof options.encode === 'boolean' ? options.encode : defaults.encode;\n    var encoder = typeof options.encoder === 'function' ? options.encoder : defaults.encoder;\n    var sort = typeof options.sort === 'function' ? options.sort : null;\n    var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;\n    var serializeDate = typeof options.serializeDate === 'function' ? options.serializeDate : defaults.serializeDate;\n    var encodeValuesOnly = typeof options.encodeValuesOnly === 'boolean' ? options.encodeValuesOnly : defaults.encodeValuesOnly;\n    if (typeof options.format === 'undefined') {\n        options.format = formats['default'];\n    } else if (!Object.prototype.hasOwnProperty.call(formats.formatters, options.format)) {\n        throw new TypeError('Unknown format option provided.');\n    }\n    var formatter = formats.formatters[options.format];\n    var objKeys;\n    var filter;\n\n    if (typeof options.filter === 'function') {\n        filter = options.filter;\n        obj = filter('', obj);\n    } else if (Array.isArray(options.filter)) {\n        filter = options.filter;\n        objKeys = filter;\n    }\n\n    var keys = [];\n\n    if (typeof obj !== 'object' || obj === null) {\n        return '';\n    }\n\n    var arrayFormat;\n    if (options.arrayFormat in arrayPrefixGenerators) {\n        arrayFormat = options.arrayFormat;\n    } else if ('indices' in options) {\n        arrayFormat = options.indices ? 'indices' : 'repeat';\n    } else {\n        arrayFormat = 'indices';\n    }\n\n    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];\n\n    if (!objKeys) {\n        objKeys = Object.keys(obj);\n    }\n\n    if (sort) {\n        objKeys.sort(sort);\n    }\n\n    for (var i = 0; i < objKeys.length; ++i) {\n        var key = objKeys[i];\n\n        if (skipNulls && obj[key] === null) {\n            continue;\n        }\n\n        keys = keys.concat(stringify(\n            obj[key],\n            key,\n            generateArrayPrefix,\n            strictNullHandling,\n            skipNulls,\n            encode ? encoder : null,\n            filter,\n            sort,\n            allowDots,\n            serializeDate,\n            formatter,\n            encodeValuesOnly\n        ));\n    }\n\n    var joined = keys.join(delimiter);\n    var prefix = options.addQueryPrefix === true ? '?' : '';\n\n    return joined.length > 0 ? prefix + joined : '';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/qs/lib/stringify.js\n// module id = 366\n// module chunks = 0","'use strict';\n\nvar utils = require('./utils');\n\nvar has = Object.prototype.hasOwnProperty;\n\nvar defaults = {\n    allowDots: false,\n    allowPrototypes: false,\n    arrayLimit: 20,\n    decoder: utils.decode,\n    delimiter: '&',\n    depth: 5,\n    parameterLimit: 1000,\n    plainObjects: false,\n    strictNullHandling: false\n};\n\nvar parseValues = function parseQueryStringValues(str, options) {\n    var obj = {};\n    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str;\n    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n    var parts = cleanStr.split(options.delimiter, limit);\n\n    for (var i = 0; i < parts.length; ++i) {\n        var part = parts[i];\n\n        var bracketEqualsPos = part.indexOf(']=');\n        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;\n\n        var key, val;\n        if (pos === -1) {\n            key = options.decoder(part, defaults.decoder);\n            val = options.strictNullHandling ? null : '';\n        } else {\n            key = options.decoder(part.slice(0, pos), defaults.decoder);\n            val = options.decoder(part.slice(pos + 1), defaults.decoder);\n        }\n        if (has.call(obj, key)) {\n            obj[key] = [].concat(obj[key]).concat(val);\n        } else {\n            obj[key] = val;\n        }\n    }\n\n    return obj;\n};\n\nvar parseObject = function (chain, val, options) {\n    var leaf = val;\n\n    for (var i = chain.length - 1; i >= 0; --i) {\n        var obj;\n        var root = chain[i];\n\n        if (root === '[]') {\n            obj = [];\n            obj = obj.concat(leaf);\n        } else {\n            obj = options.plainObjects ? Object.create(null) : {};\n            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n            var index = parseInt(cleanRoot, 10);\n            if (\n                !isNaN(index)\n                && root !== cleanRoot\n                && String(index) === cleanRoot\n                && index >= 0\n                && (options.parseArrays && index <= options.arrayLimit)\n            ) {\n                obj = [];\n                obj[index] = leaf;\n            } else {\n                obj[cleanRoot] = leaf;\n            }\n        }\n\n        leaf = obj;\n    }\n\n    return leaf;\n};\n\nvar parseKeys = function parseQueryStringKeys(givenKey, val, options) {\n    if (!givenKey) {\n        return;\n    }\n\n    // Transform dot notation to bracket notation\n    var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey;\n\n    // The regex chunks\n\n    var brackets = /(\\[[^[\\]]*])/;\n    var child = /(\\[[^[\\]]*])/g;\n\n    // Get the parent\n\n    var segment = brackets.exec(key);\n    var parent = segment ? key.slice(0, segment.index) : key;\n\n    // Stash the parent if it exists\n\n    var keys = [];\n    if (parent) {\n        // If we aren't using plain objects, optionally prefix keys\n        // that would overwrite object prototype properties\n        if (!options.plainObjects && has.call(Object.prototype, parent)) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n\n        keys.push(parent);\n    }\n\n    // Loop through children appending to the array until we hit depth\n\n    var i = 0;\n    while ((segment = child.exec(key)) !== null && i < options.depth) {\n        i += 1;\n        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(segment[1]);\n    }\n\n    // If there's a remainder, just add whatever is left\n\n    if (segment) {\n        keys.push('[' + key.slice(segment.index) + ']');\n    }\n\n    return parseObject(keys, val, options);\n};\n\nmodule.exports = function (str, opts) {\n    var options = opts ? utils.assign({}, opts) : {};\n\n    if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {\n        throw new TypeError('Decoder has to be a function.');\n    }\n\n    options.ignoreQueryPrefix = options.ignoreQueryPrefix === true;\n    options.delimiter = typeof options.delimiter === 'string' || utils.isRegExp(options.delimiter) ? options.delimiter : defaults.delimiter;\n    options.depth = typeof options.depth === 'number' ? options.depth : defaults.depth;\n    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults.arrayLimit;\n    options.parseArrays = options.parseArrays !== false;\n    options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults.decoder;\n    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : defaults.allowDots;\n    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults.plainObjects;\n    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults.allowPrototypes;\n    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults.parameterLimit;\n    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;\n\n    if (str === '' || str === null || typeof str === 'undefined') {\n        return options.plainObjects ? Object.create(null) : {};\n    }\n\n    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;\n    var obj = options.plainObjects ? Object.create(null) : {};\n\n    // Iterate over the keys and setup the new object\n\n    var keys = Object.keys(tempObj);\n    for (var i = 0; i < keys.length; ++i) {\n        var key = keys[i];\n        var newObj = parseKeys(key, tempObj[key], options);\n        obj = utils.merge(obj, newObj, options);\n    }\n\n    return utils.compact(obj);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/qs/lib/parse.js\n// module id = 367\n// module chunks = 0","\"use strict\";\n\nconst { sleep }  = require ('./functions')\n\nconst throttle = cfg => {\n\n    let lastTimestamp = Date.now ()\n        , numTokens = (typeof cfg.numTokens != 'undefined') ? cfg.numTokens : cfg.capacity\n        , queue = []\n        , running = false\n        , counter = 0\n\n    return Object.assign (cost => {\n\n        if (queue.length > cfg.maxCapacity)\n            throw new Error ('Backlog is over max capacity of ' + cfg.maxCapacity)\n\n        return new Promise (async (resolve, reject) => {\n\n            try {\n\n                queue.push ({ cost, resolve, reject })\n\n                if (!running) {\n                    running = true\n                    while (queue.length > 0) {\n                        const hasEnoughTokens = cfg.capacity ? (numTokens > 0) : (numTokens >= 0)\n                        if (hasEnoughTokens) {\n                            if (queue.length > 0) {\n                                let { cost, resolve, reject } = queue[0]\n                                cost = (cost || cfg.defaultCost)\n                                if (numTokens >= Math.min (cost, cfg.capacity)) {\n                                    numTokens -= cost\n                                    queue.shift ()\n                                    resolve ()\n                                }\n                            }\n                        }\n                        let now = Date.now ()\n                        let elapsed = now - lastTimestamp\n                        lastTimestamp = now\n                        numTokens = Math.min (cfg.capacity, numTokens + elapsed * cfg.refillRate)\n                        await sleep (cfg.delay)\n                    }\n                    running = false\n                }\n\n            } catch (e) {\n\n                reject (e)\n            }\n        })\n\n    }, cfg, {\n        configure: newCfg => throttle (Object.assign ({}, cfg, newCfg))\n    })\n}\n\nmodule.exports = throttle\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/base/throttle.js\n// module id = 368\n// module chunks = 0","(function (self) {\n  'use strict';\n\n  function fetchPonyfill(options) {\n    var Promise = options && options.Promise || self.Promise;\n    var XMLHttpRequest = options && options.XMLHttpRequest || self.XMLHttpRequest;\n    var global = self;\n\n    return (function () {\n      var self = Object.create(global, {\n        fetch: {\n          value: undefined,\n          writable: true\n        }\n      });\n\n      (function(self) {\n        'use strict';\n\n        if (self.fetch) {\n          return\n        }\n\n        var support = {\n          searchParams: 'URLSearchParams' in self,\n          iterable: 'Symbol' in self && 'iterator' in Symbol,\n          blob: 'FileReader' in self && 'Blob' in self && (function() {\n            try {\n              new Blob()\n              return true\n            } catch(e) {\n              return false\n            }\n          })(),\n          formData: 'FormData' in self,\n          arrayBuffer: 'ArrayBuffer' in self\n        }\n\n        if (support.arrayBuffer) {\n          var viewClasses = [\n            '[object Int8Array]',\n            '[object Uint8Array]',\n            '[object Uint8ClampedArray]',\n            '[object Int16Array]',\n            '[object Uint16Array]',\n            '[object Int32Array]',\n            '[object Uint32Array]',\n            '[object Float32Array]',\n            '[object Float64Array]'\n          ]\n\n          var isDataView = function(obj) {\n            return obj && DataView.prototype.isPrototypeOf(obj)\n          }\n\n          var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n          }\n        }\n\n        function normalizeName(name) {\n          if (typeof name !== 'string') {\n            name = String(name)\n          }\n          if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n            throw new TypeError('Invalid character in header field name')\n          }\n          return name.toLowerCase()\n        }\n\n        function normalizeValue(value) {\n          if (typeof value !== 'string') {\n            value = String(value)\n          }\n          return value\n        }\n\n        // Build a destructive iterator for the value list\n        function iteratorFor(items) {\n          var iterator = {\n            next: function() {\n              var value = items.shift()\n              return {done: value === undefined, value: value}\n            }\n          }\n\n          if (support.iterable) {\n            iterator[Symbol.iterator] = function() {\n              return iterator\n            }\n          }\n\n          return iterator\n        }\n\n        function Headers(headers) {\n          this.map = {}\n\n          if (headers instanceof Headers) {\n            headers.forEach(function(value, name) {\n              this.append(name, value)\n            }, this)\n          } else if (Array.isArray(headers)) {\n            headers.forEach(function(header) {\n              this.append(header[0], header[1])\n            }, this)\n          } else if (headers) {\n            Object.getOwnPropertyNames(headers).forEach(function(name) {\n              this.append(name, headers[name])\n            }, this)\n          }\n        }\n\n        Headers.prototype.append = function(name, value) {\n          name = normalizeName(name)\n          value = normalizeValue(value)\n          var oldValue = this.map[name]\n          this.map[name] = oldValue ? oldValue+','+value : value\n        }\n\n        Headers.prototype['delete'] = function(name) {\n          delete this.map[normalizeName(name)]\n        }\n\n        Headers.prototype.get = function(name) {\n          name = normalizeName(name)\n          return this.has(name) ? this.map[name] : null\n        }\n\n        Headers.prototype.has = function(name) {\n          return this.map.hasOwnProperty(normalizeName(name))\n        }\n\n        Headers.prototype.set = function(name, value) {\n          this.map[normalizeName(name)] = normalizeValue(value)\n        }\n\n        Headers.prototype.forEach = function(callback, thisArg) {\n          for (var name in this.map) {\n            if (this.map.hasOwnProperty(name)) {\n              callback.call(thisArg, this.map[name], name, this)\n            }\n          }\n        }\n\n        Headers.prototype.keys = function() {\n          var items = []\n          this.forEach(function(value, name) { items.push(name) })\n          return iteratorFor(items)\n        }\n\n        Headers.prototype.values = function() {\n          var items = []\n          this.forEach(function(value) { items.push(value) })\n          return iteratorFor(items)\n        }\n\n        Headers.prototype.entries = function() {\n          var items = []\n          this.forEach(function(value, name) { items.push([name, value]) })\n          return iteratorFor(items)\n        }\n\n        if (support.iterable) {\n          Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n        }\n\n        function consumed(body) {\n          if (body.bodyUsed) {\n            return Promise.reject(new TypeError('Already read'))\n          }\n          body.bodyUsed = true\n        }\n\n        function fileReaderReady(reader) {\n          return new Promise(function(resolve, reject) {\n            reader.onload = function() {\n              resolve(reader.result)\n            }\n            reader.onerror = function() {\n              reject(reader.error)\n            }\n          })\n        }\n\n        function readBlobAsArrayBuffer(blob) {\n          var reader = new FileReader()\n          var promise = fileReaderReady(reader)\n          reader.readAsArrayBuffer(blob)\n          return promise\n        }\n\n        function readBlobAsText(blob) {\n          var reader = new FileReader()\n          var promise = fileReaderReady(reader)\n          reader.readAsText(blob)\n          return promise\n        }\n\n        function readArrayBufferAsText(buf) {\n          var view = new Uint8Array(buf)\n          var chars = new Array(view.length)\n\n          for (var i = 0; i < view.length; i++) {\n            chars[i] = String.fromCharCode(view[i])\n          }\n          return chars.join('')\n        }\n\n        function bufferClone(buf) {\n          if (buf.slice) {\n            return buf.slice(0)\n          } else {\n            var view = new Uint8Array(buf.byteLength)\n            view.set(new Uint8Array(buf))\n            return view.buffer\n          }\n        }\n\n        function Body() {\n          this.bodyUsed = false\n\n          this._initBody = function(body) {\n            this._bodyInit = body\n            if (!body) {\n              this._bodyText = ''\n            } else if (typeof body === 'string') {\n              this._bodyText = body\n            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n              this._bodyBlob = body\n            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n              this._bodyFormData = body\n            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n              this._bodyText = body.toString()\n            } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n              this._bodyArrayBuffer = bufferClone(body.buffer)\n              // IE 10-11 can't handle a DataView body.\n              this._bodyInit = new Blob([this._bodyArrayBuffer])\n            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n              this._bodyArrayBuffer = bufferClone(body)\n            } else {\n              throw new Error('unsupported BodyInit type')\n            }\n\n            if (!this.headers.get('content-type')) {\n              if (typeof body === 'string') {\n                this.headers.set('content-type', 'text/plain;charset=UTF-8')\n              } else if (this._bodyBlob && this._bodyBlob.type) {\n                this.headers.set('content-type', this._bodyBlob.type)\n              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n                this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n              }\n            }\n          }\n\n          if (support.blob) {\n            this.blob = function() {\n              var rejected = consumed(this)\n              if (rejected) {\n                return rejected\n              }\n\n              if (this._bodyBlob) {\n                return Promise.resolve(this._bodyBlob)\n              } else if (this._bodyArrayBuffer) {\n                return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n              } else if (this._bodyFormData) {\n                throw new Error('could not read FormData body as blob')\n              } else {\n                return Promise.resolve(new Blob([this._bodyText]))\n              }\n            }\n\n            this.arrayBuffer = function() {\n              if (this._bodyArrayBuffer) {\n                return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n              } else {\n                return this.blob().then(readBlobAsArrayBuffer)\n              }\n            }\n          }\n\n          this.text = function() {\n            var rejected = consumed(this)\n            if (rejected) {\n              return rejected\n            }\n\n            if (this._bodyBlob) {\n              return readBlobAsText(this._bodyBlob)\n            } else if (this._bodyArrayBuffer) {\n              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n            } else if (this._bodyFormData) {\n              throw new Error('could not read FormData body as text')\n            } else {\n              return Promise.resolve(this._bodyText)\n            }\n          }\n\n          if (support.formData) {\n            this.formData = function() {\n              return this.text().then(decode)\n            }\n          }\n\n          this.json = function() {\n            return this.text().then(JSON.parse)\n          }\n\n          return this\n        }\n\n        // HTTP methods whose capitalization should be normalized\n        var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n        function normalizeMethod(method) {\n          var upcased = method.toUpperCase()\n          return (methods.indexOf(upcased) > -1) ? upcased : method\n        }\n\n        function Request(input, options) {\n          options = options || {}\n          var body = options.body\n\n          if (input instanceof Request) {\n            if (input.bodyUsed) {\n              throw new TypeError('Already read')\n            }\n            this.url = input.url\n            this.credentials = input.credentials\n            if (!options.headers) {\n              this.headers = new Headers(input.headers)\n            }\n            this.method = input.method\n            this.mode = input.mode\n            if (!body && input._bodyInit != null) {\n              body = input._bodyInit\n              input.bodyUsed = true\n            }\n          } else {\n            this.url = String(input)\n          }\n\n          this.credentials = options.credentials || this.credentials || 'omit'\n          if (options.headers || !this.headers) {\n            this.headers = new Headers(options.headers)\n          }\n          this.method = normalizeMethod(options.method || this.method || 'GET')\n          this.mode = options.mode || this.mode || null\n          this.referrer = null\n\n          if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n            throw new TypeError('Body not allowed for GET or HEAD requests')\n          }\n          this._initBody(body)\n        }\n\n        Request.prototype.clone = function() {\n          return new Request(this, { body: this._bodyInit })\n        }\n\n        function decode(body) {\n          var form = new FormData()\n          body.trim().split('&').forEach(function(bytes) {\n            if (bytes) {\n              var split = bytes.split('=')\n              var name = split.shift().replace(/\\+/g, ' ')\n              var value = split.join('=').replace(/\\+/g, ' ')\n              form.append(decodeURIComponent(name), decodeURIComponent(value))\n            }\n          })\n          return form\n        }\n\n        function parseHeaders(rawHeaders) {\n          var headers = new Headers()\n          rawHeaders.split(/\\r?\\n/).forEach(function(line) {\n            var parts = line.split(':')\n            var key = parts.shift().trim()\n            if (key) {\n              var value = parts.join(':').trim()\n              headers.append(key, value)\n            }\n          })\n          return headers\n        }\n\n        Body.call(Request.prototype)\n\n        function Response(bodyInit, options) {\n          if (!options) {\n            options = {}\n          }\n\n          this.type = 'default'\n          this.status = 'status' in options ? options.status : 200\n          this.ok = this.status >= 200 && this.status < 300\n          this.statusText = 'statusText' in options ? options.statusText : 'OK'\n          this.headers = new Headers(options.headers)\n          this.url = options.url || ''\n          this._initBody(bodyInit)\n        }\n\n        Body.call(Response.prototype)\n\n        Response.prototype.clone = function() {\n          return new Response(this._bodyInit, {\n            status: this.status,\n            statusText: this.statusText,\n            headers: new Headers(this.headers),\n            url: this.url\n          })\n        }\n\n        Response.error = function() {\n          var response = new Response(null, {status: 0, statusText: ''})\n          response.type = 'error'\n          return response\n        }\n\n        var redirectStatuses = [301, 302, 303, 307, 308]\n\n        Response.redirect = function(url, status) {\n          if (redirectStatuses.indexOf(status) === -1) {\n            throw new RangeError('Invalid status code')\n          }\n\n          return new Response(null, {status: status, headers: {location: url}})\n        }\n\n        self.Headers = Headers\n        self.Request = Request\n        self.Response = Response\n\n        self.fetch = function(input, init) {\n          return new Promise(function(resolve, reject) {\n            var request = new Request(input, init)\n            var xhr = new XMLHttpRequest()\n\n            xhr.onload = function() {\n              var options = {\n                status: xhr.status,\n                statusText: xhr.statusText,\n                headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n              }\n              options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n              var body = 'response' in xhr ? xhr.response : xhr.responseText\n              resolve(new Response(body, options))\n            }\n\n            xhr.onerror = function() {\n              reject(new TypeError('Network request failed'))\n            }\n\n            xhr.ontimeout = function() {\n              reject(new TypeError('Network request failed'))\n            }\n\n            xhr.open(request.method, request.url, true)\n\n            if (request.credentials === 'include') {\n              xhr.withCredentials = true\n            }\n\n            if ('responseType' in xhr && support.blob) {\n              xhr.responseType = 'blob'\n            }\n\n            request.headers.forEach(function(value, name) {\n              xhr.setRequestHeader(name, value)\n            })\n\n            xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n          })\n        }\n        self.fetch.polyfill = true\n      })(typeof self !== 'undefined' ? self : this);\n\n\n      return {\n        fetch: self.fetch,\n        Headers: self.Headers,\n        Request: self.Request,\n        Response: self.Response\n      };\n    }());\n  }\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return fetchPonyfill;\n    });\n  } else if (typeof exports === 'object') {\n    module.exports = fetchPonyfill;\n  } else {\n    self.fetchPonyfill = fetchPonyfill;\n  }\n}(typeof self === 'undefined' ? this : self));\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fetch-ponyfill/build/fetch-browser.js\n// module id = 369\n// module chunks = 0","\"use strict\";\n\nmodule.exports = class Market {\n\n    constructor (exchange, symbol) {\n        this.exchange = exchange;\n        this.symbol = symbol;\n        this.market = exchange.markets[symbol];\n    }\n\n    amountToPrecision (amount) {\n        return this.exchange.amountToPrecision (this.symbol, amount)\n    }\n\n    createLimitBuyOrder(amount, price) {\n        return this.exchange.createLimitBuyOrder (this.symbol, amount, price)\n    }\n\n    createLimitSellOrder(amount, price) {\n        return this.exchange.createLimitSellOrder (this.symbol, amount, price)\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/base/Market.js\n// module id = 370\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, AuthenticationError } = require ('./base/errors')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class _1broker extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': '_1broker',\n            'name': '1Broker',\n            'countries': 'US',\n            'rateLimit': 1500,\n            'version': 'v2',\n            'hasPublicAPI': false,\n            'hasCORS': true,\n            'hasFetchTrades': false,\n            'hasFetchOHLCV': true,\n            'timeframes': {\n                '1m': '60',\n                '15m': '900',\n                '1h': '3600',\n                '1d': '86400',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766021-420bd9fc-5ecb-11e7-8ed6-56d0081efed2.jpg',\n                'api': 'https://1broker.com/api',\n                'www': 'https://1broker.com',\n                'doc': 'https://1broker.com/?c=en/content/api-documentation',\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': false,\n            },\n            'api': {\n                'private': {\n                    'get': [\n                        'market/bars',\n                        'market/categories',\n                        'market/details',\n                        'market/list',\n                        'market/quotes',\n                        'market/ticks',\n                        'order/cancel',\n                        'order/create',\n                        'order/open',\n                        'position/close',\n                        'position/close_cancel',\n                        'position/edit',\n                        'position/history',\n                        'position/open',\n                        'position/shared/get',\n                        'social/profile_statistics',\n                        'social/profile_trades',\n                        'user/bitcoin_deposit_address',\n                        'user/details',\n                        'user/overview',\n                        'user/quota_status',\n                        'user/transaction_log',\n                    ],\n                },\n            },\n        });\n    }\n\n    async fetchCategories () {\n        let response = await this.privateGetMarketCategories ();\n        // they return an empty string among their categories, wtf?\n        let categories = response['response'];\n        let result = [];\n        for (let i = 0; i < categories.length; i++) {\n            if (categories[i])\n                result.push (categories[i]);\n        }\n        return result;\n    }\n\n    async fetchMarkets () {\n        let this_ = this; // workaround for Babel bug (not passing `this` to _recursive() call)\n        let categories = await this.fetchCategories ();\n        let result = [];\n        for (let c = 0; c < categories.length; c++) {\n            let category = categories[c];\n            let markets = await this_.privateGetMarketList ({\n                'category': category.toLowerCase (),\n            });\n            for (let p = 0; p < markets['response'].length; p++) {\n                let market = markets['response'][p];\n                let id = market['symbol'];\n                let symbol = undefined;\n                let base = undefined;\n                let quote = undefined;\n                if ((category == 'FOREX') || (category == 'CRYPTO')) {\n                    symbol = market['name'];\n                    let parts = symbol.split ('/');\n                    base = parts[0];\n                    quote = parts[1];\n                } else {\n                    base = id;\n                    quote = 'USD';\n                    symbol = base + '/' + quote;\n                }\n                base = this_.commonCurrencyCode (base);\n                quote = this_.commonCurrencyCode (quote);\n                result.push ({\n                    'id': id,\n                    'symbol': symbol,\n                    'base': base,\n                    'quote': quote,\n                    'info': market,\n                });\n            }\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let balance = await this.privateGetUserOverview ();\n        let response = balance['response'];\n        let result = {\n            'info': response,\n        };\n        let currencies = Object.keys (this.currencies);\n        for (let c = 0; c < currencies.length; c++) {\n            let currency = currencies[c];\n            result[currency] = this.account ();\n        }\n        let total = parseFloat (response['balance']);\n        result['BTC']['free'] = total;\n        result['BTC']['total'] = total;\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privateGetMarketQuotes (this.extend ({\n            'symbols': this.marketId (symbol),\n        }, params));\n        let orderbook = response['response'][0];\n        let timestamp = this.parse8601 (orderbook['updated']);\n        let bidPrice = parseFloat (orderbook['bid']);\n        let askPrice = parseFloat (orderbook['ask']);\n        let bid = [ bidPrice, undefined ];\n        let ask = [ askPrice, undefined ];\n        return {\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'bids': [ bid ],\n            'asks': [ ask ],\n        };\n    }\n\n    async fetchTrades (symbol) {\n        throw new ExchangeError (this.id + ' fetchTrades () method not implemented yet');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let result = await this.privateGetMarketBars (this.extend ({\n            'symbol': this.marketId (symbol),\n            'resolution': 60,\n            'limit': 1,\n        }, params));\n        let orderbook = await this.fetchOrderBook (symbol);\n        let ticker = result['response'][0];\n        let timestamp = this.parse8601 (ticker['date']);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['h']),\n            'low': parseFloat (ticker['l']),\n            'bid': orderbook['bids'][0][0],\n            'ask': orderbook['asks'][0][0],\n            'vwap': undefined,\n            'open': parseFloat (ticker['o']),\n            'close': parseFloat (ticker['c']),\n            'first': undefined,\n            'last': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': undefined,\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseOHLCV (ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {\n        return [\n            this.parse8601 (ohlcv['date']),\n            parseFloat (ohlcv['o']),\n            parseFloat (ohlcv['h']),\n            parseFloat (ohlcv['l']),\n            parseFloat (ohlcv['c']),\n            undefined,\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = {\n            'symbol': market['id'],\n            'resolution': this.timeframes[timeframe],\n        };\n        if (since)\n            request['date_start'] = this.iso8601 (since); // they also support date_end\n        if (limit)\n            request['limit'] = limit;\n        let result = await this.privateGetMarketBars (this.extend (request, params));\n        return this.parseOHLCVs (result['response'], market, timeframe, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let order = {\n            'symbol': this.marketId (symbol),\n            'margin': amount,\n            'direction': (side == 'sell') ? 'short' : 'long',\n            'leverage': 1,\n            'type': side,\n        };\n        if (type == 'limit')\n            order['price'] = price;\n        else\n            order['type'] += '_market';\n        let result = await this.privateGetOrderCreate (this.extend (order, params));\n        return {\n            'info': result,\n            'id': result['response']['order_id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privatePostOrderCancel ({ 'order_id': id });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        this.checkRequiredCredentials ();\n        let url = this.urls['api'] + '/' + this.version + '/' + path + '.php';\n        let query = this.extend ({ 'token': this.apiKey }, params);\n        url += '?' + this.urlencode (query);\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('warning' in response)\n            if (response['warning'])\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n        if ('error' in response)\n            if (response['error'])\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/_1broker.js\n// module id = 371\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst okcoinusd = require ('./okcoinusd.js')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class allcoin extends okcoinusd {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'allcoin',\n            'name': 'Allcoin',\n            'countries': 'CA',\n            'hasCORS': false,\n            'extension': '',\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/31561809-c316b37c-b061-11e7-8d5a-b547b4d730eb.jpg',\n                'api': {\n                    'web': 'https://www.allcoin.com',\n                    'public': 'https://api.allcoin.com/api',\n                    'private': 'https://api.allcoin.com/api',\n                },\n                'www': 'https://www.allcoin.com',\n                'doc': 'https://www.allcoin.com/About/APIReference',\n            },\n            'api': {\n                'web': {\n                    'get': [\n                        'Home/MarketOverViewDetail/',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'depth',\n                        'kline',\n                        'ticker',\n                        'trades',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'batch_trade',\n                        'cancel_order',\n                        'order_history',\n                        'order_info',\n                        'orders_info',\n                        'repayment',\n                        'trade',\n                        'trade_history',\n                        'userinfo',\n                    ],\n                },\n            },\n            'markets': undefined,\n        });\n    }\n\n    async fetchMarkets () {\n        let result = [];\n        let response = await this.webGetHomeMarketOverViewDetail ();\n        let coins = response['marketCoins'];\n        for (let j = 0; j < coins.length; j++) {\n            let markets = coins[j]['Markets'];\n            for (let k = 0; k < markets.length; k++) {\n                let market = markets[k]['Market'];\n                let base = market['Primary'];\n                let quote = market['Secondary'];\n                let id = base.toLowerCase () + '_' + quote.toLowerCase ();\n                let symbol = base + '/' + quote;\n                result.push ({\n                    'id': id,\n                    'symbol': symbol,\n                    'base': base,\n                    'quote': quote,\n                    'type': 'spot',\n                    'spot': true,\n                    'future': false,\n                    'info': market,\n                });\n            }\n        }\n        return result;\n    }\n\n    parseOrderStatus (status) {\n        if (status == -1)\n            return 'canceled';\n        if (status == 0)\n            return 'open';\n        if (status == 1)\n            return 'open'; // partially filled\n        if (status == 2)\n            return 'closed';\n        if (status == 10)\n            return 'canceled';\n        return status;\n    }\n\n    getCreateDateField () {\n        // allcoin typo create_data instead of create_date\n        return 'create_data';\n    }\n\n    getOrdersField () {\n        // allcoin typo order instead of orders (expected based on their API docs)\n        return 'order';\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/allcoin.js\n// module id = 372\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class anxpro extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'anxpro',\n            'name': 'ANXPro',\n            'countries': [ 'JP', 'SG', 'HK', 'NZ' ],\n            'version': '2',\n            'rateLimit': 1500,\n            'hasCORS': false,\n            'hasFetchTrades': false,\n            'hasWithdraw': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27765983-fd8595da-5ec9-11e7-82e3-adb3ab8c2612.jpg',\n                'api': 'https://anxpro.com/api',\n                'www': 'https://anxpro.com',\n                'doc': [\n                    'http://docs.anxv2.apiary.io',\n                    'https://anxpro.com/pages/api',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        '{currency_pair}/money/ticker',\n                        '{currency_pair}/money/depth/full',\n                        '{currency_pair}/money/trade/fetch', // disabled by ANXPro\n                    ],\n                },\n                'private': {\n                    'post': [\n                        '{currency_pair}/money/order/add',\n                        '{currency_pair}/money/order/cancel',\n                        '{currency_pair}/money/order/quote',\n                        '{currency_pair}/money/order/result',\n                        '{currency_pair}/money/orders',\n                        'money/{currency}/address',\n                        'money/{currency}/send_simple',\n                        'money/info',\n                        'money/trade/list',\n                        'money/wallet/history',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/USD': { 'id': 'BTCUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'multiplier': 100000 },\n                'BTC/HKD': { 'id': 'BTCHKD', 'symbol': 'BTC/HKD', 'base': 'BTC', 'quote': 'HKD', 'multiplier': 100000 },\n                'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'multiplier': 100000 },\n                'BTC/CAD': { 'id': 'BTCCAD', 'symbol': 'BTC/CAD', 'base': 'BTC', 'quote': 'CAD', 'multiplier': 100000 },\n                'BTC/AUD': { 'id': 'BTCAUD', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD', 'multiplier': 100000 },\n                'BTC/SGD': { 'id': 'BTCSGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD', 'multiplier': 100000 },\n                'BTC/JPY': { 'id': 'BTCJPY', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY', 'multiplier': 100000 },\n                'BTC/GBP': { 'id': 'BTCGBP', 'symbol': 'BTC/GBP', 'base': 'BTC', 'quote': 'GBP', 'multiplier': 100000 },\n                'BTC/NZD': { 'id': 'BTCNZD', 'symbol': 'BTC/NZD', 'base': 'BTC', 'quote': 'NZD', 'multiplier': 100000 },\n                'LTC/BTC': { 'id': 'LTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'multiplier': 100000 },\n                'STR/BTC': { 'id': 'STRBTC', 'symbol': 'STR/BTC', 'base': 'STR', 'quote': 'BTC', 'multiplier': 100000000 },\n                'XRP/BTC': { 'id': 'XRPBTC', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC', 'multiplier': 100000000 },\n                'DOGE/BTC': { 'id': 'DOGEBTC', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC', 'multiplier': 100000000 },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.3 / 100,\n                    'taker': 0.6 / 100,\n                },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        let response = await this.privatePostMoneyInfo ();\n        let balance = response['data'];\n        let currencies = Object.keys (balance['Wallets']);\n        let result = { 'info': balance };\n        for (let c = 0; c < currencies.length; c++) {\n            let currency = currencies[c];\n            let account = this.account ();\n            if (currency in balance['Wallets']) {\n                let wallet = balance['Wallets'][currency];\n                account['free'] = parseFloat (wallet['Available_Balance']['value']);\n                account['total'] = parseFloat (wallet['Balance']['value']);\n                account['used'] = account['total'] - account['free'];\n            }\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let response = await this.publicGetCurrencyPairMoneyDepthFull (this.extend ({\n            'currency_pair': this.marketId (symbol),\n        }, params));\n        let orderbook = response['data'];\n        let t = parseInt (orderbook['dataUpdateTime']);\n        let timestamp = parseInt (t / 1000);\n        return this.parseOrderBook (orderbook, timestamp, 'bids', 'asks', 'price', 'amount');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let response = await this.publicGetCurrencyPairMoneyTicker (this.extend ({\n            'currency_pair': this.marketId (symbol),\n        }, params));\n        let ticker = response['data'];\n        let t = parseInt (ticker['dataUpdateTime']);\n        let timestamp = parseInt (t / 1000);\n        let bid = this.safeFloat (ticker['buy'], 'value');\n        let ask = this.safeFloat (ticker['sell'], 'value');;\n        let vwap = parseFloat (ticker['vwap']['value']);\n        let baseVolume = parseFloat (ticker['vol']['value']);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']['value']),\n            'low': parseFloat (ticker['low']['value']),\n            'bid': bid,\n            'ask': ask,\n            'vwap': vwap,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']['value']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': parseFloat (ticker['avg']['value']),\n            'baseVolume': baseVolume,\n            'quoteVolume': baseVolume * vwap,\n            'info': ticker,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        throw new ExchangeError (this.id + ' switched off the trades endpoint, see their docs at http://docs.anxv2.apiary.io/reference/market-data/currencypairmoneytradefetch-disabled');\n        return this.publicGetCurrencyPairMoneyTradeFetch (this.extend ({\n            'currency_pair': this.marketId (symbol),\n        }, params));\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        let market = this.market (symbol);\n        let order = {\n            'currency_pair': market['id'],\n            'amount_int': parseInt (amount * 100000000), // 10^8\n        };\n        if (type == 'limit') {\n            order['price_int'] = parseInt (price * market['multiplier']); // 10^5 or 10^8\n        }\n        order['type'] = (side == 'buy') ? 'bid' : 'ask';\n        let result = await this.privatePostCurrencyPairMoneyOrderAdd (this.extend (order, params));\n        return {\n            'info': result,\n            'id': result['data'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostCurrencyPairMoneyOrderCancel ({ 'oid': id });\n    }\n\n    getAmountMultiplier (currency) {\n        if (currency == 'BTC') {\n            return 100000000;\n        } else if (currency == 'LTC') {\n            return 100000000;\n        } else if (currency == 'STR') {\n            return 100000000;\n        } else if (currency == 'XRP') {\n            return 100000000;\n        } else if (currency == 'DOGE') {\n            return 100000000;\n        }\n        return 100;\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        await this.loadMarkets ();\n        let multiplier = this.getAmountMultiplier (currency);\n        let response = await this.privatePostMoneyCurrencySendSimple (this.extend ({\n            'currency': currency,\n            'amount_int': parseInt (amount * multiplier),\n            'address': address,\n        }, params));\n        return {\n            'info': response,\n            'id': response['data']['transactionId'],\n        };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let request = this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        let url = this.urls['api'] + '/' + this.version + '/' + request;\n        if (api == 'public') {\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            body = this.urlencode (this.extend ({ 'nonce': nonce }, query));\n            let secret = this.base64ToBinary (this.secret);\n            let auth = request + \"\\0\" + body;\n            let signature = this.hmac (this.encode (auth), secret, 'sha512', 'base64');\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Rest-Key': this.apiKey,\n                'Rest-Sign': this.decode (signature),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('result' in response)\n            if (response['result'] == 'success')\n                return response;\n        throw new ExchangeError (this.id + ' ' + this.json (response));\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/anxpro.js\n// module id = 373\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, InsufficientFunds, OrderNotFound, InvalidOrder, DDoSProtection } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class binance extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'binance',\n            'name': 'Binance',\n            'countries': 'CN', // China\n            'rateLimit': 500,\n            'hasCORS': false,\n            // obsolete metainfo interface\n            'hasFetchTickers': true,\n            'hasFetchOHLCV': true,\n            'hasFetchMyTrades': true,\n            'hasFetchOrder': true,\n            'hasFetchOrders': true,\n            'hasFetchOpenOrders': true,\n            'hasWithdraw': true,\n            // new metainfo interface\n            'has': {\n                'fetchTickers': true,\n                'fetchOHLCV': true,\n                'fetchMyTrades': true,\n                'fetchOrder': true,\n                'fetchOrders': true,\n                'fetchOpenOrders': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1m',\n                '3m': '3m',\n                '5m': '5m',\n                '15m': '15m',\n                '30m': '30m',\n                '1h': '1h',\n                '2h': '2h',\n                '4h': '4h',\n                '6h': '6h',\n                '8h': '8h',\n                '12h': '12h',\n                '1d': '1d',\n                '3d': '3d',\n                '1w': '1w',\n                '1M': '1M',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/29604020-d5483cdc-87ee-11e7-94c7-d1a8d9169293.jpg',\n                'api': {\n                    'web': 'https://www.binance.com',\n                    'wapi': 'https://api.binance.com/wapi/v3',\n                    'public': 'https://api.binance.com/api/v1',\n                    'private': 'https://api.binance.com/api/v3',\n                },\n                'www': 'https://www.binance.com',\n                'doc': 'https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md',\n                'fees': [\n                    'https://binance.zendesk.com/hc/en-us/articles/115000429332',\n                    'https://support.binance.com/hc/en-us/articles/115000583311',\n                ],\n            },\n            'api': {\n                'web': {\n                    'get': [\n                        'exchange/public/product',\n                    ],\n                },\n                'wapi': {\n                    'post': [\n                        'withdraw',\n                    ],\n                    'get': [\n                        'depositHistory',\n                        'withdrawHistory',\n                        'depositAddress',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'exchangeInfo',\n                        'ping',\n                        'time',\n                        'depth',\n                        'aggTrades',\n                        'klines',\n                        'ticker/24hr',\n                        'ticker/allPrices',\n                        'ticker/allBookTickers',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'order',\n                        'openOrders',\n                        'allOrders',\n                        'account',\n                        'myTrades',\n                    ],\n                    'post': [\n                        'order',\n                        'order/test',\n                        'userDataStream',\n                    ],\n                    'put': [\n                        'userDataStream'\n                    ],\n                    'delete': [\n                        'order',\n                        'userDataStream',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'taker': 0.001,\n                    'maker': 0.001,\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {\n                        'BNB': 1.0,\n                        'BTC': 0.0005,\n                        'ETH': 0.005,\n                        'LTC': 0.001,\n                        'NEO': 0.0,\n                        'QTUM': 0.01,\n                        'SNT': 50.0,\n                        'BNT': 0.6,\n                        'EOS': 2.0,\n                        'BCH': 0.0005,\n                        'GAS': 0.0,\n                        'USDT': 5.0,\n                        'OAX': 2.0,\n                        'DNT': 30.0,\n                        'MCO': 0.15,\n                        'ICN': 0.5,\n                        'WTC': 0.2,\n                        'OMG': 0.1,\n                        'ZRX': 5.0,\n                        'STRAT': 0.1,\n                        'SNGLS': 8.0,\n                        'BQX': 2.0,\n                        'KNC': 1.0,\n                        'FUN': 50.0,\n                        'SNM': 10.0,\n                        'LINK': 5.0,\n                        'XVG': 0.1,\n                        'CTR': 1.0,\n                        'SALT': 0.3,\n                        'IOTA': 0.0,\n                        'MDA': 0.5,\n                        'MTL': 0.15,\n                        'SUB': 10.0,\n                        'ETC': 0.01,\n                        'MTH': 10.0,\n                        'ENG': 2.0,\n                        'AST': 4.0,\n                        'BTG': undefined,\n                        'DASH': 0.002,\n                        'EVX': 1.0,\n                        'REQ': 30.0,\n                        'LRC': 7.0,\n                        'VIB': 7.0,\n                        'HSR': 0.0001,\n                        'TRX': 500.0,\n                        'POWR': 15.0,\n                        'ARK': 0.1,\n                        'YOYO': 30.0,\n                        'XRP': 0.15,\n                        'MOD': 1.0,\n                        'ENJ': 1.0,\n                        'STORJ': 2.0,\n                    },\n                    'deposit': {\n                        'BNB': 0,\n                        'BTC': 0,\n                        'ETH': 0,\n                        'LTC': 0,\n                        'NEO': 0,\n                        'QTUM': 0,\n                        'SNT': 0,\n                        'BNT': 0,\n                        'EOS': 0,\n                        'BCH': 0,\n                        'GAS': 0,\n                        'USDT': 0,\n                        'OAX': 0,\n                        'DNT': 0,\n                        'MCO': 0,\n                        'ICN': 0,\n                        'WTC': 0,\n                        'OMG': 0,\n                        'ZRX': 0,\n                        'STRAT': 0,\n                        'SNGLS': 0,\n                        'BQX': 0,\n                        'KNC': 0,\n                        'FUN': 0,\n                        'SNM': 0,\n                        'LINK': 0,\n                        'XVG': 0,\n                        'CTR': 0,\n                        'SALT': 0,\n                        'IOTA': 0,\n                        'MDA': 0,\n                        'MTL': 0,\n                        'SUB': 0,\n                        'ETC': 0,\n                        'MTH': 0,\n                        'ENG': 0,\n                        'AST': 0,\n                        'BTG': 0,\n                        'DASH': 0,\n                        'EVX': 0,\n                        'REQ': 0,\n                        'LRC': 0,\n                        'VIB': 0,\n                        'HSR': 0,\n                        'TRX': 0,\n                        'POWR': 0,\n                        'ARK': 0,\n                        'YOYO': 0,\n                        'XRP': 0,\n                        'MOD': 0,\n                        'ENJ': 0,\n                        'STORJ': 0,\n                    },\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let response = await this.publicGetExchangeInfo ();\n        let markets = response['symbols'];\n        let result = [];\n        for (let i = 0; i < markets.length; i++) {\n            let market = markets[i];\n            let id = market['symbol'];\n            let base = this.commonCurrencyCode (market['baseAsset']);\n            let quote = this.commonCurrencyCode (market['quoteAsset']);\n            let symbol = base + '/' + quote;\n            let filters = this.indexBy (market['filters'], 'filterType');\n            let precision = {\n                'base': market['baseAssetPrecision'],\n                'quote': market['quotePrecision'],\n                'amount': market['baseAssetPrecision'],\n                'price': market['quotePrecision'],\n            };\n            let active = (market['status'] == 'TRADING');\n            let lot = -1 * Math.log10 (precision['amount']);\n            let entry = this.extend (this.fees['trading'], {\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n                'lot': lot,\n                'active': active,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': lot,\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': -1 * Math.log10 (precision['price']),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': lot,\n                        'max': undefined,\n                    },\n                },\n            });\n            if ('PRICE_FILTER' in filters) {\n                let filter = filters['PRICE_FILTER'];\n                entry['precision']['price'] = this.precisionFromString (filter['tickSize']);\n                entry['limits']['price'] = {\n                    'min': parseFloat (filter['minPrice']),\n                    'max': parseFloat (filter['maxPrice']),\n                };\n            }\n            if ('LOT_SIZE' in filters) {\n                let filter = filters['LOT_SIZE'];\n                entry['precision']['amount'] = this.precisionFromString (filter['stepSize']);\n                entry['lot'] = parseFloat (filter['stepSize']);\n                entry['limits']['amount'] = {\n                    'min': parseFloat (filter['minQty']),\n                    'max': parseFloat (filter['maxQty']),\n                };\n            }\n            if ('MIN_NOTIONAL' in filters) {\n                entry['limits']['cost']['min'] = parseFloat (filters['MIN_NOTIONAL']['minNotional']);\n            }\n            result.push (entry);\n        }\n        return result;\n    }\n\n    calculateFee (symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n        let market = this.markets[symbol];\n        let key = 'quote';\n        let rate = market[takerOrMaker];\n        let cost = parseFloat (this.costToPrecision (symbol, amount * rate));\n        if (side == 'sell') {\n            cost *= price;\n        } else {\n            key = 'base';\n        }\n        return {\n            'type': takerOrMaker,\n            'currency': market[key],\n            'rate': rate,\n            'cost': parseFloat (this.feeToPrecision (symbol, cost)),\n        };\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privateGetAccount (params);\n        let result = { 'info': response };\n        let balances = response['balances'];\n        for (let i = 0; i < balances.length; i++) {\n            let balance = balances[i];\n            let asset = balance['asset'];\n            let currency = this.commonCurrencyCode (asset);\n            let account = {\n                'free': parseFloat (balance['free']),\n                'used': parseFloat (balance['locked']),\n                'total': 0.0,\n            };\n            account['total'] = this.sum (account['free'], account['used']);\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let orderbook = await this.publicGetDepth (this.extend ({\n            'symbol': market['id'],\n            'limit': 100, // default = maximum = 100\n        }, params));\n        return this.parseOrderBook (orderbook);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = this.safeInteger (ticker, 'closeTime');\n        if (typeof timestamp == 'undefined')\n            timestamp = this.milliseconds ();\n        let symbol = ticker['symbol'];\n        if (!market) {\n            if (symbol in this.markets_by_id) {\n                market = this.markets_by_id[symbol];\n            }\n        }\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'highPrice'),\n            'low': this.safeFloat (ticker, 'lowPrice'),\n            'bid': this.safeFloat (ticker, 'bidPrice'),\n            'ask': this.safeFloat (ticker, 'askPrice'),\n            'vwap': this.safeFloat (ticker, 'weightedAvgPrice'),\n            'open': this.safeFloat (ticker, 'openPrice'),\n            'close': this.safeFloat (ticker, 'prevClosePrice'),\n            'first': undefined,\n            'last': this.safeFloat (ticker, 'lastPrice'),\n            'change': this.safeFloat (ticker, 'priceChangePercent'),\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'volume'),\n            'quoteVolume': this.safeFloat (ticker, 'quoteVolume'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetTicker24hr (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        return this.parseTicker (response, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let rawTickers = await this.publicGetTicker24hr (params);\n        let tickers = [];\n        for (let i = 0; i < rawTickers.length; i++) {\n            tickers.push (this.parseTicker (rawTickers[i]));\n        }\n        let tickersBySymbol = this.indexBy (tickers, 'symbol');\n        // return all of them if no symbols were passed in the first argument\n        if (!symbols)\n            return tickersBySymbol;\n        // otherwise filter by symbol\n        let result = {};\n        for (let i = 0; i < symbols.length; i++) {\n            let symbol = symbols[i];\n            if (symbol in tickersBySymbol)\n                result[symbol] = tickersBySymbol[symbol];\n        }\n        return result;\n    }\n\n    parseOHLCV (ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {\n        return [\n            ohlcv[0],\n            parseFloat (ohlcv[1]),\n            parseFloat (ohlcv[2]),\n            parseFloat (ohlcv[3]),\n            parseFloat (ohlcv[4]),\n            parseFloat (ohlcv[5]),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = {\n            'symbol': market['id'],\n            'interval': this.timeframes[timeframe],\n        };\n        request['limit'] = (limit) ? limit : 500; // default == max == 500\n        if (since)\n            request['startTime'] = since;\n        let response = await this.publicGetKlines (this.extend (request, params));\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        let timestampField = ('T' in trade) ? 'T' : 'time';\n        let timestamp = trade[timestampField];\n        let priceField = ('p' in trade) ? 'p' : 'price';\n        let price = parseFloat (trade[priceField]);\n        let amountField = ('q' in trade) ? 'q' : 'qty';\n        let amount = parseFloat (trade[amountField]);\n        let idField = ('a' in trade) ? 'a' : 'id';\n        let id = trade[idField].toString ();\n        let side = undefined;\n        let order = undefined;\n        if ('orderId' in trade)\n            order = trade['orderId'].toString ();\n        if ('m' in trade) {\n            side = trade['m'] ? 'sell' : 'buy'; // this is reversed intentionally\n        } else {\n            side = (trade['isBuyer']) ? 'buy' : 'sell'; // this is a true side\n        }\n        let fee = undefined;\n        if ('commission' in trade) {\n            fee = {\n                'cost': parseFloat (trade['commission']),\n                'currency': this.commonCurrencyCode (trade['commissionAsset']),\n            };\n        }\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'id': id,\n            'order': order,\n            'type': undefined,\n            'side': side,\n            'price': price,\n            'cost': price * amount,\n            'amount': amount,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = {\n            'symbol': market['id'],\n        };\n        if (since) {\n            request['startTime'] = since;\n            request['endTime'] = since + 86400000;\n        }\n        if (limit)\n            request['limit'] = limit;\n        // 'fromId': 123,    // ID to get aggregate trades from INCLUSIVE.\n        // 'startTime': 456, // Timestamp in ms to get aggregate trades from INCLUSIVE.\n        // 'endTime': 789,   // Timestamp in ms to get aggregate trades until INCLUSIVE.\n        // 'limit': 500,     // default = maximum = 500\n        let response = await this.publicGetAggTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOrderStatus (status) {\n        if (status == 'NEW')\n            return 'open';\n        if (status == 'PARTIALLY_FILLED')\n            return 'open';\n        if (status == 'FILLED')\n            return 'closed';\n        if (status == 'CANCELED')\n            return 'canceled';\n        return status.toLowerCase ();\n    }\n\n    parseOrder (order, market = undefined) {\n        let status = this.parseOrderStatus (order['status']);\n        let symbol = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        } else {\n            let id = order['symbol'];\n            if (id in this.markets_by_id) {\n                market = this.markets_by_id[id];\n                symbol = market['symbol'];\n            }\n        }\n        let timestamp = order['time'];\n        let price = parseFloat (order['price']);\n        let amount = parseFloat (order['origQty']);\n        let filled = this.safeFloat (order, 'executedQty', 0.0);\n        let remaining = Math.max (amount - filled, 0.0);\n        let result = {\n            'info': order,\n            'id': order['orderId'].toString (),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': order['type'].toLowerCase (),\n            'side': order['side'].toLowerCase (),\n            'price': price,\n            'amount': amount,\n            'cost': price * amount,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': undefined,\n        };\n        return result;\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let order = {\n            'symbol': market['id'],\n            'quantity': this.amountToPrecision (symbol, amount),\n            'type': type.toUpperCase (),\n            'side': side.toUpperCase (),\n        };\n        if (type == 'limit') {\n            order = this.extend (order, {\n                'price': this.priceToPrecision (symbol, price),\n                'timeInForce': 'GTC', // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel\n            });\n        }\n        let response = await this.privatePostOrder (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['orderId'].toString (),\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (!symbol)\n            throw new ExchangeError (this.id + ' fetchOrder requires a symbol param');\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.privateGetOrder (this.extend ({\n            'symbol': market['id'],\n            'orderId': parseInt (id),\n        }, params));\n        return this.parseOrder (response, market);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (!symbol)\n            throw new ExchangeError (this.id + ' fetchOrders requires a symbol param');\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = {\n            'symbol': market['id'],\n        };\n        if (limit)\n            request['limit'] = limit;\n        let response = await this.privateGetAllOrders (this.extend (request, params));\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (!symbol)\n            throw new ExchangeError (this.id + ' fetchOpenOrders requires a symbol param');\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.privateGetOpenOrders (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (!symbol)\n            throw new ExchangeError (this.id + ' cancelOrder requires a symbol argument');\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = undefined;\n        try {\n            response = await this.privateDeleteOrder (this.extend ({\n                'symbol': market['id'],\n                'orderId': parseInt (id),\n                // 'origClientOrderId': id,\n            }, params));\n        } catch (e) {\n            if (this.last_http_response.indexOf ('UNKNOWN_ORDER') >= 0)\n                throw new OrderNotFound (this.id + ' cancelOrder() error: ' + this.last_http_response);\n            throw e;\n        }\n        return response;\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (!symbol)\n            throw new ExchangeError (this.id + ' fetchMyTrades requires a symbol argument');\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = {\n            'symbol': market['id'],\n        };\n        if (limit)\n            request['limit'] = limit;\n        let response = await this.privateGetMyTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    commonCurrencyCode (currency) {\n        if (currency == 'BCC')\n            return 'BCH';\n        return currency;\n    }\n\n    currencyId (currency) {\n        if (currency == 'BCH')\n            return 'BCC';\n        return currency;\n    }\n\n    async fetchDepositAddress (currency, params = {}) {\n        let response = await this.wapiGetDepositAddress (this.extend ({\n            'asset': this.currencyId (currency),\n            'recvWindow': 10000000,\n        }, params));\n        if ('success' in response) {\n            if (response['success']) {\n                let address = this.safeString (response, 'address');\n                return {\n                    'currency': currency,\n                    'address': address,\n                    'status': 'ok',\n                    'info': response,\n                };\n            }\n        }\n        throw new ExchangeError (this.id + ' fetchDepositAddress failed: ' + this.last_http_response);\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        let response = await this.wapiPostWithdraw (this.extend ({\n            'asset': this.currencyId (currency),\n            'address': address,\n            'amount': parseFloat (amount),\n            'recvWindow': 10000000,\n        }, params));\n        return {\n            'info': response,\n            'id': undefined,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api];\n        url += '/' + path;\n        if (api == 'wapi')\n            url += '.html';\n        if ((api == 'private') || (api == 'wapi')) {\n            this.checkRequiredCredentials ();\n            let nonce = this.milliseconds ();\n            let query = this.urlencode (this.extend ({ 'timestamp': nonce }, params));\n            let signature = this.hmac (this.encode (query), this.encode (this.secret));\n            query += '&' + 'signature=' + signature;\n            headers = {\n                'X-MBX-APIKEY': this.apiKey,\n            };\n            if ((method == 'GET') || (api == 'wapi')) {\n                url += '?' + query;\n            } else {\n                body = query;\n                headers['Content-Type'] = 'application/x-www-form-urlencoded';\n            }\n        } else {\n            if (Object.keys (params).length)\n                url += '?' + this.urlencode (params);\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body) {\n        if (code >= 400) {\n            if (code == 418)\n                throw new DDoSProtection (this.id + ' ' + code.toString () + ' ' + reason + ' ' + body);\n            if (body.indexOf ('MIN_NOTIONAL') >= 0)\n                throw new InvalidOrder (this.id + ' order cost = amount * price should be > (0.001 BTC or 0.01 ETH or 1 BNB or 1 USDT)' + body);\n            if (body.indexOf ('LOT_SIZE') >= 0)\n                throw new InvalidOrder (this.id + ' order amount should be evenly divisible by lot size, use this.amountToLots (symbol, amount) ' + body);\n            if (body.indexOf ('PRICE_FILTER') >= 0)\n                throw new InvalidOrder (this.id + ' order price exceeds allowed price precision or invalid, use this.priceToPrecision (symbol, amount) ' + body);\n            if (body.indexOf ('Order does not exist') >= 0)\n                throw new OrderNotFound (this.id + ' ' + body);\n        }\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('code' in response) {\n            if (response['code'] < 0) {\n                if (response['code'] == -2010)\n                    throw new InsufficientFunds (this.id + ' ' + this.json (response));\n                if (response['code'] == -2011)\n                    throw new OrderNotFound (this.id + ' ' + this.json (response));\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n            }\n        }\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/binance.js\n// module id = 374\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bit2c extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bit2c',\n            'name': 'Bit2C',\n            'countries': 'IL', // Israel\n            'rateLimit': 3000,\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766119-3593220e-5ece-11e7-8b3a-5a041f6bcc3f.jpg',\n                'api': 'https://www.bit2c.co.il',\n                'www': 'https://www.bit2c.co.il',\n                'doc': [\n                    'https://www.bit2c.co.il/home/api',\n                    'https://github.com/OferE/bit2c',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'Exchanges/{pair}/Ticker',\n                        'Exchanges/{pair}/orderbook',\n                        'Exchanges/{pair}/trades',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'Account/Balance',\n                        'Account/Balance/v2',\n                        'Merchant/CreateCheckout',\n                        'Order/AccountHistory',\n                        'Order/AddCoinFundsRequest',\n                        'Order/AddFund',\n                        'Order/AddOrder',\n                        'Order/AddOrderMarketPriceBuy',\n                        'Order/AddOrderMarketPriceSell',\n                        'Order/CancelOrder',\n                        'Order/MyOrders',\n                        'Payment/GetMyId',\n                        'Payment/Send',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/NIS': { 'id': 'BtcNis', 'symbol': 'BTC/NIS', 'base': 'BTC', 'quote': 'NIS' },\n                'BCH/NIS': { 'id': 'BchNis', 'symbol': 'BCH/NIS', 'base': 'BCH', 'quote': 'NIS' },\n                'LTC/NIS': { 'id': 'LtcNis', 'symbol': 'LTC/NIS', 'base': 'LTC', 'quote': 'NIS' },\n                'BTG/NIS': { 'id': 'BtgNis', 'symbol': 'BTG/NIS', 'base': 'BTG', 'quote': 'NIS' },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.5 / 100,\n                    'taker': 0.5 / 100,\n                },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        let balance = await this.privatePostAccountBalanceV2 ();\n        let result = { 'info': balance };\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let account = this.account ();\n            if (currency in balance) {\n                let available = 'AVAILABLE_' + currency;\n                account['free'] = balance[available];\n                account['total'] = balance[currency];\n                account['used'] = account['total'] - account['free'];\n            }\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let orderbook = await this.publicGetExchangesPairOrderbook (this.extend ({\n            'pair': this.marketId (symbol),\n        }, params));\n        return this.parseOrderBook (orderbook);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let ticker = await this.publicGetExchangesPairTicker (this.extend ({\n            'pair': this.marketId (symbol),\n        }, params));\n        let timestamp = this.milliseconds ();\n        let averagePrice = parseFloat (ticker['av']);\n        let baseVolume = parseFloat (ticker['a']);\n        let quoteVolume = baseVolume * averagePrice;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': parseFloat (ticker['h']),\n            'ask': parseFloat (ticker['l']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['ll']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': averagePrice,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        let timestamp = parseInt (trade['date']) * 1000;\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'id': trade['tid'].toString (),\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': undefined,\n            'type': undefined,\n            'side': undefined,\n            'price': trade['price'],\n            'amount': trade['amount'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetExchangesPairTrades (this.extend ({\n            'pair': market['id'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        let method = 'privatePostOrderAddOrder';\n        let order = {\n            'Amount': amount,\n            'Pair': this.marketId (symbol),\n        };\n        if (type == 'market') {\n            method += 'MarketPrice' + this.capitalize (side);\n        } else {\n            order['Price'] = price;\n            order['Total'] = amount * price;\n            order['IsBid'] = (side == 'buy');\n        }\n        let result = await this[method] (this.extend (order, params));\n        return {\n            'info': result,\n            'id': result['NewOrder']['id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostOrderCancelOrder ({ 'id': id });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.implodeParams (path, params);\n        if (api == 'public') {\n            url += '.json';\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            let query = this.extend ({ 'nonce': nonce }, params);\n            body = this.urlencode (query);\n            let signature = this.hmac (this.encode (body), this.encode (this.secret), 'sha512', 'base64');\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'key': this.apiKey,\n                'sign': this.decode (signature),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/bit2c.js\n// module id = 375\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitbay extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitbay',\n            'name': 'BitBay',\n            'countries': [ 'PL', 'EU' ], // Poland\n            'rateLimit': 1000,\n            'hasCORS': true,\n            'hasWithdraw': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766132-978a7bd8-5ece-11e7-9540-bc96d1e9bbb8.jpg',\n                'www': 'https://bitbay.net',\n                'api': {\n                    'public': 'https://bitbay.net/API/Public',\n                    'private': 'https://bitbay.net/API/Trading/tradingApi.php',\n                },\n                'doc': [\n                    'https://bitbay.net/public-api',\n                    'https://bitbay.net/account/tab-api',\n                    'https://github.com/BitBayNet/API',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        '{id}/all',\n                        '{id}/market',\n                        '{id}/orderbook',\n                        '{id}/ticker',\n                        '{id}/trades',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'info',\n                        'trade',\n                        'cancel',\n                        'orderbook',\n                        'orders',\n                        'transfer',\n                        'withdraw',\n                        'history',\n                        'transactions',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/USD': { 'id': 'BTCUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'baseId': 'BTC', 'quoteId': 'USD' },\n                'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'baseId': 'BTC', 'quoteId': 'EUR' },\n                'BTC/PLN': { 'id': 'BTCPLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN', 'baseId': 'BTC', 'quoteId': 'PLN' },\n                'LTC/USD': { 'id': 'LTCUSD', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD', 'baseId': 'LTC', 'quoteId': 'USD' },\n                'LTC/EUR': { 'id': 'LTCEUR', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR', 'baseId': 'LTC', 'quoteId': 'EUR' },\n                'LTC/PLN': { 'id': 'LTCPLN', 'symbol': 'LTC/PLN', 'base': 'LTC', 'quote': 'PLN', 'baseId': 'LTC', 'quoteId': 'PLN' },\n                'LTC/BTC': { 'id': 'LTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'baseId': 'LTC', 'quoteId': 'BTC' },\n                'ETH/USD': { 'id': 'ETHUSD', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD', 'baseId': 'ETH', 'quoteId': 'USD' },\n                'ETH/EUR': { 'id': 'ETHEUR', 'symbol': 'ETH/EUR', 'base': 'ETH', 'quote': 'EUR', 'baseId': 'ETH', 'quoteId': 'EUR' },\n                'ETH/PLN': { 'id': 'ETHPLN', 'symbol': 'ETH/PLN', 'base': 'ETH', 'quote': 'PLN', 'baseId': 'ETH', 'quoteId': 'PLN' },\n                'ETH/BTC': { 'id': 'ETHBTC', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'baseId': 'ETH', 'quoteId': 'BTC' },\n                'LSK/USD': { 'id': 'LSKUSD', 'symbol': 'LSK/USD', 'base': 'LSK', 'quote': 'USD', 'baseId': 'LSK', 'quoteId': 'USD' },\n                'LSK/EUR': { 'id': 'LSKEUR', 'symbol': 'LSK/EUR', 'base': 'LSK', 'quote': 'EUR', 'baseId': 'LSK', 'quoteId': 'EUR' },\n                'LSK/PLN': { 'id': 'LSKPLN', 'symbol': 'LSK/PLN', 'base': 'LSK', 'quote': 'PLN', 'baseId': 'LSK', 'quoteId': 'PLN' },\n                'LSK/BTC': { 'id': 'LSKBTC', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC', 'baseId': 'LSK', 'quoteId': 'BTC' },\n                'BCH/USD': { 'id': 'BCCUSD', 'symbol': 'BCH/USD', 'base': 'BCH', 'quote': 'USD', 'baseId': 'BCC', 'quoteId': 'USD' },\n                'BCH/EUR': { 'id': 'BCCEUR', 'symbol': 'BCH/EUR', 'base': 'BCH', 'quote': 'EUR', 'baseId': 'BCC', 'quoteId': 'EUR' },\n                'BCH/PLN': { 'id': 'BCCPLN', 'symbol': 'BCH/PLN', 'base': 'BCH', 'quote': 'PLN', 'baseId': 'BCC', 'quoteId': 'PLN' },\n                'BCH/BTC': { 'id': 'BCCBTC', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC', 'baseId': 'BCC', 'quoteId': 'BTC' },\n                'BTG/USD': { 'id': 'BTGUSD', 'symbol': 'BTG/USD', 'base': 'BTG', 'quote': 'USD', 'baseId': 'BTG', 'quoteId': 'USD' },\n                'BTG/EUR': { 'id': 'BTGEUR', 'symbol': 'BTG/EUR', 'base': 'BTG', 'quote': 'EUR', 'baseId': 'BTG', 'quoteId': 'EUR' },\n                'BTG/PLN': { 'id': 'BTGPLN', 'symbol': 'BTG/PLN', 'base': 'BTG', 'quote': 'PLN', 'baseId': 'BTG', 'quoteId': 'PLN' },\n                'BTG/BTC': { 'id': 'BTGBTC', 'symbol': 'BTG/BTC', 'base': 'BTG', 'quote': 'BTC', 'baseId': 'BTG', 'quoteId': 'BTC' },\n                'DASH/USD': { 'id': 'DASHUSD', 'symbol': 'DASH/USD', 'base': 'DASH', 'quote': 'USD', 'baseId': 'DASH', 'quoteId': 'USD' },\n                'DASH/EUR': { 'id': 'DASHEUR', 'symbol': 'DASH/EUR', 'base': 'DASH', 'quote': 'EUR', 'baseId': 'DASH', 'quoteId': 'EUR' },\n                'DASH/PLN': { 'id': 'DASHPLN', 'symbol': 'DASH/PLN', 'base': 'DASH', 'quote': 'PLN', 'baseId': 'DASH', 'quoteId': 'PLN' },\n                'DASH/BTC': { 'id': 'DASHBTC', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC', 'baseId': 'DASH', 'quoteId': 'BTC' },\n                'GAME/USD': { 'id': 'GAMEUSD', 'symbol': 'GAME/USD', 'base': 'GAME', 'quote': 'USD', 'baseId': 'GAME', 'quoteId': 'USD' },\n                'GAME/EUR': { 'id': 'GAMEEUR', 'symbol': 'GAME/EUR', 'base': 'GAME', 'quote': 'EUR', 'baseId': 'GAME', 'quoteId': 'EUR' },\n                'GAME/PLN': { 'id': 'GAMEPLN', 'symbol': 'GAME/PLN', 'base': 'GAME', 'quote': 'PLN', 'baseId': 'GAME', 'quoteId': 'PLN' },\n                'GAME/BTC': { 'id': 'GAMEBTC', 'symbol': 'GAME/BTC', 'base': 'GAME', 'quote': 'BTC', 'baseId': 'GAME', 'quoteId': 'BTC' },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.3 / 100,\n                    'taker': 0.0043,\n                },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        let response = await this.privatePostInfo ();\n        if ('balances' in response) {\n            let balance = response['balances'];\n            let result = { 'info': balance };\n            let codes = Object.keys (this.currencies);\n            for (let i = 0; i < codes.length; i++) {\n                let code = codes[i];\n                let currency = this.currencies[code];\n                let id = currency['id'];\n                let account = this.account ();\n                if (id in balance) {\n                    account['free'] = parseFloat (balance[id]['available']);\n                    account['used'] = parseFloat (balance[id]['locked']);\n                    account['total'] = this.sum (account['free'], account['used']);\n                }\n                result[code] = account;\n            }\n            return this.parseBalance (result);\n        }\n        throw new ExchangeError (this.id + ' empty balance response ' + this.json (response));\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let orderbook = await this.publicGetIdOrderbook (this.extend ({\n            'id': this.marketId (symbol),\n        }, params));\n        return this.parseOrderBook (orderbook);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let ticker = await this.publicGetIdTicker (this.extend ({\n            'id': this.marketId (symbol),\n        }, params));\n        let timestamp = this.milliseconds ();\n        let baseVolume = this.safeFloat (ticker, 'volume');\n        let vwap = this.safeFloat (ticker, 'vwap');\n        let quoteVolume = baseVolume * vwap;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'max'),\n            'low': this.safeFloat (ticker, 'min'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'ask': this.safeFloat (ticker, 'ask'),\n            'vwap': vwap,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': this.safeFloat (ticker, 'last'),\n            'change': undefined,\n            'percentage': undefined,\n            'average': this.safeFloat (ticker, 'average'),\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = trade['date'] * 1000;\n        return {\n            'id': trade['tid'],\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': trade['type'],\n            'price': trade['price'],\n            'amount': trade['amount'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetIdTrades (this.extend ({\n            'id': market['id'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        let market = this.market (symbol);\n        return this.privatePostTrade (this.extend ({\n            'type': side,\n            'currency': market['baseId'],\n            'amount': amount,\n            'payment_currency': market['quoteId'],\n            'rate': price,\n        }, params));\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostCancel ({ 'id': id });\n    }\n\n    isFiat (currency) {\n        let fiatCurrencies = {\n            'USD': true,\n            'EUR': true,\n            'PLN': true,\n        };\n        if (currency in fiatCurrencies)\n            return true;\n        return false;\n    }\n\n    async withdraw (code, amount, address, params = {}) {\n        await this.loadMarkets ();\n        let method = undefined;\n        let currency = this.currency (code);\n        let request = {\n            'currency': currency['id'],\n            'quantity': amount,\n        };\n        if (this.isFiat (code)) {\n            method = 'privatePostWithdraw';\n            // request['account'] = params['account']; // they demand an account number\n            // request['express'] = params['express']; // whatever it means, they don't explain\n            // request['bic'] = '';\n        } else {\n            method = 'privatePostTransfer';\n            request['address'] = address;\n        }\n        let response = await this[method] (this.extend (request, params));\n        return {\n            'info': response,\n            'id': undefined,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api];\n        if (api == 'public') {\n            url += '/' + this.implodeParams (path, params) + '.json';\n        } else {\n            this.checkRequiredCredentials ();\n            body = this.urlencode (this.extend ({\n                'method': path,\n                'moment': this.nonce (),\n            }, params));\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'API-Key': this.apiKey,\n                'API-Hash': this.hmac (this.encode (body), this.encode (this.secret), 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/bitbay.js\n// module id = 376\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitcoincoid extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitcoincoid',\n            'name': 'Bitcoin.co.id',\n            'countries': 'ID', // Indonesia\n            'hasCORS': false,\n            'version': '1.7', // as of 6 November 2017\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766138-043c7786-5ecf-11e7-882b-809c14f38b53.jpg',\n                'api': {\n                    'public': 'https://vip.bitcoin.co.id/api',\n                    'private': 'https://vip.bitcoin.co.id/tapi',\n                },\n                'www': 'https://www.bitcoin.co.id',\n                'doc': [\n                    'https://vip.bitcoin.co.id/downloads/BITCOINCOID-API-DOCUMENTATION.pdf',\n                    'https://vip.bitcoin.co.id/trade_api',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        '{pair}/ticker',\n                        '{pair}/trades',\n                        '{pair}/depth',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'getInfo',\n                        'transHistory',\n                        'trade',\n                        'tradeHistory',\n                        'openOrders',\n                        'cancelOrder',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/IDR': { 'id': 'btc_idr', 'symbol': 'BTC/IDR', 'base': 'BTC', 'quote': 'IDR', 'baseId': 'btc', 'quoteId': 'idr' },\n                'BCH/IDR': { 'id': 'bch_idr', 'symbol': 'BCH/IDR', 'base': 'BCH', 'quote': 'IDR', 'baseId': 'bch', 'quoteId': 'idr' },\n                'BTG/IDR': { 'id': 'btg_idr', 'symbol': 'BTG/IDR', 'base': 'BTG', 'quote': 'IDR', 'baseId': 'btg', 'quoteId': 'idr' },\n                'ETH/IDR': { 'id': 'eth_idr', 'symbol': 'ETH/IDR', 'base': 'ETH', 'quote': 'IDR', 'baseId': 'eth', 'quoteId': 'idr' },\n                'ETC/IDR': { 'id': 'etc_idr', 'symbol': 'ETC/IDR', 'base': 'ETC', 'quote': 'IDR', 'baseId': 'etc', 'quoteId': 'idr' },\n                'LTC/IDR': { 'id': 'ltc_idr', 'symbol': 'LTC/IDR', 'base': 'LTC', 'quote': 'IDR', 'baseId': 'ltc', 'quoteId': 'idr' },\n                'NXT/IDR': { 'id': 'nxt_idr', 'symbol': 'NXT/IDR', 'base': 'NXT', 'quote': 'IDR', 'baseId': 'nxt', 'quoteId': 'idr' },\n                'WAVES/IDR': { 'id': 'waves_idr', 'symbol': 'WAVES/IDR', 'base': 'WAVES', 'quote': 'IDR', 'baseId': 'waves', 'quoteId': 'idr' },\n                'XRP/IDR': { 'id': 'xrp_idr', 'symbol': 'XRP/IDR', 'base': 'XRP', 'quote': 'IDR', 'baseId': 'xrp', 'quoteId': 'idr' },\n                'XZC/IDR': { 'id': 'xzc_idr', 'symbol': 'XZC/IDR', 'base': 'XZC', 'quote': 'IDR', 'baseId': 'xzc', 'quoteId': 'idr' },\n                'XLM/IDR': {'id': 'str_idr', 'symbol': 'XLM/IDR', 'base': 'XLM', 'quote': 'IDR', 'baseId': 'str', 'quoteId': 'idr'},\n                'BTS/BTC': { 'id': 'bts_btc', 'symbol': 'BTS/BTC', 'base': 'BTS', 'quote': 'BTC', 'baseId': 'bts', 'quoteId': 'btc' },\n                'DASH/BTC': { 'id': 'drk_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC', 'baseId': 'drk', 'quoteId': 'btc' },\n                'DOGE/BTC': { 'id': 'doge_btc', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC', 'baseId': 'doge', 'quoteId': 'btc' },\n                'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'baseId': 'eth', 'quoteId': 'btc' },\n                'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'baseId': 'ltc', 'quoteId': 'btc' },\n                'NXT/BTC': { 'id': 'nxt_btc', 'symbol': 'NXT/BTC', 'base': 'NXT', 'quote': 'BTC', 'baseId': 'nxt', 'quoteId': 'btc' },\n                'XLM/BTC': { 'id': 'str_btc', 'symbol': 'XLM/BTC', 'base': 'XLM', 'quote': 'BTC', 'baseId': 'str', 'quoteId': 'btc' },\n                'XEM/BTC': { 'id': 'nem_btc', 'symbol': 'XEM/BTC', 'base': 'XEM', 'quote': 'BTC', 'baseId': 'nem', 'quoteId': 'btc' },\n                'XRP/BTC': { 'id': 'xrp_btc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC', 'baseId': 'xrp', 'quoteId': 'btc' },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        let response = await this.privatePostGetInfo ();\n        let balance = response['return'];\n        let result = { 'info': balance };\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let lowercase = currency.toLowerCase ();\n            let account = this.account ();\n            account['free'] = this.safeFloat (balance['balance'], lowercase, 0.0);\n            account['used'] = this.safeFloat (balance['balance_hold'], lowercase, 0.0);\n            account['total'] = this.sum (account['free'], account['used']);\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let orderbook = await this.publicGetPairDepth (this.extend ({\n            'pair': this.marketId (symbol),\n        }, params));\n        return this.parseOrderBook (orderbook, undefined, 'buy', 'sell');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetPairTicker (this.extend ({\n            'pair': market['id'],\n        }, params));\n        let ticker = response['ticker'];\n        let timestamp = parseFloat (ticker['server_time']) * 1000;\n        let baseVolume = 'vol_' + market['baseId'].toLowerCase ();\n        let quoteVolume = 'vol_' + market['quoteId'].toLowerCase ();\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['buy']),\n            'ask': parseFloat (ticker['sell']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker[baseVolume]),\n            'quoteVolume': parseFloat (ticker[quoteVolume]),\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = parseInt (trade['date']) * 1000;\n        return {\n            'id': trade['tid'],\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': trade['type'],\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['amount']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetPairTrades (this.extend ({\n            'pair': market['id'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        let market = this.market (symbol);\n        let order = {\n            'pair': market['id'],\n            'type': side,\n            'price': price,\n        };\n        let base = market['baseId'];\n        order[base] = amount;\n        let result = await this.privatePostTrade (this.extend (order, params));\n        return {\n            'info': result,\n            'id': result['return']['order_id'].toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostCancelOrder (this.extend ({\n            'order_id': id,\n        }, params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api];\n        if (api == 'public') {\n            url += '/' + this.implodeParams (path, params);\n        } else {\n            this.checkRequiredCredentials ();\n            body = this.urlencode (this.extend ({\n                'method': path,\n                'nonce': this.nonce (),\n            }, params));\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': this.apiKey,\n                'Sign': this.hmac (this.encode (body), this.encode (this.secret), 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('error' in response)\n            throw new ExchangeError (this.id + ' ' + response['error']);\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/bitcoincoid.js\n// module id = 377\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst bitfinex = require ('./bitfinex.js')\nconst { ExchangeError, NotSupported, InsufficientFunds } = require ('./base/errors')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class bitfinex2 extends bitfinex {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitfinex2',\n            'name': 'Bitfinex v2',\n            'countries': 'VG',\n            'version': 'v2',\n            'hasCORS': true,\n            // old metainfo interface\n            'hasFetchOrder': true,\n            'hasFetchTickers': true,\n            'hasFetchOHLCV': true,\n            'hasWithdraw': true,\n            'hasDeposit': false,\n            'hasFetchOpenOrders': false,\n            'hasFetchClosedOrders': false,\n            // new metainfo interface\n            'has': {\n                'fetchOHLCV': true,\n                'fetchTickers': true,\n                'fetchOrder': true,\n                'fetchOpenOrders': false,\n                'fetchClosedOrders': false,\n                'withdraw': true,\n                'deposit': false,\n            },\n            'timeframes': {\n                '1m': '1m',\n                '5m': '5m',\n                '15m': '15m',\n                '30m': '30m',\n                '1h': '1h',\n                '3h': '3h',\n                '6h': '6h',\n                '12h': '12h',\n                '1d': '1D',\n                '1w': '7D',\n                '2w': '14D',\n                '1M': '1M',\n            },\n            'rateLimit': 1500,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766244-e328a50c-5ed2-11e7-947b-041416579bb3.jpg',\n                'api': 'https://api.bitfinex.com',\n                'www': 'https://www.bitfinex.com',\n                'doc': [\n                    'https://bitfinex.readme.io/v2/docs',\n                    'https://github.com/bitfinexcom/bitfinex-api-node',\n                ],\n                'fees': 'https://www.bitfinex.com/fees',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'platform/status',\n                        'tickers',\n                        'ticker/{symbol}',\n                        'trades/{symbol}/hist',\n                        'book/{symbol}/{precision}',\n                        'book/{symbol}/P0',\n                        'book/{symbol}/P1',\n                        'book/{symbol}/P2',\n                        'book/{symbol}/P3',\n                        'book/{symbol}/R0',\n                        'symbols_details',\n                        'stats1/{key}:{size}:{symbol}/{side}/{section}',\n                        'stats1/{key}:{size}:{symbol}/long/last',\n                        'stats1/{key}:{size}:{symbol}/long/hist',\n                        'stats1/{key}:{size}:{symbol}/short/last',\n                        'stats1/{key}:{size}:{symbol}/short/hist',\n                        'candles/trade:{timeframe}:{symbol}/{section}',\n                        'candles/trade:{timeframe}:{symbol}/last',\n                        'candles/trade:{timeframe}:{symbol}/hist',\n                    ],\n                    'post': [\n                        'calc/trade/avg',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'auth/r/wallets',\n                        'auth/r/orders/{symbol}',\n                        'auth/r/orders/{symbol}/new',\n                        'auth/r/orders/{symbol}/hist',\n                        'auth/r/order/{symbol}:{id}/trades',\n                        'auth/r/trades/{symbol}/hist',\n                        'auth/r/positions',\n                        'auth/r/funding/offers/{symbol}',\n                        'auth/r/funding/offers/{symbol}/hist',\n                        'auth/r/funding/loans/{symbol}',\n                        'auth/r/funding/loans/{symbol}/hist',\n                        'auth/r/funding/credits/{symbol}',\n                        'auth/r/funding/credits/{symbol}/hist',\n                        'auth/r/funding/trades/{symbol}/hist',\n                        'auth/r/info/margin/{key}',\n                        'auth/r/info/funding/{key}',\n                        'auth/r/movements/{currency}/hist',\n                        'auth/r/stats/perf:{timeframe}/hist',\n                        'auth/r/alerts',\n                        'auth/w/alert/set',\n                        'auth/w/alert/{type}:{symbol}:{price}/del',\n                        'auth/calc/order/avail',\n                    ],\n                },\n            },\n            'markets': {\n                'AVT/BTC': { 'id': 'tAVTBTC', 'symbol': 'AVT/BTC', 'base': 'AVT', 'quote': 'BTC' },\n                'AVT/ETH': { 'id': 'tAVTETH', 'symbol': 'AVT/ETH', 'base': 'AVT', 'quote': 'ETH' },\n                'AVT/USD': { 'id': 'tAVTUSD', 'symbol': 'AVT/USD', 'base': 'AVT', 'quote': 'USD' },\n                'CST_BCC/BTC': { 'id': 'tBCCBTC', 'symbol': 'CST_BCC/BTC', 'base': 'CST_BCC', 'quote': 'BTC' },\n                'CST_BCC/USD': { 'id': 'tBCCUSD', 'symbol': 'CST_BCC/USD', 'base': 'CST_BCC', 'quote': 'USD' },\n                'BCH/BTC': { 'id': 'tBCHBTC', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC' },\n                'BCH/ETH': { 'id': 'tBCHETH', 'symbol': 'BCH/ETH', 'base': 'BCH', 'quote': 'ETH' },\n                'BCH/USD': { 'id': 'tBCHUSD', 'symbol': 'BCH/USD', 'base': 'BCH', 'quote': 'USD' },\n                'CST_BCU/BTC': { 'id': 'tBCUBTC', 'symbol': 'CST_BCU/BTC', 'base': 'CST_BCU', 'quote': 'BTC' },\n                'CST_BCU/USD': { 'id': 'tBCUUSD', 'symbol': 'CST_BCU/USD', 'base': 'CST_BCU', 'quote': 'USD' },\n                'BT1/BTC': { 'id': 'tBT1BTC', 'symbol': 'BT1/BTC', 'base': 'BT1', 'quote': 'BTC' },\n                'BT1/USD': { 'id': 'tBT1USD', 'symbol': 'BT1/USD', 'base': 'BT1', 'quote': 'USD' },\n                'BT2/BTC': { 'id': 'tBT2BTC', 'symbol': 'BT2/BTC', 'base': 'BT2', 'quote': 'BTC' },\n                'BT2/USD': { 'id': 'tBT2USD', 'symbol': 'BT2/USD', 'base': 'BT2', 'quote': 'USD' },\n                'BTC/USD': { 'id': 'tBTCUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },\n                'BTC/EUR': { 'id': 'tBTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },\n                'BTG/BTC': { 'id': 'tBTGBTC', 'symbol': 'BTG/BTC', 'base': 'BTG', 'quote': 'BTC' },\n                'BTG/USD': { 'id': 'tBTGUSD', 'symbol': 'BTG/USD', 'base': 'BTG', 'quote': 'USD' },\n                'DASH/BTC': { 'id': 'tDSHBTC', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC' },\n                'DASH/USD': { 'id': 'tDSHUSD', 'symbol': 'DASH/USD', 'base': 'DASH', 'quote': 'USD' },\n                'DAT/BTC': { 'id': 'tDATBTC', 'symbol': 'DAT/BTC', 'base': 'DAT', 'quote': 'BTC' },\n                'DAT/ETH': { 'id': 'tDATETH', 'symbol': 'DAT/ETH', 'base': 'DAT', 'quote': 'ETH' },\n                'DAT/USD': { 'id': 'tDATUSD', 'symbol': 'DAT/USD', 'base': 'DAT', 'quote': 'USD' },\n                'EDO/BTC': { 'id': 'tEDOBTC', 'symbol': 'EDO/BTC', 'base': 'EDO', 'quote': 'BTC' },\n                'EDO/ETH': { 'id': 'tEDOETH', 'symbol': 'EDO/ETH', 'base': 'EDO', 'quote': 'ETH' },\n                'EDO/USD': { 'id': 'tEDOUSD', 'symbol': 'EDO/USD', 'base': 'EDO', 'quote': 'USD' },\n                'EOS/BTC': { 'id': 'tEOSBTC', 'symbol': 'EOS/BTC', 'base': 'EOS', 'quote': 'BTC' },\n                'EOS/ETH': { 'id': 'tEOSETH', 'symbol': 'EOS/ETH', 'base': 'EOS', 'quote': 'ETH' },\n                'EOS/USD': { 'id': 'tEOSUSD', 'symbol': 'EOS/USD', 'base': 'EOS', 'quote': 'USD' },\n                'ETC/BTC': { 'id': 'tETCBTC', 'symbol': 'ETC/BTC', 'base': 'ETC', 'quote': 'BTC' },\n                'ETC/USD': { 'id': 'tETCUSD', 'symbol': 'ETC/USD', 'base': 'ETC', 'quote': 'USD' },\n                'ETH/BTC': { 'id': 'tETHBTC', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },\n                'ETH/USD': { 'id': 'tETHUSD', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD' },\n                'ETP/BTC': { 'id': 'tETPBTC', 'symbol': 'ETP/BTC', 'base': 'ETP', 'quote': 'BTC' },\n                'ETP/ETH': { 'id': 'tETPETH', 'symbol': 'ETP/ETH', 'base': 'ETP', 'quote': 'ETH' },\n                'ETP/USD': { 'id': 'tETPUSD', 'symbol': 'ETP/USD', 'base': 'ETP', 'quote': 'USD' },\n                'IOTA/BTC': { 'id': 'tIOTBTC', 'symbol': 'IOTA/BTC', 'base': 'IOTA', 'quote': 'BTC' },\n                'IOTA/ETH': { 'id': 'tIOTETH', 'symbol': 'IOTA/ETH', 'base': 'IOTA', 'quote': 'ETH' },\n                'IOTA/USD': { 'id': 'tIOTUSD', 'symbol': 'IOTA/USD', 'base': 'IOTA', 'quote': 'USD' },\n                'LTC/BTC': { 'id': 'tLTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },\n                'LTC/USD': { 'id': 'tLTCUSD', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD' },\n                'NEO/BTC': { 'id': 'tNEOBTC', 'symbol': 'NEO/BTC', 'base': 'NEO', 'quote': 'BTC' },\n                'NEO/ETH': { 'id': 'tNEOETH', 'symbol': 'NEO/ETH', 'base': 'NEO', 'quote': 'ETH' },\n                'NEO/USD': { 'id': 'tNEOUSD', 'symbol': 'NEO/USD', 'base': 'NEO', 'quote': 'USD' },\n                'OMG/BTC': { 'id': 'tOMGBTC', 'symbol': 'OMG/BTC', 'base': 'OMG', 'quote': 'BTC' },\n                'OMG/ETH': { 'id': 'tOMGETH', 'symbol': 'OMG/ETH', 'base': 'OMG', 'quote': 'ETH' },\n                'OMG/USD': { 'id': 'tOMGUSD', 'symbol': 'OMG/USD', 'base': 'OMG', 'quote': 'USD' },\n                'QTUM/BTC': { 'id': 'tQTMBTC', 'symbol': 'QTUM/BTC', 'base': 'QTUM', 'quote': 'BTC' },\n                'QTUM/ETH': { 'id': 'tQTMETH', 'symbol': 'QTUM/ETH', 'base': 'QTUM', 'quote': 'ETH' },\n                'QTUM/USD': { 'id': 'tQTMUSD', 'symbol': 'QTUM/USD', 'base': 'QTUM', 'quote': 'USD' },\n                'RRT/BTC': { 'id': 'tRRTBTC', 'symbol': 'RRT/BTC', 'base': 'RRT', 'quote': 'BTC' },\n                'RRT/USD': { 'id': 'tRRTUSD', 'symbol': 'RRT/USD', 'base': 'RRT', 'quote': 'USD' },\n                'SAN/BTC': { 'id': 'tSANBTC', 'symbol': 'SAN/BTC', 'base': 'SAN', 'quote': 'BTC' },\n                'SAN/ETH': { 'id': 'tSANETH', 'symbol': 'SAN/ETH', 'base': 'SAN', 'quote': 'ETH' },\n                'SAN/USD': { 'id': 'tSANUSD', 'symbol': 'SAN/USD', 'base': 'SAN', 'quote': 'USD' },\n                'XMR/BTC': { 'id': 'tXMRBTC', 'symbol': 'XMR/BTC', 'base': 'XMR', 'quote': 'BTC' },\n                'XMR/USD': { 'id': 'tXMRUSD', 'symbol': 'XMR/USD', 'base': 'XMR', 'quote': 'USD' },\n                'XRP/BTC': { 'id': 'tXRPBTC', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' },\n                'XRP/USD': { 'id': 'tXRPUSD', 'symbol': 'XRP/USD', 'base': 'XRP', 'quote': 'USD' },\n                'ZEC/BTC': { 'id': 'tZECBTC', 'symbol': 'ZEC/BTC', 'base': 'ZEC', 'quote': 'BTC' },\n                'ZEC/USD': { 'id': 'tZECUSD', 'symbol': 'ZEC/USD', 'base': 'ZEC', 'quote': 'USD' },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.1 / 100,\n                    'taker': 0.2 / 100,\n                },\n                'funding': {\n                    'withdraw': {\n                        'BTC': 0.0005,\n                        'BCH': 0.0005,\n                        'ETH': 0.01,\n                        'EOS': 0.1,\n                        'LTC': 0.001,\n                        'OMG': 0.1,\n                        'IOT': 0.0,\n                        'NEO': 0.0,\n                        'ETC': 0.01,\n                        'XRP': 0.02,\n                        'ETP': 0.01,\n                        'ZEC': 0.001,\n                        'BTG': 0.0,\n                        'DASH': 0.01,\n                        'XMR': 0.04,\n                        'QTM': 0.01,\n                        'EDO': 0.5,\n                        'DAT': 1.0,\n                        'AVT': 0.5,\n                        'SAN': 0.1,\n                        'USDT': 5.0,\n                    },\n                },\n            },\n        });\n    }\n\n    commonCurrencyCode (currency) {\n        // issue #4 Bitfinex names Dash as DSH, instead of DASH\n        if (currency == 'DSH')\n            return 'DASH';\n        if (currency == 'QTM')\n            return 'QTUM';\n        // issue #796\n        if (currency == 'IOT')\n            return 'IOTA';\n        return currency;\n    }\n\n    async fetchBalance (params = {}) {\n        let response = await this.privatePostAuthRWallets ();\n        let balanceType = this.safeString (params, 'type', 'exchange');\n        let result = { 'info': response };\n        for (let b = 0; b < response.length; b++) {\n            let balance = response[b];\n            let [ accountType, currency, total, interest, available ] = balance;\n            if (accountType == balanceType) {\n                if (currency[0] == 't')\n                    currency = currency.slice (1);\n                let uppercase = currency.toUpperCase ();\n                uppercase = this.commonCurrencyCode (uppercase);\n                let account = this.account ();\n                account['free'] = available;\n                account['total'] = total;\n                if (account['free'])\n                    account['used'] = account['total'] - account['free'];\n                result[uppercase] = account;\n            }\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let orderbook = await this.publicGetBookSymbolPrecision (this.extend ({\n            'symbol': this.marketId (symbol),\n            'precision': 'R0',\n        }, params));\n        let timestamp = this.milliseconds ();\n        let result = {\n            'bids': [],\n            'asks': [],\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n        };\n        for (let i = 0; i < orderbook.length; i++) {\n            let order = orderbook[i];\n            let price = order[1];\n            let amount = order[2];\n            let side = (amount > 0) ? 'bids' : 'asks';\n            amount = Math.abs (amount);\n            result[side].push ([ price, amount ]);\n        }\n        result['bids'] = this.sortBy (result['bids'], 0, true);\n        result['asks'] = this.sortBy (result['asks'], 0);\n        return result;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        let length = ticker.length;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': ticker[length - 2],\n            'low': ticker[length - 1],\n            'bid': ticker[length - 10],\n            'ask': ticker[length - 8],\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': ticker[length - 4],\n            'change': ticker[length - 6],\n            'percentage': ticker[length - 5],\n            'average': undefined,\n            'baseVolume': ticker[length - 3],\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        let tickers = await this.publicGetTickers (this.extend ({\n            'symbols': this.ids.join (','),\n        }, params));\n        let result = {};\n        for (let i = 0; i < tickers.length; i++) {\n            let ticker = tickers[i];\n            let id = ticker[0];\n            let market = this.markets_by_id[id];\n            let symbol = market['symbol'];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let market = this.markets[symbol];\n        let ticker = await this.publicGetTickerSymbol (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market) {\n        let [ id, timestamp, amount, price ] = trade;\n        let side = (amount < 0) ? 'sell' : 'buy';\n        if (amount < 0) {\n            amount = -amount;\n        }\n        return {\n            'id': id.toString (),\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': side,\n            'price': price,\n            'amount': amount,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let request = {\n            'symbol': market['id'],\n        };\n        if (since) {\n            request['start'] = since;\n        }\n        if (limit) {\n            request['limit'] = limit;\n        }\n        let response = await this.publicGetTradesSymbolHist (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let request = {\n            'symbol': market['id'],\n            'timeframe': this.timeframes[timeframe],\n        };\n        if (limit)\n            request['limit'] = limit;\n        if (since)\n            request['start'] = since;\n        request = this.extend (request, params);\n        let response = await this.publicGetCandlesTradeTimeframeSymbolHist (request);\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        throw new NotSupported (this.id + ' createOrder not implemented yet');\n    }\n\n    cancelOrder (id, symbol = undefined, params = {}) {\n        throw new NotSupported (this.id + ' cancelOrder not implemented yet');\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        throw new NotSupported (this.id + ' fetchOrder not implemented yet');\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        throw new NotSupported (this.id + ' withdraw not implemented yet');\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let request = this.version + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        let url = this.urls['api'] + '/' + request;\n        if (api == 'public') {\n            if (Object.keys (query).length) {\n                url += '?' + this.urlencode (query);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ().toString ();\n            body = this.json (query);\n            let auth = '/api' + '/' + request + nonce + body;\n            let signature = this.hmac (this.encode (auth), this.encode (this.secret), 'sha384');\n            headers = {\n                'bfx-nonce': nonce,\n                'bfx-apikey': this.apiKey,\n                'bfx-signature': signature,\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if (response) {\n            if ('message' in response) {\n                if (response['message'].indexOf ('not enough exchange balance') >= 0)\n                    throw new InsufficientFunds (this.id + ' ' + this.json (response));\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n            }\n            return response;\n        } else if (response == '') {\n            throw new ExchangeError (this.id + ' returned empty response');\n        }\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/bitfinex2.js\n// module id = 378\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitflyer extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitflyer',\n            'name': 'bitFlyer',\n            'countries': 'JP',\n            'version': 'v1',\n            'rateLimit': 500,\n            'hasCORS': false,\n            'hasWithdraw': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/28051642-56154182-660e-11e7-9b0d-6042d1e6edd8.jpg',\n                'api': 'https://api.bitflyer.jp',\n                'www': 'https://bitflyer.jp',\n                'doc': 'https://bitflyer.jp/API',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'getmarkets',    // or 'markets'\n                        'getboard',      // or 'board'\n                        'getticker',     // or 'ticker'\n                        'getexecutions', // or 'executions'\n                        'gethealth',\n                        'getchats',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'getpermissions',\n                        'getbalance',\n                        'getcollateral',\n                        'getcollateralaccounts',\n                        'getaddresses',\n                        'getcoinins',\n                        'getcoinouts',\n                        'getbankaccounts',\n                        'getdeposits',\n                        'getwithdrawals',\n                        'getchildorders',\n                        'getparentorders',\n                        'getparentorder',\n                        'getexecutions',\n                        'getpositions',\n                        'gettradingcommission',\n                    ],\n                    'post': [\n                        'sendcoin',\n                        'withdraw',\n                        'sendchildorder',\n                        'cancelchildorder',\n                        'sendparentorder',\n                        'cancelparentorder',\n                        'cancelallchildorders',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.25 / 100,\n                    'taker': 0.25 / 100,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetMarkets ();\n        let result = [];\n        for (let p = 0; p < markets.length; p++) {\n            let market = markets[p];\n            let id = market['product_code'];\n            let currencies = id.split ('_');\n            let base = undefined;\n            let quote = undefined;\n            let symbol = id;\n            let numCurrencies = currencies.length;\n            if (numCurrencies == 1) {\n                base = symbol.slice (0, 3);\n                quote = symbol.slice (3, 6);\n            } else if (numCurrencies == 2) {\n                base = currencies[0];\n                quote = currencies[1];\n                symbol = base + '/' + quote;\n            } else {\n                base = currencies[1];\n                quote = currencies[2];\n            }\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privateGetBalance ();\n        let balances = {};\n        for (let b = 0; b < response.length; b++) {\n            let account = response[b];\n            let currency = account['currency_code'];\n            balances[currency] = account;\n        }\n        let result = { 'info': response };\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let account = this.account ();\n            if (currency in balances) {\n                account['total'] = balances[currency]['amount'];\n                account['free'] = balances[currency]['available'];\n                account['used'] = account['total'] - account['free'];\n            }\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let orderbook = await this.publicGetBoard (this.extend ({\n            'product_code': this.marketId (symbol),\n        }, params));\n        return this.parseOrderBook (orderbook, undefined, 'bids', 'asks', 'price', 'size');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let ticker = await this.publicGetTicker (this.extend ({\n            'product_code': this.marketId (symbol),\n        }, params));\n        let timestamp = this.parse8601 (ticker['timestamp']);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': parseFloat (ticker['best_bid']),\n            'ask': parseFloat (ticker['best_ask']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['ltp']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['volume_by_product']),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        let side = undefined;\n        let order = undefined;\n        if ('side' in trade)\n            if (trade['side']) {\n                side = trade['side'].toLowerCase ();\n                let id = side + '_child_order_acceptance_id';\n                if (id in trade)\n                    order = trade[id];\n            }\n        let timestamp = this.parse8601 (trade['exec_date']);\n        return {\n            'id': trade['id'].toString (),\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'order': order,\n            'type': undefined,\n            'side': side,\n            'price': trade['price'],\n            'amount': trade['size'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetExecutions (this.extend ({\n            'product_code': market['id'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let order = {\n            'product_code': this.marketId (symbol),\n            'child_order_type': type.toUpperCase (),\n            'side': side.toUpperCase (),\n            'price': price,\n            'size': amount,\n        };\n        let result = await this.privatePostSendchildorder (this.extend (order, params));\n        return {\n            'info': result,\n            'id': result['child_order_acceptance_id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privatePostCancelchildorder (this.extend ({\n            'parent_order_id': id,\n        }, params));\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostWithdraw (this.extend ({\n            'currency_code': currency,\n            'amount': amount,\n            // 'bank_account_id': 1234,\n        }, params));\n        return {\n            'info': response,\n            'id': response['message_id'],\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let request = '/' + this.version + '/';\n        if (api == 'private')\n            request += 'me/';\n        request += path;\n        if (method == 'GET') {\n            if (Object.keys (params).length)\n                request += '?' + this.urlencode (params);\n        }\n        let url = this.urls['api'] + request;\n        if (api == 'private') {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ().toString ();\n            body = this.json (params);\n            let auth = [ nonce, method, request, body ].join ('');\n            headers = {\n                'ACCESS-KEY': this.apiKey,\n                'ACCESS-TIMESTAMP': nonce,\n                'ACCESS-SIGN': this.hmac (this.encode (auth), this.encode (this.secret)),\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/bitflyer.js\n// module id = 379\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, NotSupported } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bithumb extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bithumb',\n            'name': 'Bithumb',\n            'countries': 'KR', // South Korea\n            'rateLimit': 500,\n            'hasCORS': true,\n            'hasFetchTickers': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/30597177-ea800172-9d5e-11e7-804c-b9d4fa9b56b0.jpg',\n                'api': {\n                    'public': 'https://api.bithumb.com/public',\n                    'private': 'https://api.bithumb.com',\n                },\n                'www': 'https://www.bithumb.com',\n                'doc': 'https://www.bithumb.com/u1/US127',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'ticker/{currency}',\n                        'ticker/all',\n                        'orderbook/{currency}',\n                        'orderbook/all',\n                        'recent_transactions/{currency}',\n                        'recent_transactions/all',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'info/account',\n                        'info/balance',\n                        'info/wallet_address',\n                        'info/ticker',\n                        'info/orders',\n                        'info/user_transactions',\n                        'trade/place',\n                        'info/order_detail',\n                        'trade/cancel',\n                        'trade/btc_withdrawal',\n                        'trade/krw_deposit',\n                        'trade/krw_withdrawal',\n                        'trade/market_buy',\n                        'trade/market_sell',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.15 / 100,\n                    'taker': 0.15 / 100,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetTickerAll ();\n        let currencies = Object.keys (markets['data']);\n        let result = [];\n        for (let i = 0; i < currencies.length; i++) {\n            let id = currencies[i];\n            if (id != 'date') {\n                let market = markets['data'][id];\n                let base = id;\n                let quote = 'KRW';\n                let symbol = id + '/' + quote;\n                result.push (this.extend (this.fees['trading'], {\n                    'id': id,\n                    'symbol': symbol,\n                    'base': base,\n                    'quote': quote,\n                    'info': market,\n                    'lot': undefined,\n                    'active': true,\n                    'precision': {\n                        'amount': undefined,\n                        'price': undefined,\n                    },\n                    'limits': {\n                        'amount': {\n                            'min': undefined,\n                            'max': undefined,\n                        },\n                        'price': {\n                            'min': undefined,\n                            'max': undefined,\n                        },\n                        'cost': {\n                            'min': undefined,\n                            'max': undefined,\n                        },\n                    },\n                }));\n            }\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostInfoBalance (this.extend ({\n            'currency': 'ALL',\n        }, params));\n        let result = { 'info': response };\n        let balances = response['data'];\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let account = this.account ();\n            let lowercase = currency.toLowerCase ();\n            account['total'] = this.safeFloat (balances, 'total_' + lowercase);\n            account['used'] = this.safeFloat (balances, 'in_use_' + lowercase);\n            account['free'] = this.safeFloat (balances, 'available_' + lowercase);\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetOrderbookCurrency (this.extend ({\n            'count': 50, // max = 50\n            'currency': market['base'],\n        }, params));\n        let orderbook = response['data'];\n        let timestamp = parseInt (orderbook['timestamp']);\n        return this.parseOrderBook (orderbook, timestamp, 'bids', 'asks', 'price', 'quantity');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = parseInt (ticker['date']);\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'max_price'),\n            'low': this.safeFloat (ticker, 'min_price'),\n            'bid': this.safeFloat (ticker, 'buy_price'),\n            'ask': this.safeFloat (ticker, 'sell_price'),\n            'vwap': undefined,\n            'open': this.safeFloat (ticker, 'opening_price'),\n            'close': this.safeFloat (ticker, 'closing_price'),\n            'first': undefined,\n            'last': this.safeFloat (ticker, 'last_trade'),\n            'change': undefined,\n            'percentage': undefined,\n            'average': this.safeFloat (ticker, 'average_price'),\n            'baseVolume': this.safeFloat (ticker, 'volume_1day'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.publicGetTickerAll (params);\n        let result = {};\n        let timestamp = response['data']['date'];\n        let tickers = this.omit (response['data'], 'date');\n        let ids = Object.keys (tickers);\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            let symbol = id;\n            let market = undefined;\n            if (id in this.markets_by_id) {\n                market = this.markets_by_id[id];\n                symbol = market['symbol'];\n            }\n            let ticker = tickers[id];\n            ticker['date'] = timestamp;\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetTickerCurrency (this.extend ({\n            'currency': market['base'],\n        }, params));\n        return this.parseTicker (response['data'], market);\n    }\n\n    parseTrade (trade, market) {\n        // a workaround for their bug in date format, hours are not 0-padded\n        let [ transaction_date, transaction_time ] = trade['transaction_date'].split (' ');\n        let transaction_time_short = transaction_time.length < 8;\n        if (transaction_time_short)\n            transaction_time = '0' + transaction_time;\n        let timestamp = this.parse8601 (transaction_date + ' ' + transaction_time);\n        let side = (trade['type'] == 'ask') ? 'sell' : 'buy';\n        return {\n            'id': undefined,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'order': undefined,\n            'type': undefined,\n            'side': side,\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['units_traded']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetRecentTransactionsCurrency (this.extend ({\n            'currency': market['base'],\n            'count': 100, // max = 100\n        }, params));\n        return this.parseTrades (response['data'], market, since, limit);\n    }\n\n    createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        throw new NotSupported (this.id + ' private API not implemented yet');\n        //     let prefix = '';\n        //     if (type == 'market')\n        //         prefix = 'market_';\n        //     let order = {\n        //         'pair': this.marketId (symbol),\n        //         'quantity': amount,\n        //         'price': price || 0,\n        //         'type': prefix + side,\n        //     };\n        //     let response = await this.privatePostOrderCreate (this.extend (order, params));\n        //     return {\n        //         'info': response,\n        //         'id': response['order_id'].toString (),\n        //     };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        let side = ('side' in params);\n        if (!side)\n            throw new ExchangeError (this.id + ' cancelOrder requires a side parameter (sell or buy)');\n        side = (side == 'buy') ? 'purchase' : 'sales';\n        let currency = ('currency' in params);\n        if (!currency)\n            throw new ExchangeError (this.id + ' cancelOrder requires a currency parameter');\n        return await this.privatePostTradeCancel ({\n            'order_id': id,\n            'type': params['side'],\n            'currency': params['currency'],\n        });\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let endpoint = '/' + this.implodeParams (path, params);\n        let url = this.urls['api'][api] + endpoint;\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'public') {\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            body = this.urlencode (this.extend ({\n                'endpoint': endpoint,\n            }, query));\n            let nonce = this.nonce ().toString ();\n            let auth = endpoint + \"\\0\" + body + \"\\0\" + nonce;\n            let signature = this.hmac (this.encode (auth), this.encode (this.secret), 'sha512');\n            headers = {\n                'Api-Key': this.apiKey,\n                'Api-Sign': this.decode (this.stringToBase64 (this.encode (signature))),\n                'Api-Nonce': nonce,\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('status' in response) {\n            if (response['status'] == '0000')\n                return response;\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        }\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/bithumb.js\n// module id = 380\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { NotSupported } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitlish extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitlish',\n            'name': 'Bitlish',\n            'countries': [ 'GB', 'EU', 'RU' ],\n            'rateLimit': 1500,\n            'version': 'v1',\n            'hasCORS': false,\n            'hasFetchTickers': true,\n            'hasFetchOHLCV': true,\n            'hasWithdraw': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766275-dcfc6c30-5ed3-11e7-839d-00a846385d0b.jpg',\n                'api': 'https://bitlish.com/api',\n                'www': 'https://bitlish.com',\n                'doc': 'https://bitlish.com/api',\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': false,\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'taker': 0.3 / 100, // anonymous 0.3%, verified 0.2%\n                    'maker': 0,\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {\n                        'BTC': 0.001,\n                        'LTC': 0.001,\n                        'DOGE': 0.001,\n                        'ETH': 0.001,\n                        'XMR': 0,\n                        'ZEC': 0.001,\n                        'DASH': 0.0001,\n                        'EUR': 50,\n                    },\n                    'deposit': {\n                        'BTC': 0,\n                        'LTC': 0,\n                        'DOGE': 0,\n                        'ETH': 0,\n                        'XMR': 0,\n                        'ZEC': 0,\n                        'DASH': 0,\n                        'EUR': 0,\n                    },\n                },\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'instruments',\n                        'ohlcv',\n                        'pairs',\n                        'tickers',\n                        'trades_depth',\n                        'trades_history',\n                    ],\n                    'post': [\n                        'instruments',\n                        'ohlcv',\n                        'pairs',\n                        'tickers',\n                        'trades_depth',\n                        'trades_history',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'accounts_operations',\n                        'balance',\n                        'cancel_trade',\n                        'cancel_trades_by_ids',\n                        'cancel_all_trades',\n                        'create_bcode',\n                        'create_template_wallet',\n                        'create_trade',\n                        'deposit',\n                        'list_accounts_operations_from_ts',\n                        'list_active_trades',\n                        'list_bcodes',\n                        'list_my_matches_from_ts',\n                        'list_my_trades',\n                        'list_my_trads_from_ts',\n                        'list_payment_methods',\n                        'list_payments',\n                        'redeem_code',\n                        'resign',\n                        'signin',\n                        'signout',\n                        'trade_details',\n                        'trade_options',\n                        'withdraw',\n                        'withdraw_by_id',\n                    ],\n                },\n            },\n        });\n    }\n\n    commonCurrencyCode (currency) {\n        if (!this.substituteCommonCurrencyCodes)\n            return currency;\n        if (currency == 'XBT')\n            return 'BTC';\n        if (currency == 'BCC')\n            return 'BCH';\n        if (currency == 'DRK')\n            return 'DASH';\n        if (currency == 'DSH')\n            currency = 'DASH';\n        if (currency == 'XDG')\n            currency = 'DOGE';\n        return currency;\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetPairs ();\n        let result = [];\n        let keys = Object.keys (markets);\n        for (let p = 0; p < keys.length; p++) {\n            let market = markets[keys[p]];\n            let id = market['id'];\n            let symbol = market['name'];\n            let [ base, quote ] = symbol.split ('/');\n            base = this.commonCurrencyCode (base);\n            quote = this.commonCurrencyCode (quote);\n            symbol = base + '/' + quote;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    parseTicker (ticker, market) {\n        let timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'high': this.safeFloat (ticker, 'max'),\n            'low': this.safeFloat (ticker, 'min'),\n            'bid': undefined,\n            'ask': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': this.safeFloat (ticker, 'first'),\n            'last': this.safeFloat (ticker, 'last'),\n            'change': undefined,\n            'percentage': this.safeFloat (ticker, 'prc'),\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'sum'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let tickers = await this.publicGetTickers (params);\n        let ids = Object.keys (tickers);\n        let result = {};\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            let market = this.markets_by_id[id];\n            let symbol = market['symbol'];\n            let ticker = tickers[id];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let tickers = await this.publicGetTickers (params);\n        let ticker = tickers[market['id']];\n        return this.parseTicker (ticker, market);\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        // let market = this.market (symbol);\n        let now = this.seconds ();\n        let start = now - 86400 * 30; // last 30 days\n        let interval = [ start.toString (), undefined ];\n        return await this.publicPostOhlcv (this.extend ({\n            'time_range': interval,\n        }, params));\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let orderbook = await this.publicGetTradesDepth (this.extend ({\n            'pair_id': this.marketId (symbol),\n        }, params));\n        let timestamp = undefined;\n        let last = this.safeInteger (orderbook, 'last');\n        if (last)\n            timestamp = parseInt (last / 1000);\n        return this.parseOrderBook (orderbook, timestamp, 'bid', 'ask', 'price', 'volume');\n    }\n\n    parseTrade (trade, market = undefined) {\n        let side = (trade['dir'] == 'bid') ? 'buy' : 'sell';\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        let timestamp = parseInt (trade['created'] / 1000);\n        return {\n            'id': undefined,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': undefined,\n            'type': undefined,\n            'side': side,\n            'price': trade['price'],\n            'amount': trade['amount'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetTradesHistory (this.extend ({\n            'pair_id': market['id'],\n        }, params));\n        return this.parseTrades (response['list'], market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostBalance ();\n        let result = { 'info': response };\n        let currencies = Object.keys (response);\n        let balance = {};\n        for (let c = 0; c < currencies.length; c++) {\n            let currency = currencies[c];\n            let account = response[currency];\n            currency = currency.toUpperCase ();\n            // issue #4 bitlish names Dash as DSH, instead of DASH\n            if (currency == 'DSH')\n                currency = 'DASH';\n            if (currency == 'XDG')\n                currency = 'DOGE';\n            balance[currency] = account;\n        }\n        currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let account = this.account ();\n            if (currency in balance) {\n                account['free'] = parseFloat (balance[currency]['funds']);\n                account['used'] = parseFloat (balance[currency]['holded']);\n                account['total'] = this.sum (account['free'], account['used']);\n            }\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    signIn () {\n        return this.privatePostSignin ({\n            'login': this.login,\n            'passwd': this.password,\n        });\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let order = {\n            'pair_id': this.marketId (symbol),\n            'dir': (side == 'buy') ? 'bid' : 'ask',\n            'amount': amount,\n        };\n        if (type == 'limit')\n            order['price'] = price;\n        let result = await this.privatePostCreateTrade (this.extend (order, params));\n        return {\n            'info': result,\n            'id': result['id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privatePostCancelTrade ({ 'id': id });\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        await this.loadMarkets ();\n        if (currency != 'BTC') {\n            // they did not document other types...\n            throw new NotSupported (this.id + ' currently supports BTC withdrawals only, until they document other currencies...');\n        }\n        let response = await this.privatePostWithdraw (this.extend ({\n            'currency': currency.toLowerCase (),\n            'amount': parseFloat (amount),\n            'account': address,\n            'payment_method': 'bitcoin', // they did not document other types...\n        }, params));\n        return {\n            'info': response,\n            'id': response['message_id'],\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version + '/' + path;\n        if (api == 'public') {\n            if (method == 'GET') {\n                if (Object.keys (params).length)\n                    url += '?' + this.urlencode (params);\n            }\n            else {\n                body = this.json (params);\n                headers = { 'Content-Type': 'application/json' };\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            body = this.json (this.extend ({ 'token': this.apiKey }, params));\n            headers = { 'Content-Type': 'application/json' };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/bitlish.js\n// module id = 381\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitmarket extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitmarket',\n            'name': 'BitMarket',\n            'countries': [ 'PL', 'EU' ],\n            'rateLimit': 1500,\n            'hasCORS': false,\n            'hasFetchOHLCV': true,\n            'hasWithdraw': true,\n            'timeframes': {\n                '90m': '90m',\n                '6h': '6h',\n                '1d': '1d',\n                '1w': '7d',\n                '1M': '1m',\n                '3M': '3m',\n                '6M': '6m',\n                '1y': '1y',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27767256-a8555200-5ef9-11e7-96fd-469a65e2b0bd.jpg',\n                'api': {\n                    'public': 'https://www.bitmarket.net',\n                    'private': 'https://www.bitmarket.pl/api2/', // last slash is critical\n                },\n                'www': [\n                    'https://www.bitmarket.pl',\n                    'https://www.bitmarket.net',\n                ],\n                'doc': [\n                    'https://www.bitmarket.net/docs.php?file=api_public.html',\n                    'https://www.bitmarket.net/docs.php?file=api_private.html',\n                    'https://github.com/bitmarket-net/api',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'json/{market}/ticker',\n                        'json/{market}/orderbook',\n                        'json/{market}/trades',\n                        'json/ctransfer',\n                        'graphs/{market}/90m',\n                        'graphs/{market}/6h',\n                        'graphs/{market}/1d',\n                        'graphs/{market}/7d',\n                        'graphs/{market}/1m',\n                        'graphs/{market}/3m',\n                        'graphs/{market}/6m',\n                        'graphs/{market}/1y',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'info',\n                        'trade',\n                        'cancel',\n                        'orders',\n                        'trades',\n                        'history',\n                        'withdrawals',\n                        'tradingdesk',\n                        'tradingdeskStatus',\n                        'tradingdeskConfirm',\n                        'cryptotradingdesk',\n                        'cryptotradingdeskStatus',\n                        'cryptotradingdeskConfirm',\n                        'withdraw',\n                        'withdrawFiat',\n                        'withdrawPLNPP',\n                        'withdrawFiatFast',\n                        'deposit',\n                        'transfer',\n                        'transfers',\n                        'marginList',\n                        'marginOpen',\n                        'marginClose',\n                        'marginCancel',\n                        'marginModify',\n                        'marginBalanceAdd',\n                        'marginBalanceRemove',\n                        'swapList',\n                        'swapOpen',\n                        'swapClose',\n                    ],\n                },\n            },\n            'markets': {\n                'BCH/PLN': { 'id': 'BCCPLN', 'symbol': 'BCH/PLN', 'base': 'BCH', 'quote': 'PLN' },\n                'BTG/PLN': { 'id': 'BTGPLN', 'symbol': 'BTG/PLN', 'base': 'BTG', 'quote': 'PLN' },\n                'BTC/PLN': { 'id': 'BTCPLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN' },\n                'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },\n                'LTC/PLN': { 'id': 'LTCPLN', 'symbol': 'LTC/PLN', 'base': 'LTC', 'quote': 'PLN' },\n                'LTC/BTC': { 'id': 'LTCBTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },\n                'LiteMineX/BTC': { 'id': 'LiteMineXBTC', 'symbol': 'LiteMineX/BTC', 'base': 'LiteMineX', 'quote': 'BTC' },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'taker': 0.45 / 100,\n                    'maker': 0.15 / 100,\n                    'tiers': {\n                        'taker': [\n                            [0, 0.45 / 100],\n                            [99.99, 0.44 / 100],\n                            [299.99, 0.43 / 100],\n                            [499.99, 0.42 / 100],\n                            [999.99, 0.41 / 100],\n                            [1999.99, 0.40 / 100],\n                            [2999.99, 0.39 / 100],\n                            [4999.99, 0.38 / 100],\n                            [9999.99, 0.37 / 100],\n                            [19999.99, 0.36 / 100],\n                            [29999.99, 0.35 / 100],\n                            [49999.99, 0.34 / 100],\n                            [99999.99, 0.33 / 100],\n                            [199999.99, 0.32 / 100],\n                            [299999.99, 0.31 / 100],\n                            [499999.99, 0.0 / 100],\n                        ],\n                        'maker': [\n                            [0, 0.15 / 100],\n                            [99.99, 0.14 / 100],\n                            [299.99, 0.13 / 100],\n                            [499.99, 0.12 / 100],\n                            [999.99, 0.11 / 100],\n                            [1999.99, 0.10 / 100],\n                            [2999.99, 0.9 / 100],\n                            [4999.99, 0.8 / 100],\n                            [9999.99, 0.7 / 100],\n                            [19999.99, 0.6 / 100],\n                            [29999.99, 0.5 / 100],\n                            [49999.99, 0.4 / 100],\n                            [99999.99, 0.3 / 100],\n                            [199999.99, 0.2 / 100],\n                            [299999.99, 0.1 / 100],\n                            [499999.99, 0.0 / 100],\n                        ],\n                    },\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {\n                        'BTC': 0.0008,\n                        'LTC': 0.005,\n                        'BCH': 0.0008,\n                        'BTG': 0.0008,\n                        'DOGE': 1,\n                        'EUR': 2,\n                        'PLN': 2,\n                    },\n                    'deposit': {\n                        'BTC': 0,\n                        'LTC': 0,\n                        'BCH': 0,\n                        'BTG': 0,\n                        'DOGE': 25,\n                        'EUR': 2, // SEPA. Transfer INT (SHA): 5 EUR\n                        'PLN': 0,\n                    },\n                },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostInfo ();\n        let data = response['data'];\n        let balance = data['balances'];\n        let result = { 'info': data };\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let account = this.account ();\n            if (currency in balance['available'])\n                account['free'] = balance['available'][currency];\n            if (currency in balance['blocked'])\n                account['used'] = balance['blocked'][currency];\n            account['total'] = this.sum (account['free'], account['used']);\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let orderbook = await this.publicGetJsonMarketOrderbook (this.extend ({\n            'market': this.marketId (symbol),\n        }, params));\n        let timestamp = this.milliseconds ();\n        return {\n            'bids': orderbook['bids'],\n            'asks': orderbook['asks'],\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let ticker = await this.publicGetJsonMarketTicker (this.extend ({\n            'market': this.marketId (symbol),\n        }, params));\n        let timestamp = this.milliseconds ();\n        let vwap = parseFloat (ticker['vwap']);\n        let baseVolume = parseFloat (ticker['volume']);\n        let quoteVolume = baseVolume * vwap;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['bid']),\n            'ask': parseFloat (ticker['ask']),\n            'vwap': vwap,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        let side = (trade['type'] == 'bid') ? 'buy' : 'sell';\n        let timestamp = trade['date'] * 1000;\n        return {\n            'id': trade['tid'].toString (),\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'order': undefined,\n            'type': undefined,\n            'side': side,\n            'price': trade['price'],\n            'amount': trade['amount'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetJsonMarketTrades (this.extend ({\n            'market': market['id'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined, timeframe = '90m', since = undefined, limit = undefined) {\n        return [\n            ohlcv['time'] * 1000,\n            parseFloat (ohlcv['open']),\n            parseFloat (ohlcv['high']),\n            parseFloat (ohlcv['low']),\n            parseFloat (ohlcv['close']),\n            parseFloat (ohlcv['vol']),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '90m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let method = 'publicGetGraphsMarket' + this.timeframes[timeframe];\n        let market = this.market (symbol);\n        let response = await this[method] (this.extend ({\n            'market': market['id'],\n        }, params));\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        let response = await this.privatePostTrade (this.extend ({\n            'market': this.marketId (symbol),\n            'type': side,\n            'amount': amount,\n            'rate': price,\n        }, params));\n        let result = {\n            'info': response,\n        };\n        if ('id' in response['order'])\n            result['id'] = response['id'];\n        return result;\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostCancel ({ 'id': id });\n    }\n\n    isFiat (currency) {\n        if (currency == 'EUR')\n            return true;\n        if (currency == 'PLN')\n            return true;\n        return false;\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        await this.loadMarkets ();\n        let method = undefined;\n        let request = {\n            'currency': currency,\n            'quantity': amount,\n        };\n        if (this.isFiat (currency)) {\n            method = 'privatePostWithdrawFiat';\n            if ('account' in params) {\n                request['account'] = params['account']; // bank account code for withdrawal\n            } else {\n                throw new ExchangeError (this.id + ' requires account parameter to withdraw fiat currency');\n            }\n            if ('account2' in params) {\n                request['account2'] = params['account2']; // bank SWIFT code (EUR only)\n            } else {\n                if (currency == 'EUR')\n                    throw new ExchangeError (this.id + ' requires account2 parameter to withdraw EUR');\n            }\n            if ('withdrawal_note' in params) {\n                request['withdrawal_note'] = params['withdrawal_note']; // a 10-character user-specified withdrawal note (PLN only)\n            } else {\n                if (currency == 'PLN')\n                    throw new ExchangeError (this.id + ' requires withdrawal_note parameter to withdraw PLN');\n            }\n        } else {\n            method = 'privatePostWithdraw';\n            request['address'] = address;\n        }\n        let response = await this[method] (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api];\n        if (api == 'public') {\n            url += '/' + this.implodeParams (path + '.json', params);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            let query = this.extend ({\n                'tonce': nonce,\n                'method': path,\n            }, params);\n            body = this.urlencode (query);\n            headers = {\n                'API-Key': this.apiKey,\n                'API-Hash': this.hmac (this.encode (body), this.encode (this.secret), 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/bitmarket.js\n// module id = 382\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitmex extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitmex',\n            'name': 'BitMEX',\n            'countries': 'SC', // Seychelles\n            'version': 'v1',\n            'userAgent': undefined,\n            'rateLimit': 1500,\n            'hasCORS': false,\n            'hasFetchOHLCV': true,\n            'hasWithdraw': true,\n            'timeframes': {\n                '1m': '1m',\n                '5m': '5m',\n                '1h': '1h',\n                '1d': '1d',\n            },\n            'urls': {\n                'test': 'https://testnet.bitmex.com',\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766319-f653c6e6-5ed4-11e7-933d-f0bc3699ae8f.jpg',\n                'api': 'https://www.bitmex.com',\n                'www': 'https://www.bitmex.com',\n                'doc': [\n                    'https://www.bitmex.com/app/apiOverview',\n                    'https://github.com/BitMEX/api-connectors/tree/master/official-http',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'announcement',\n                        'announcement/urgent',\n                        'funding',\n                        'instrument',\n                        'instrument/active',\n                        'instrument/activeAndIndices',\n                        'instrument/activeIntervals',\n                        'instrument/compositeIndex',\n                        'instrument/indices',\n                        'insurance',\n                        'leaderboard',\n                        'liquidation',\n                        'orderBook',\n                        'orderBook/L2',\n                        'quote',\n                        'quote/bucketed',\n                        'schema',\n                        'schema/websocketHelp',\n                        'settlement',\n                        'stats',\n                        'stats/history',\n                        'trade',\n                        'trade/bucketed',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'apiKey',\n                        'chat',\n                        'chat/channels',\n                        'chat/connected',\n                        'execution',\n                        'execution/tradeHistory',\n                        'notification',\n                        'order',\n                        'position',\n                        'user',\n                        'user/affiliateStatus',\n                        'user/checkReferralCode',\n                        'user/commission',\n                        'user/depositAddress',\n                        'user/margin',\n                        'user/minWithdrawalFee',\n                        'user/wallet',\n                        'user/walletHistory',\n                        'user/walletSummary',\n                    ],\n                    'post': [\n                        'apiKey',\n                        'apiKey/disable',\n                        'apiKey/enable',\n                        'chat',\n                        'order',\n                        'order/bulk',\n                        'order/cancelAllAfter',\n                        'order/closePosition',\n                        'position/isolate',\n                        'position/leverage',\n                        'position/riskLimit',\n                        'position/transferMargin',\n                        'user/cancelWithdrawal',\n                        'user/confirmEmail',\n                        'user/confirmEnableTFA',\n                        'user/confirmWithdrawal',\n                        'user/disableTFA',\n                        'user/logout',\n                        'user/logoutAll',\n                        'user/preferences',\n                        'user/requestEnableTFA',\n                        'user/requestWithdrawal',\n                    ],\n                    'put': [\n                        'order',\n                        'order/bulk',\n                        'user',\n                    ],\n                    'delete': [\n                        'apiKey',\n                        'order',\n                        'order/all',\n                    ],\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetInstrumentActiveAndIndices ();\n        let result = [];\n        for (let p = 0; p < markets.length; p++) {\n            let market = markets[p];\n            let active = (market['state'] != 'Unlisted');\n            let id = market['symbol'];\n            let base = market['underlying'];\n            let quote = market['quoteCurrency'];\n            let type = undefined;\n            let future = false;\n            let prediction = false;\n            let basequote = base + quote;\n            base = this.commonCurrencyCode (base);\n            quote = this.commonCurrencyCode (quote);\n            let swap = (id == basequote);\n            let symbol = id;\n            if (swap) {\n                type = 'swap';\n                symbol = base + '/' + quote;\n            } else if (id.indexOf ('B_') >= 0) {\n                prediction = true;\n                type = 'prediction';\n            } else {\n                future = true;\n                type = 'future';\n            }\n            let maker = market['makerFee'];\n            let taker = market['takerFee'];\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'active': active,\n                'taker': taker,\n                'maker': maker,\n                'type': type,\n                'spot': false,\n                'swap': swap,\n                'future': future,\n                'prediction': prediction,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privateGetUserMargin ({ 'currency': 'all' });\n        let result = { 'info': response };\n        for (let b = 0; b < response.length; b++) {\n            let balance = response[b];\n            let currency = balance['currency'].toUpperCase ();\n            currency = this.commonCurrencyCode (currency);\n            let account = {\n                'free': balance['availableMargin'],\n                'used': 0.0,\n                'total': balance['amount'],\n            };\n            if (currency == 'BTC') {\n                account['free'] = account['free'] * 0.00000001;\n                account['total'] = account['total'] * 0.00000001;\n            }\n            account['used'] = account['total'] - account['free'];\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let orderbook = await this.publicGetOrderBookL2 (this.extend ({\n            'symbol': this.marketId (symbol),\n        }, params));\n        let timestamp = this.milliseconds ();\n        let result = {\n            'bids': [],\n            'asks': [],\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n        };\n        for (let o = 0; o < orderbook.length; o++) {\n            let order = orderbook[o];\n            let side = (order['side'] == 'Sell') ? 'asks' : 'bids';\n            let amount = order['size'];\n            let price = order['price'];\n            result[side].push ([ price, amount ]);\n        }\n        result['bids'] = this.sortBy (result['bids'], 0, true);\n        result['asks'] = this.sortBy (result['asks'], 0);\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        if (!market['active'])\n            throw new ExchangeError (this.id + ': symbol ' + symbol + ' is delisted');\n        let request = this.extend ({\n            'symbol': market['id'],\n            'binSize': '1d',\n            'partial': true,\n            'count': 1,\n            'reverse': true,\n        }, params);\n        let quotes = await this.publicGetQuoteBucketed (request);\n        let quotesLength = quotes.length;\n        let quote = quotes[quotesLength - 1];\n        let tickers = await this.publicGetTradeBucketed (request);\n        let ticker = tickers[0];\n        let timestamp = this.milliseconds ();\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (quote['bidPrice']),\n            'ask': parseFloat (quote['askPrice']),\n            'vwap': parseFloat (ticker['vwap']),\n            'open': undefined,\n            'close': parseFloat (ticker['close']),\n            'first': undefined,\n            'last': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['homeNotional']),\n            'quoteVolume': parseFloat (ticker['foreignNotional']),\n            'info': ticker,\n        };\n    }\n\n    parseOHLCV (ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {\n        let timestamp = this.parse8601 (ohlcv['timestamp']);\n        return [\n            timestamp,\n            ohlcv['open'],\n            ohlcv['high'],\n            ohlcv['low'],\n            ohlcv['close'],\n            ohlcv['volume'],\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        // send JSON key/value pairs, such as {\"key\": \"value\"}\n        // filter by individual fields and do advanced queries on timestamps\n        // let filter = { 'key': 'value' };\n        // send a bare series (e.g. XBU) to nearest expiring contract in that series\n        // you can also send a timeframe, e.g. XBU:monthly\n        // timeframes: daily, weekly, monthly, quarterly, and biquarterly\n        let market = this.market (symbol);\n        let request = {\n            'symbol': market['id'],\n            'binSize': this.timeframes[timeframe],\n            'partial': true,     // true == include yet-incomplete current bins\n            // 'filter': filter, // filter by individual fields and do advanced queries\n            // 'columns': [],    // will return all columns if omitted\n            // 'start': 0,       // starting point for results (wtf?)\n            // 'reverse': false, // true == newest first\n            // 'endTime': '',    // ending date filter for results\n        };\n        if (since) {\n            let ymdhms = this.YmdHMS (since);\n            let ymdhm = ymdhms.slice (0, 16);\n            request['startTime'] = ymdhm; // starting date filter for results\n        }\n        if (limit)\n            request['count'] = limit; // default 100\n        let response = await this.publicGetTradeBucketed (this.extend (request, params));\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        let timestamp = this.parse8601 (trade['timestamp']);\n        let symbol = undefined;\n        if (!market) {\n            if ('symbol' in trade)\n                market = this.markets_by_id[trade['symbol']];\n        }\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'id': trade['trdMatchID'],\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': undefined,\n            'type': undefined,\n            'side': trade['side'].toLowerCase (),\n            'price': trade['price'],\n            'amount': trade['size'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetTrade (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let order = {\n            'symbol': this.marketId (symbol),\n            'side': this.capitalize (side),\n            'orderQty': amount,\n            'ordType': this.capitalize (type),\n        };\n        if (type == 'limit')\n            order['price'] = price;\n        let response = await this.privatePostOrder (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['orderID'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privateDeleteOrder ({ 'orderID': id });\n    }\n\n    isFiat (currency) {\n        if (currency == 'EUR')\n            return true;\n        if (currency == 'PLN')\n            return true;\n        return false;\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        await this.loadMarkets ();\n        if (currency != 'BTC')\n            throw new ExchangeError (this.id + ' supoprts BTC withdrawals only, other currencies coming soon...');\n        let request = {\n            'currency': 'XBt', // temporarily\n            'amount': amount,\n            'address': address,\n            // 'otpToken': '123456', // requires if two-factor auth (OTP) is enabled\n            // 'fee': 0.001, // bitcoin network fee\n        };\n        let response = await this.privatePostUserRequestWithdrawal (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['transactID'],\n        };\n    }\n\n    handleErrors (code, reason, url, method, headers, body) {\n        if (code >= 400) {\n            if (body) {\n                if (body[0] == \"{\") {\n                    let response = JSON.parse (body);\n                    if ('error' in response) {\n                        if ('message' in response['error']) {\n                            throw new ExchangeError (this.id + ' ' + this.json (response));\n                        }\n                    }\n                }\n                throw new ExchangeError (this.id + ' ' + body);\n            }\n            throw new ExchangeError (this.id + ' returned an empty response');\n        }\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let query = '/api' + '/' + this.version + '/' + path;\n        if (Object.keys (params).length)\n            query += '?' + this.urlencode (params);\n        let url = this.urls['api'] + query;\n        if (api == 'private') {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ().toString ();\n            let auth = method + query + nonce;\n            if (method == 'POST') {\n                if (Object.keys (params).length) {\n                    body = this.json (params);\n                    auth += body;\n                }\n            }\n            headers = {\n                'Content-Type': 'application/json',\n                'api-nonce': nonce,\n                'api-key': this.apiKey,\n                'api-signature': this.hmac (this.encode (auth), this.encode (this.secret)),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/bitmex.js\n// module id = 383\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitso extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitso',\n            'name': 'Bitso',\n            'countries': 'MX', // Mexico\n            'rateLimit': 2000, // 30 requests per minute\n            'version': 'v3',\n            'hasCORS': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766335-715ce7aa-5ed5-11e7-88a8-173a27bb30fe.jpg',\n                'api': 'https://api.bitso.com',\n                'www': 'https://bitso.com',\n                'doc': 'https://bitso.com/api_info',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'available_books',\n                        'ticker',\n                        'order_book',\n                        'trades',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'account_status',\n                        'balance',\n                        'fees',\n                        'fundings',\n                        'fundings/{fid}',\n                        'funding_destination',\n                        'kyc_documents',\n                        'ledger',\n                        'ledger/trades',\n                        'ledger/fees',\n                        'ledger/fundings',\n                        'ledger/withdrawals',\n                        'mx_bank_codes',\n                        'open_orders',\n                        'order_trades/{oid}',\n                        'orders/{oid}',\n                        'user_trades',\n                        'user_trades/{tid}',\n                        'withdrawals/',\n                        'withdrawals/{wid}',\n                    ],\n                    'post': [\n                        'bitcoin_withdrawal',\n                        'debit_card_withdrawal',\n                        'ether_withdrawal',\n                        'orders',\n                        'phone_number',\n                        'phone_verification',\n                        'phone_withdrawal',\n                        'spei_withdrawal',\n                    ],\n                    'delete': [\n                        'orders/{oid}',\n                        'orders/all',\n                    ],\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetAvailableBooks ();\n        let result = [];\n        for (let i = 0; i < markets['payload'].length; i++) {\n            let market = markets['payload'][i];\n            let id = market['book'];\n            let symbol = id.toUpperCase ().replace ('_', '/');\n            let [ base, quote ] = symbol.split ('/');\n            let limits = {\n                'amount': {\n                    'min': parseFloat (market['minimum_amount']),\n                    'max': parseFloat (market['maximum_amount']),\n                },\n                'price': {\n                    'min': parseFloat (market['minimum_price']),\n                    'max': parseFloat (market['maximum_price']),\n                },\n                'cost': {\n                    'min': parseFloat (market['minimum_value']),\n                    'max': parseFloat (market['maximum_value']),\n                },\n            };\n            let precision = {\n                'amount': this.precisionFromString (market['minimum_amount']),\n                'price': this.precisionFromString (market['minimum_price']),\n            };\n            let lot = limits['amount']['min'];\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n                'lot': lot,\n                'limits': limits,\n                'precision': precision,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privateGetBalance ();\n        let balances = response['payload']['balances'];\n        let result = { 'info': response };\n        for (let b = 0; b < balances.length; b++) {\n            let balance = balances[b];\n            let currency = balance['currency'].toUpperCase ();\n            let account = {\n                'free': parseFloat (balance['available']),\n                'used': parseFloat (balance['locked']),\n                'total': parseFloat (balance['total']),\n            };\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.publicGetOrderBook (this.extend ({\n            'book': this.marketId (symbol),\n        }, params));\n        let orderbook = response['payload'];\n        let timestamp = this.parse8601 (orderbook['updated_at']);\n        return this.parseOrderBook (orderbook, timestamp, 'bids', 'asks', 'price', 'amount');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.publicGetTicker (this.extend ({\n            'book': this.marketId (symbol),\n        }, params));\n        let ticker = response['payload'];\n        let timestamp = this.parse8601 (ticker['created_at']);\n        let vwap = parseFloat (ticker['vwap']);\n        let baseVolume = parseFloat (ticker['volume']);\n        let quoteVolume = baseVolume * vwap;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['bid']),\n            'ask': parseFloat (ticker['ask']),\n            'vwap': vwap,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        let timestamp = this.parse8601 (trade['created_at']);\n        let symbol = undefined;\n        if (!market) {\n            if ('book' in trade)\n                market = this.markets_by_id[trade['book']];\n        }\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'id': trade['tid'].toString (),\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'order': undefined,\n            'type': undefined,\n            'side': trade['maker_side'],\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['amount']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetTrades (this.extend ({\n            'book': market['id'],\n        }, params));\n        return this.parseTrades (response['payload'], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let order = {\n            'book': this.marketId (symbol),\n            'side': side,\n            'type': type,\n            'major': this.amountToPrecision (symbol, amount),\n        };\n        if (type == 'limit')\n            order['price'] = this.priceToPrecision (symbol, price);\n        let response = await this.privatePostOrders (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['payload']['oid'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privateDeleteOrders ({ 'oid': id });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let query = '/' + this.version + '/' + this.implodeParams (path, params);\n        let url = this.urls['api'] + query;\n        if (api == 'public') {\n            if (Object.keys (params).length)\n                url += '?' + this.urlencode (params);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ().toString ();\n            let request = [ nonce, method, query ].join ('');\n            if (Object.keys (params).length) {\n                body = this.json (params);\n                request += body;\n            }\n            let signature = this.hmac (this.encode (request), this.encode (this.secret));\n            let auth = this.apiKey + ':' + nonce + ':' + signature;\n            headers = {\n                'Authorization': \"Bitso \" + auth,\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('success' in response)\n            if (response['success'])\n                return response;\n        throw new ExchangeError (this.id + ' ' + this.json (response));\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/bitso.js\n// module id = 384\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, AuthenticationError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitstamp extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitstamp',\n            'name': 'Bitstamp',\n            'countries': 'GB',\n            'rateLimit': 1000,\n            'version': 'v2',\n            'hasCORS': false,\n            'hasFetchOrder': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg',\n                'api': 'https://www.bitstamp.net/api',\n                'www': 'https://www.bitstamp.net',\n                'doc': 'https://www.bitstamp.net/api',\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n                'uid': true,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'order_book/{pair}/',\n                        'ticker_hour/{pair}/',\n                        'ticker/{pair}/',\n                        'transactions/{pair}/',\n                        'trading-pairs-info/',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'balance/',\n                        'balance/{pair}/',\n                        'user_transactions/',\n                        'user_transactions/{pair}/',\n                        'open_orders/all/',\n                        'open_orders/{pair}',\n                        'order_status/',\n                        'cancel_order/',\n                        'buy/{pair}/',\n                        'buy/market/{pair}/',\n                        'sell/{pair}/',\n                        'sell/market/{pair}/',\n                        'ltc_withdrawal/',\n                        'ltc_address/',\n                        'eth_withdrawal/',\n                        'eth_address/',\n                        'transfer-to-main/',\n                        'transfer-from-main/',\n                        'xrp_withdrawal/',\n                        'xrp_address/',\n                        'withdrawal/open/',\n                        'withdrawal/status/',\n                        'withdrawal/cancel/',\n                        'liquidation_address/new/',\n                        'liquidation_address/info/',\n                    ],\n                },\n                'v1': {\n                    'post': [\n                        'bitcoin_deposit_address/',\n                        'unconfirmed_btc/',\n                        'bitcoin_withdrawal/',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'taker': 0.25 / 100,\n                    'maker': 0.25 / 100,\n                    'tiers': {\n                        'taker': [\n                            [0, 0.25 / 100],\n                            [20000, 0.24 / 100],\n                            [100000, 0.22 / 100],\n                            [400000, 0.20 / 100],\n                            [600000, 0.15 / 100],\n                            [1000000, 0.14 / 100],\n                            [2000000, 0.13 / 100],\n                            [4000000, 0.12 / 100],\n                            [20000000, 0.11 / 100],\n                            [20000001, 0.10 / 100],\n                        ],\n                        'maker': [\n                            [0, 0.25 / 100],\n                            [20000, 0.24 / 100],\n                            [100000, 0.22 / 100],\n                            [400000, 0.20 / 100],\n                            [600000, 0.15 / 100],\n                            [1000000, 0.14 / 100],\n                            [2000000, 0.13 / 100],\n                            [4000000, 0.12 / 100],\n                            [20000000, 0.11 / 100],\n                            [20000001, 0.10 / 100],\n                        ],\n                    },\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {\n                        'BTC': 0,\n                        'LTC': 0,\n                        'ETH': 0,\n                        'XRP': 0,\n                        'USD': 25,\n                        'EUR': 0.90,\n                    },\n                    'deposit': {\n                        'BTC': 0,\n                        'LTC': 0,\n                        'ETH': 0,\n                        'XRP': 0,\n                        'USD': 25,\n                        'EUR': 0,\n                    },\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetTradingPairsInfo ();\n        let result = [];\n        for (let i = 0; i < markets.length; i++) {\n            let market = markets[i];\n            let symbol = market['name'];\n            let [ base, quote ] = symbol.split ('/');\n            let id = market['url_symbol'];\n            let precision = {\n                'amount': market['base_decimals'],\n                'price': market['counter_decimals'],\n            };\n            let [ cost, currency ] = market['minimum_order'].split (' ');\n            let active = (market['trading'] == 'Enabled');\n            let lot = Math.pow (10, -precision['amount']);\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n                'lot': lot,\n                'active': active,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': lot,\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': parseFloat (cost),\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let orderbook = await this.publicGetOrderBookPair (this.extend ({\n            'pair': this.marketId (symbol),\n        }, params));\n        let timestamp = parseInt (orderbook['timestamp']) * 1000;\n        return this.parseOrderBook (orderbook, timestamp);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let ticker = await this.publicGetTickerPair (this.extend ({\n            'pair': this.marketId (symbol),\n        }, params));\n        let timestamp = parseInt (ticker['timestamp']) * 1000;\n        let vwap = parseFloat (ticker['vwap']);\n        let baseVolume = parseFloat (ticker['volume']);\n        let quoteVolume = baseVolume * vwap;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['bid']),\n            'ask': parseFloat (ticker['ask']),\n            'vwap': vwap,\n            'open': parseFloat (ticker['open']),\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        let timestamp = undefined;\n        if ('date' in trade) {\n            timestamp = parseInt (trade['date']) * 1000;\n        } else if ('datetime' in trade) {\n            // timestamp = this.parse8601 (trade['datetime']);\n            timestamp = parseInt (trade['datetime']) * 1000;\n        }\n        let side = (trade['type'] == 0) ? 'buy' : 'sell';\n        let order = undefined;\n        if ('order_id' in trade)\n            order = trade['order_id'].toString ();\n        if ('currency_pair' in trade) {\n            if (trade['currency_pair'] in this.markets_by_id)\n                market = this.markets_by_id[trade['currency_pair']];\n        }\n        return {\n            'id': trade['tid'].toString (),\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'order': order,\n            'type': undefined,\n            'side': side,\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['amount']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetTransactionsPair (this.extend ({\n            'pair': market['id'],\n            'time': 'minute',\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let balance = await this.privatePostBalance ();\n        let result = { 'info': balance };\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let lowercase = currency.toLowerCase ();\n            let total = lowercase + '_balance';\n            let free = lowercase + '_available';\n            let used = lowercase + '_reserved';\n            let account = this.account ();\n            if (free in balance)\n                account['free'] = parseFloat (balance[free]);\n            if (used in balance)\n                account['used'] = parseFloat (balance[used]);\n            if (total in balance)\n                account['total'] = parseFloat (balance[total]);\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let method = 'privatePost' + this.capitalize (side);\n        let order = {\n            'pair': this.marketId (symbol),\n            'amount': amount,\n        };\n        if (type == 'market')\n            method += 'Market';\n        else\n            order['price'] = price;\n        method += 'Pair';\n        let response = await this[method] (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privatePostCancelOrder ({ 'id': id });\n    }\n\n    parseOrderStatus (order) {\n        if ((order['status'] == 'Queue') || (order['status'] == 'Open'))\n            return 'open';\n        if (order['status'] == 'Finished')\n            return 'closed';\n        return order['status'];\n    }\n\n    async fetchOrderStatus (id, symbol = undefined) {\n        await this.loadMarkets ();\n        let response = await this.privatePostOrderStatus ({ 'id': id });\n        return this.parseOrderStatus (response);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol)\n            market = this.market (symbol);\n        let pair = market ? market['id'] : 'all';\n        let request = this.extend ({ 'pair': pair }, params);\n        let response = await this.privatePostOpenOrdersPair (request);\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privatePostOrderStatus ({ 'id': id });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/';\n        if (api != 'v1')\n            url += this.version + '/';\n        url += this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'public') {\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ().toString ();\n            let auth = nonce + this.uid + this.apiKey;\n            let signature = this.encode (this.hmac (this.encode (auth), this.encode (this.secret)));\n            query = this.extend ({\n                'key': this.apiKey,\n                'signature': signature.toUpperCase (),\n                'nonce': nonce,\n            }, query);\n            body = this.urlencode (query);\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('status' in response)\n            if (response['status'] == 'error')\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/bitstamp.js\n// module id = 385\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, NotSupported, AuthenticationError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bitstamp1 extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bitstamp1',\n            'name': 'Bitstamp v1',\n            'countries': 'GB',\n            'rateLimit': 1000,\n            'version': 'v1',\n            'hasCORS': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27786377-8c8ab57e-5fe9-11e7-8ea4-2b05b6bcceec.jpg',\n                'api': 'https://www.bitstamp.net/api',\n                'www': 'https://www.bitstamp.net',\n                'doc': 'https://www.bitstamp.net/api',\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n                'uid': true,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'ticker',\n                        'ticker_hour',\n                        'order_book',\n                        'transactions',\n                        'eur_usd',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'balance',\n                        'user_transactions',\n                        'open_orders',\n                        'order_status',\n                        'cancel_order',\n                        'cancel_all_orders',\n                        'buy',\n                        'sell',\n                        'bitcoin_deposit_address',\n                        'unconfirmed_btc',\n                        'ripple_withdrawal',\n                        'ripple_address',\n                        'withdrawal_requests',\n                        'bitcoin_withdrawal',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/USD': { 'id': 'btcusd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'maker': 0.0025, 'taker': 0.0025 },\n                'BTC/EUR': { 'id': 'btceur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'maker': 0.0025, 'taker': 0.0025 },\n                'EUR/USD': { 'id': 'eurusd', 'symbol': 'EUR/USD', 'base': 'EUR', 'quote': 'USD', 'maker': 0.0025, 'taker': 0.0025 },\n                'XRP/USD': { 'id': 'xrpusd', 'symbol': 'XRP/USD', 'base': 'XRP', 'quote': 'USD', 'maker': 0.0025, 'taker': 0.0025 },\n                'XRP/EUR': { 'id': 'xrpeur', 'symbol': 'XRP/EUR', 'base': 'XRP', 'quote': 'EUR', 'maker': 0.0025, 'taker': 0.0025 },\n                'XRP/BTC': { 'id': 'xrpbtc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC', 'maker': 0.0025, 'taker': 0.0025 },\n                'LTC/USD': { 'id': 'ltcusd', 'symbol': 'LTC/USD', 'base': 'LTC', 'quote': 'USD', 'maker': 0.0025, 'taker': 0.0025 },\n                'LTC/EUR': { 'id': 'ltceur', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR', 'maker': 0.0025, 'taker': 0.0025 },\n                'LTC/BTC': { 'id': 'ltcbtc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'maker': 0.0025, 'taker': 0.0025 },\n                'ETH/USD': { 'id': 'ethusd', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD', 'maker': 0.0025, 'taker': 0.0025 },\n                'ETH/EUR': { 'id': 'etheur', 'symbol': 'ETH/EUR', 'base': 'ETH', 'quote': 'EUR', 'maker': 0.0025, 'taker': 0.0025 },\n                'ETH/BTC': { 'id': 'ethbtc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'maker': 0.0025, 'taker': 0.0025 },\n            },\n        });\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        if (symbol != 'BTC/USD')\n            throw new ExchangeError (this.id + ' ' + this.version + \" fetchOrderBook doesn't support \" + symbol + ', use it for BTC/USD only');\n        let orderbook = await this.publicGetOrderBook (params);\n        let timestamp = parseInt (orderbook['timestamp']) * 1000;\n        return this.parseOrderBook (orderbook, timestamp);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        if (symbol != 'BTC/USD')\n            throw new ExchangeError (this.id + ' ' + this.version + \" fetchTicker doesn't support \" + symbol + ', use it for BTC/USD only');\n        let ticker = await this.publicGetTicker (params);\n        let timestamp = parseInt (ticker['timestamp']) * 1000;\n        let vwap = parseFloat (ticker['vwap']);\n        let baseVolume = parseFloat (ticker['volume']);\n        let quoteVolume = baseVolume * vwap;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['bid']),\n            'ask': parseFloat (ticker['ask']),\n            'vwap': vwap,\n            'open': parseFloat (ticker['open']),\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        let timestamp = undefined;\n        if ('date' in trade) {\n            timestamp = parseInt (trade['date']) * 1000;\n        } else if ('datetime' in trade) {\n            // timestamp = this.parse8601 (trade['datetime']);\n            timestamp = parseInt (trade['datetime']) * 1000;\n        }\n        let side = (trade['type'] == 0) ? 'buy' : 'sell';\n        let order = undefined;\n        if ('order_id' in trade)\n            order = trade['order_id'].toString ();\n        if ('currency_pair' in trade) {\n            if (trade['currency_pair'] in this.markets_by_id)\n                market = this.markets_by_id[trade['currency_pair']];\n        }\n        return {\n            'id': trade['tid'].toString (),\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'order': order,\n            'type': undefined,\n            'side': side,\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['amount']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        if (symbol != 'BTC/USD')\n            throw new ExchangeError (this.id + ' ' + this.version + \" fetchTrades doesn't support \" + symbol + ', use it for BTC/USD only');\n        let market = this.market (symbol);\n        let response = await this.publicGetTransactions (this.extend ({\n            'time': 'minute',\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        let balance = await this.privatePostBalance ();\n        let result = { 'info': balance };\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let lowercase = currency.toLowerCase ();\n            let total = lowercase + '_balance';\n            let free = lowercase + '_available';\n            let used = lowercase + '_reserved';\n            let account = this.account ();\n            account['free'] = this.safeFloat (balance, free, 0.0);\n            account['used'] = this.safeFloat (balance, used, 0.0);\n            account['total'] = this.safeFloat (balance, total, 0.0);\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type != 'limit')\n            throw new ExchangeError (this.id + ' ' + this.version + ' accepts limit orders only');\n        if (symbol != 'BTC/USD')\n            throw new ExchangeError (this.id + ' v1 supports BTC/USD orders only');\n        let method = 'privatePost' + this.capitalize (side);\n        let order = {\n            'amount': amount,\n            'price': price,\n        };\n        let response = await this[method] (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostCancelOrder ({ 'id': id });\n    }\n\n    parseOrderStatus (order) {\n        if ((order['status'] == 'Queue') || (order['status'] == 'Open'))\n            return 'open';\n        if (order['status'] == 'Finished')\n            return 'closed';\n        return order['status'];\n    }\n\n    async fetchOrderStatus (id, symbol = undefined) {\n        await this.loadMarkets ();\n        let response = await this.privatePostOrderStatus ({ 'id': id });\n        return this.parseOrderStatus (response);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol)\n            market = this.market (symbol);\n        let pair = market ? market['id'] : 'all';\n        let request = this.extend ({ 'id': pair }, params);\n        let response = await this.privatePostOpenOrdersId (request);\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        throw new NotSupported (this.id + ' fetchOrder is not implemented yet');\n        await this.loadMarkets ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'public') {\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ().toString ();\n            let auth = nonce + this.uid + this.apiKey;\n            let signature = this.encode (this.hmac (this.encode (auth), this.encode (this.secret)));\n            query = this.extend ({\n                'key': this.apiKey,\n                'signature': signature.toUpperCase (),\n                'nonce': nonce,\n            }, query);\n            body = this.urlencode (query);\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('status' in response)\n            if (response['status'] == 'error')\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/bitstamp1.js\n// module id = 386\n// module chunks = 0","\"use strict\"\n\n// ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class bl3p extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bl3p',\n            'name': 'BL3P',\n            'countries': [ 'NL', 'EU' ], // Netherlands, EU\n            'rateLimit': 1000,\n            'version': '1',\n            'comment': 'An exchange market by BitonicNL',\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/28501752-60c21b82-6feb-11e7-818b-055ee6d0e754.jpg',\n                'api': 'https://api.bl3p.eu',\n                'www': [\n                    'https://bl3p.eu',\n                    'https://bitonic.nl',\n                ],\n                'doc': [\n                    'https://github.com/BitonicNL/bl3p-api/tree/master/docs',\n                    'https://bl3p.eu/api',\n                    'https://bitonic.nl/en/api',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        '{market}/ticker',\n                        '{market}/orderbook',\n                        '{market}/trades',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        '{market}/money/depth/full',\n                        '{market}/money/order/add',\n                        '{market}/money/order/cancel',\n                        '{market}/money/order/result',\n                        '{market}/money/orders',\n                        '{market}/money/orders/history',\n                        '{market}/money/trades/fetch',\n                        'GENMKT/money/info',\n                        'GENMKT/money/deposit_address',\n                        'GENMKT/money/new_deposit_address',\n                        'GENMKT/money/wallet/history',\n                        'GENMKT/money/withdraw',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/EUR': { 'id': 'BTCEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'maker': 0.0025, 'taker': 0.0025 },\n                // 'LTC/EUR': { 'id': 'LTCEUR', 'symbol': 'LTC/EUR', 'base': 'LTC', 'quote': 'EUR' },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        let response = await this.privatePostGENMKTMoneyInfo ();\n        let data = response['data'];\n        let balance = data['wallets'];\n        let result = { 'info': data };\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let account = this.account ();\n            if (currency in balance) {\n                if ('available' in balance[currency]) {\n                    account['free'] = parseFloat (balance[currency]['available']['value']);\n                }\n            }\n            if (currency in balance) {\n                if ('balance' in balance[currency]) {\n                    account['total'] = parseFloat (balance[currency]['balance']['value']);\n                }\n            }\n            if (account['total']) {\n                if (account['free']) {\n                    account['used'] = account['total'] - account['free'];\n                }\n            }\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseBidAsk (bidask, priceKey = 0, amountKey = 0) {\n        return [\n            bidask['price_int'] / 100000.0,\n            bidask['amount_int'] / 100000000.0,\n        ];\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetMarketOrderbook (this.extend ({\n            'market': market['id'],\n        }, params));\n        let orderbook = response['data'];\n        return this.parseOrderBook (orderbook);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let ticker = await this.publicGetMarketTicker (this.extend ({\n            'market': this.marketId (symbol),\n        }, params));\n        let timestamp = ticker['timestamp'] * 1000;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['bid']),\n            'ask': parseFloat (ticker['ask']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['volume']['24h']),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        return {\n            'id': trade['trade_id'],\n            'info': trade,\n            'timestamp': trade['date'],\n            'datetime': this.iso8601 (trade['date']),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': undefined,\n            'price': trade['price_int'] / 100000.0,\n            'amount': trade['amount_int'] / 100000000.0,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetMarketTrades (this.extend ({\n            'market': market['id'],\n        }, params));\n        let result = this.parseTrades (response['data']['trades'], market, since, limit);\n        return result;\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        let market = this.market (symbol);\n        let order = {\n            'market': market['id'],\n            'amount_int': amount,\n            'fee_currency': market['quote'],\n            'type': (side == 'buy') ? 'bid' : 'ask',\n        };\n        if (type == 'limit')\n            order['price_int'] = price;\n        let response = await this.privatePostMarketMoneyOrderAdd (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['order_id'].toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostMarketMoneyOrderCancel ({ 'order_id': id });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let request = this.implodeParams (path, params);\n        let url = this.urls['api'] + '/' + this.version + '/' + request;\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'public') {\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            body = this.urlencode (this.extend ({ 'nonce': nonce }, query));\n            let secret = this.base64ToBinary (this.secret);\n            let auth = request + \"\\0\" + body;\n            let signature = this.hmac (this.encode (auth), secret, 'sha512', 'base64');\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Rest-Key': this.apiKey,\n                'Rest-Sign': signature,\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/bl3p.js\n// module id = 387\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst bittrex = require ('./bittrex.js')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class bleutrade extends bittrex {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bleutrade',\n            'name': 'Bleutrade',\n            'countries': 'BR', // Brazil\n            'rateLimit': 1000,\n            'version': 'v2',\n            'hasCORS': true,\n            'hasFetchTickers': true,\n            'hasFetchOHLCV': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/30303000-b602dbe6-976d-11e7-956d-36c5049c01e7.jpg',\n                'api': {\n                    'public': 'https://bleutrade.com/api',\n                    'account': 'https://bleutrade.com/api',\n                    'market': 'https://bleutrade.com/api',\n                },\n                'www': 'https://bleutrade.com',\n                'doc': 'https://bleutrade.com/help/API',\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetMarkets ();\n        let result = [];\n        for (let p = 0; p < markets['result'].length; p++) {\n            let market = markets['result'][p];\n            let id = market['MarketName'];\n            let base = market['MarketCurrency'];\n            let quote = market['BaseCurrency'];\n            base = this.commonCurrencyCode (base);\n            quote = this.commonCurrencyCode (quote);\n            let symbol = base + '/' + quote;\n            let precision = {\n                'amount': 8,\n                'price': 8,\n            };\n            let active = market['IsActive'];\n            result.push (this.extend (this.fees['trading'], {\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'active': active,\n                'info': market,\n                'lot': Math.pow (10, -precision['amount']),\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': market['MinTradeSize'],\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': 0,\n                        'max': undefined,\n                    },\n                },\n            }));\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.publicGetOrderbook (this.extend ({\n            'market': this.marketId (symbol),\n            'type': 'ALL',\n            'depth': 50,\n        }, params));\n        let orderbook = response['result'];\n        return this.parseOrderBook (orderbook, undefined, 'buy', 'sell', 'Rate', 'Quantity');\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/bleutrade.js\n// module id = 388\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { AuthenticationError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class btcchina extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'btcchina',\n            'name': 'BTCChina',\n            'countries': 'CN',\n            'rateLimit': 1500,\n            'version': 'v1',\n            'hasCORS': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766368-465b3286-5ed6-11e7-9a11-0f6467e1d82b.jpg',\n                'api': {\n                    'plus': 'https://plus-api.btcchina.com/market',\n                    'public': 'https://data.btcchina.com/data',\n                    'private': 'https://api.btcchina.com/api_trade_v1.php',\n                },\n                'www': 'https://www.btcchina.com',\n                'doc': 'https://www.btcchina.com/apidocs'\n            },\n            'api': {\n                'plus': {\n                    'get': [\n                        'orderbook',\n                        'ticker',\n                        'trade',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'historydata',\n                        'orderbook',\n                        'ticker',\n                        'trades',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'BuyIcebergOrder',\n                        'BuyOrder',\n                        'BuyOrder2',\n                        'BuyStopOrder',\n                        'CancelIcebergOrder',\n                        'CancelOrder',\n                        'CancelStopOrder',\n                        'GetAccountInfo',\n                        'getArchivedOrder',\n                        'getArchivedOrders',\n                        'GetDeposits',\n                        'GetIcebergOrder',\n                        'GetIcebergOrders',\n                        'GetMarketDepth',\n                        'GetMarketDepth2',\n                        'GetOrder',\n                        'GetOrders',\n                        'GetStopOrder',\n                        'GetStopOrders',\n                        'GetTransactions',\n                        'GetWithdrawal',\n                        'GetWithdrawals',\n                        'RequestWithdrawal',\n                        'SellIcebergOrder',\n                        'SellOrder',\n                        'SellOrder2',\n                        'SellStopOrder',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/CNY': { 'id': 'btccny', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY', 'api': 'public', 'plus': false },\n                'LTC/CNY': { 'id': 'ltccny', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY', 'api': 'public', 'plus': false },\n                'LTC/BTC': { 'id': 'ltcbtc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'api': 'public', 'plus': false },\n                'BCH/CNY': { 'id': 'bcccny', 'symbol': 'BCH/CNY', 'base': 'BCH', 'quote': 'CNY', 'api': 'plus', 'plus': true },\n                'ETH/CNY': { 'id': 'ethcny', 'symbol': 'ETH/CNY', 'base': 'ETH', 'quote': 'CNY', 'api': 'plus', 'plus': true },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetTicker ({\n            'market': 'all',\n        });\n        let result = [];\n        let keys = Object.keys (markets);\n        for (let p = 0; p < keys.length; p++) {\n            let key = keys[p];\n            let market = markets[key];\n            let parts = key.split ('_');\n            let id = parts[1];\n            let base = id.slice (0, 3);\n            let quote = id.slice (3, 6);\n            base = base.toUpperCase ();\n            quote = quote.toUpperCase ();\n            let symbol = base + '/' + quote;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostGetAccountInfo ();\n        let balances = response['result'];\n        let result = { 'info': balances };\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let lowercase = currency.toLowerCase ();\n            let account = this.account ();\n            if (lowercase in balances['balance'])\n                account['total'] = parseFloat (balances['balance'][lowercase]['amount']);\n            if (lowercase in balances['frozen'])\n                account['used'] = parseFloat (balances['frozen'][lowercase]['amount']);\n            account['free'] = account['total'] - account['used'];\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    createMarketRequest (market) {\n        let request = {};\n        let field = (market['plus']) ? 'symbol' : 'market';\n        request[field] = market['id'];\n        return request;\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let method = market['api'] + 'GetOrderbook';\n        let request = this.createMarketRequest (market);\n        let orderbook = await this[method] (this.extend (request, params));\n        let timestamp = orderbook['date'] * 1000;\n        let result = this.parseOrderBook (orderbook, timestamp);\n        result['asks'] = this.sortBy (result['asks'], 0);\n        return result;\n    }\n\n    parseTicker (ticker, market) {\n        let timestamp = ticker['date'] * 1000;\n        return {\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['buy']),\n            'ask': parseFloat (ticker['sell']),\n            'vwap': parseFloat (ticker['vwap']),\n            'open': parseFloat (ticker['open']),\n            'close': parseFloat (ticker['prev_close']),\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['vol']),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseTickerPlus (ticker, market) {\n        let timestamp = ticker['Timestamp'];\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['High']),\n            'low': parseFloat (ticker['Low']),\n            'bid': parseFloat (ticker['BidPrice']),\n            'ask': parseFloat (ticker['AskPrice']),\n            'vwap': undefined,\n            'open': parseFloat (ticker['Open']),\n            'close': parseFloat (ticker['PrevCls']),\n            'first': undefined,\n            'last': parseFloat (ticker['Last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['Volume24H']),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let method = market['api'] + 'GetTicker';\n        let request = this.createMarketRequest (market);\n        let tickers = await this[method] (this.extend (request, params));\n        let ticker = tickers['ticker'];\n        if (market['plus'])\n            return this.parseTickerPlus (ticker, market);\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = parseInt (trade['date']) * 1000;\n        return {\n            'id': trade['tid'],\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': undefined,\n            'price': trade['price'],\n            'amount': trade['amount'],\n        };\n    }\n\n    parseTradePlus (trade, market) {\n        let timestamp = this.parse8601 (trade['timestamp']);\n        return {\n            'id': undefined,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': trade['side'].toLowerCase (),\n            'price': trade['price'],\n            'amount': trade['size'],\n        };\n    }\n\n    parseTradesPlus (trades, market = undefined) {\n        let result = [];\n        for (let i = 0; i < trades.length; i++) {\n            result.push (this.parseTradePlus (trades[i], market));\n        }\n        return result;\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let method = market['api'] + 'GetTrade';\n        let request = this.createMarketRequest (market);\n        if (market['plus']) {\n            let now = this.milliseconds ();\n            request['start_time'] = now - 86400 * 1000;\n            request['end_time'] = now;\n        } else {\n            method += 's'; // trades vs trade\n        }\n        let response = await this[method] (this.extend (request, params));\n        if (market['plus']) {\n            return this.parseTradesPlus (response['trades'], market);\n        }\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let method = 'privatePost' + this.capitalize (side) + 'Order2';\n        let order = {};\n        let id = market['id'].toUpperCase ();\n        if (type == 'market') {\n            order['params'] = [ undefined, amount, id ];\n        } else {\n            order['params'] = [ price, amount, id ];\n        }\n        let response = await this[method] (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = params['market']; // TODO fixme\n        return await this.privatePostCancelOrder (this.extend ({\n            'params': [ id, market ],\n        }, params));\n    }\n\n    nonce () {\n        return this.microseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api] + '/' + path;\n        if (api == 'private') {\n            this.checkRequiredCredentials ();\n            let p = [];\n            if ('params' in params)\n                p = params['params'];\n            let nonce = this.nonce ();\n            let request = {\n                'method': path,\n                'id': nonce,\n                'params': p,\n            };\n            p = p.join (',');\n            body = this.json (request);\n            let query = (\n                'tonce=' + nonce +\n                '&accesskey=' + this.apiKey +\n                '&requestmethod=' + method.toLowerCase () +\n                '&id=' + nonce +\n                '&method=' + path +\n                '&params=' + p\n            );\n            let signature = this.hmac (this.encode (query), this.encode (this.secret), 'sha1');\n            let auth = this.encode (this.apiKey + ':' + signature);\n            headers = {\n                'Authorization': 'Basic ' + this.stringToBase64 (auth),\n                'Json-Rpc-Tonce': nonce,\n            };\n        } else {\n            if (Object.keys (params).length)\n                url += '?' + this.urlencode (params);\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/btcchina.js\n// module id = 389\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst btcturk = require ('./btcturk.js')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class btcexchange extends btcturk {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'btcexchange',\n            'name': 'BTCExchange',\n            'countries': 'PH', // Philippines\n            'rateLimit': 1500,\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27993052-4c92911a-64aa-11e7-96d8-ec6ac3435757.jpg',\n                'api': 'https://www.btcexchange.ph/api',\n                'www': 'https://www.btcexchange.ph',\n                'doc': 'https://github.com/BTCTrader/broker-api-docs',\n            },\n            'markets': {\n                'BTC/PHP': { 'id': 'BTC/PHP', 'symbol': 'BTC/PHP', 'base': 'BTC', 'quote': 'PHP' },\n            },\n        });\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/btcexchange.js\n// module id = 390\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class btcmarkets extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'btcmarkets',\n            'name': 'BTC Markets',\n            'countries': 'AU', // Australia\n            'rateLimit': 1000, // market data cached for 1 second (trades cached for 2 seconds)\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/29142911-0e1acfc2-7d5c-11e7-98c4-07d9532b29d7.jpg',\n                'api': 'https://api.btcmarkets.net',\n                'www': 'https://btcmarkets.net/',\n                'doc': 'https://github.com/BTCMarkets/API',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'market/{id}/tick',\n                        'market/{id}/orderbook',\n                        'market/{id}/trades',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'account/balance',\n                        'account/{id}/tradingfee',\n                    ],\n                    'post': [\n                        'fundtransfer/withdrawCrypto',\n                        'fundtransfer/withdrawEFT',\n                        'order/create',\n                        'order/cancel',\n                        'order/history',\n                        'order/open',\n                        'order/trade/history',\n                        'order/createBatch', // they promise it's coming soon...\n                        'order/detail',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/AUD': { 'id': 'BTC/AUD', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD', 'maker': 0.0085, 'taker': 0.0085 },\n                'LTC/AUD': { 'id': 'LTC/AUD', 'symbol': 'LTC/AUD', 'base': 'LTC', 'quote': 'AUD', 'maker': 0.0085, 'taker': 0.0085 },\n                'ETH/AUD': { 'id': 'ETH/AUD', 'symbol': 'ETH/AUD', 'base': 'ETH', 'quote': 'AUD', 'maker': 0.0085, 'taker': 0.0085 },\n                'ETC/AUD': { 'id': 'ETC/AUD', 'symbol': 'ETC/AUD', 'base': 'ETC', 'quote': 'AUD', 'maker': 0.0085, 'taker': 0.0085 },\n                'XRP/AUD': { 'id': 'XRP/AUD', 'symbol': 'XRP/AUD', 'base': 'XRP', 'quote': 'AUD', 'maker': 0.0085, 'taker': 0.0085 },\n                'BCH/AUD': { 'id': 'BCH/AUD', 'symbol': 'BCH/AUD', 'base': 'BCH', 'quote': 'AUD', 'maker': 0.0085, 'taker': 0.0085 },\n                'LTC/BTC': { 'id': 'LTC/BTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'maker': 0.0022, 'taker': 0.0022 },\n                'ETH/BTC': { 'id': 'ETH/BTC', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'maker': 0.0022, 'taker': 0.0022 },\n                'ETC/BTC': { 'id': 'ETC/BTC', 'symbol': 'ETC/BTC', 'base': 'ETC', 'quote': 'BTC', 'maker': 0.0022, 'taker': 0.0022 },\n                'XRP/BTC': { 'id': 'XRP/BTC', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC', 'maker': 0.0022, 'taker': 0.0022 },\n                'BCH/BTC': { 'id': 'BCH/BTC', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC', 'maker': 0.0022, 'taker': 0.0022 },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let balances = await this.privateGetAccountBalance ();\n        let result = { 'info': balances };\n        for (let b = 0; b < balances.length; b++) {\n            let balance = balances[b];\n            let currency = balance['currency'];\n            let multiplier = 100000000;\n            let total = parseFloat (balance['balance'] / multiplier);\n            let used = parseFloat (balance['pendingFunds'] / multiplier);\n            let free = total - used;\n            let account = {\n                'free': free,\n                'used': used,\n                'total': total,\n            };\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let orderbook = await this.publicGetMarketIdOrderbook (this.extend ({\n            'id': market['id'],\n        }, params));\n        let timestamp = orderbook['timestamp'] * 1000;\n        return this.parseOrderBook (orderbook, timestamp);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = ticker['timestamp'] * 1000;\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': parseFloat (ticker['bestBid']),\n            'ask': parseFloat (ticker['bestAsk']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['lastPrice']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['volume24h']),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let ticker = await this.publicGetMarketIdTick (this.extend ({\n            'id': market['id'],\n        }, params));\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = trade['date'] * 1000;\n        return {\n            'info': trade,\n            'id': trade['tid'].toString (),\n            'order': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': undefined,\n            'price': trade['price'],\n            'amount': trade['amount'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetMarketIdTrades (this.extend ({\n            // 'since': 59868345231,\n            'id': market['id'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let multiplier = 100000000; // for price and volume\n        // does BTC Markets support market orders at all?\n        let orderSide = (side == 'buy') ? 'Bid' : 'Ask';\n        let order = this.ordered ({\n            'currency': market['quote'],\n            'instrument': market['base'],\n            'price': price * multiplier,\n            'volume': amount * multiplier,\n            'orderSide': orderSide,\n            'ordertype': this.capitalize (type),\n            'clientRequestId': this.nonce ().toString (),\n        });\n        let response = await this.privatePostOrderCreate (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['id'].toString (),\n        };\n    }\n\n    async cancelOrders (ids) {\n        await this.loadMarkets ();\n        return await this.privatePostOrderCancel ({ 'order_ids': ids });\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.cancelOrders ([ id ]);\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let uri = '/' + this.implodeParams (path, params);\n        let url = this.urls['api'] + uri;\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'public') {\n            if (Object.keys (params).length)\n                url += '?' + this.urlencode (params);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ().toString ();\n            let auth = uri + \"\\n\" + nonce + \"\\n\";\n            headers = {\n                'Content-Type': 'application/json',\n                'apikey': this.apiKey,\n                'timestamp': nonce,\n            };\n            if (method == 'POST') {\n                body = this.urlencode (query);\n                auth += body;\n            }\n            let secret = this.base64ToBinary (this.secret);\n            let signature = this.hmac (this.encode (auth), secret, 'sha512', 'base64');\n            headers['signature'] = this.decode (signature);\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if (api == 'private') {\n            if ('success' in response)\n                if (!response['success'])\n                    throw new ExchangeError (this.id + ' ' + this.json (response));\n            return response;\n        }\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/btcmarkets.js\n// module id = 391\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class btctradeua extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'btctradeua',\n            'name': 'BTC Trade UA',\n            'countries': 'UA', // Ukraine,\n            'rateLimit': 3000,\n            'hasCORS': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27941483-79fc7350-62d9-11e7-9f61-ac47f28fcd96.jpg',\n                'api': 'https://btc-trade.com.ua/api',\n                'www': 'https://btc-trade.com.ua',\n                'doc': 'https://docs.google.com/document/d/1ocYA0yMy_RXd561sfG3qEPZ80kyll36HUxvCRe5GbhE/edit',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'deals/{symbol}',\n                        'trades/sell/{symbol}',\n                        'trades/buy/{symbol}',\n                        'japan_stat/high/{symbol}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'auth',\n                        'ask/{symbol}',\n                        'balance',\n                        'bid/{symbol}',\n                        'buy/{symbol}',\n                        'my_orders/{symbol}',\n                        'order/status/{id}',\n                        'remove/order/{id}',\n                        'sell/{symbol}',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/UAH': { 'id': 'btc_uah', 'symbol': 'BTC/UAH', 'base': 'BTC', 'quote': 'UAH', 'precision': { 'price': 1 }, 'limits': { 'amount': { 'min': 0.0000000001 }}},\n                'ETH/UAH': { 'id': 'eth_uah', 'symbol': 'ETH/UAH', 'base': 'ETH', 'quote': 'UAH' },\n                'LTC/UAH': { 'id': 'ltc_uah', 'symbol': 'LTC/UAH', 'base': 'LTC', 'quote': 'UAH' },\n                'DOGE/UAH': { 'id': 'doge_uah', 'symbol': 'DOGE/UAH', 'base': 'DOGE', 'quote': 'UAH' },\n                'DASH/UAH': { 'id': 'dash_uah', 'symbol': 'DASH/UAH', 'base': 'DASH', 'quote': 'UAH' },\n                'SIB/UAH': { 'id': 'sib_uah', 'symbol': 'SIB/UAH', 'base': 'SIB', 'quote': 'UAH' },\n                'KRB/UAH': { 'id': 'krb_uah', 'symbol': 'KRB/UAH', 'base': 'KRB', 'quote': 'UAH' },\n                'NVC/UAH': { 'id': 'nvc_uah', 'symbol': 'NVC/UAH', 'base': 'NVC', 'quote': 'UAH' },\n                'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },\n                'NVC/BTC': { 'id': 'nvc_btc', 'symbol': 'NVC/BTC', 'base': 'NVC', 'quote': 'BTC' },\n                'ITI/UAH': { 'id': 'iti_uah', 'symbol': 'ITI/UAH', 'base': 'ITI', 'quote': 'UAH' },\n                'DOGE/BTC': { 'id': 'doge_btc', 'symbol': 'DOGE/BTC', 'base': 'DOGE', 'quote': 'BTC' },\n                'DASH/BTC': { 'id': 'dash_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC' },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.1 / 100,\n                    'taker': 0.1 / 100,\n                },\n            },\n        });\n    }\n\n    signIn () {\n        return this.privatePostAuth ();\n    }\n\n    async fetchBalance (params = {}) {\n        let response = await this.privatePostBalance ();\n        let result = { 'info': response };\n        if ('accounts' in response) {\n            let accounts = response['accounts'];\n            for (let b = 0; b < accounts.length; b++) {\n                let account = accounts[b];\n                let currency = account['currency'];\n                let balance = parseFloat (account['balance']);\n                result[currency] = {\n                    'free': balance,\n                    'used': 0.0,\n                    'total': balance,\n                };\n            }\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let market = this.market (symbol);\n        let bids = await this.publicGetTradesBuySymbol (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        let asks = await this.publicGetTradesSellSymbol (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        let orderbook = {\n            'bids': [],\n            'asks': [],\n        };\n        if (bids) {\n            if ('list' in bids)\n                orderbook['bids'] = bids['list'];\n        }\n        if (asks) {\n            if ('list' in asks)\n                orderbook['asks'] = asks['list'];\n        }\n        return this.parseOrderBook (orderbook, undefined, 'bids', 'asks', 'price', 'currency_trade');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let response = await this.publicGetJapanStatHighSymbol (this.extend ({\n            'symbol': this.marketId (symbol),\n        }, params));\n        let orderbook = await this.fetchOrderBook (symbol);\n        let bid = undefined;\n        let numBids = orderbook['bids'].length;\n        if (numBids > 0)\n            bid = orderbook['bids'][0][0];\n        let ask = undefined;\n        let numAsks = orderbook['asks'].length;\n        if (numAsks > 0)\n            ask = orderbook['asks'][0][0];\n        let ticker = response['trades'];\n        let timestamp = this.milliseconds ();\n        let result = {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': bid,\n            'ask': ask,\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': undefined,\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n        let tickerLength = ticker.length;\n        if (tickerLength > 0) {\n            let start = Math.max (tickerLength - 48, 0);\n            for (let t = start; t < ticker.length; t++) {\n                let candle = ticker[t];\n                if (typeof result['open'] == 'undefined')\n                    result['open'] = candle[1];\n                if ((typeof result['high'] == 'undefined') || (result['high'] < candle[2]))\n                    result['high'] = candle[2];\n                if ((typeof result['low'] == 'undefined') || (result['low'] > candle[3]))\n                    result['low'] = candle[3];\n                if (typeof result['baseVolume'] == 'undefined')\n                    result['baseVolume'] = -candle[5];\n                else\n                    result['baseVolume'] -= candle[5];\n            }\n            let last = tickerLength - 1;\n            result['close'] = ticker[last][4];\n            result['baseVolume'] = -1 * result['baseVolume'];\n        }\n        return result;\n    }\n\n    convertCyrillicMonthNameToString (cyrillic) {\n        let months = [\n            'января',\n            'февраля',\n            'марта',\n            'апреля',\n            'мая',\n            'июня',\n            'июля',\n            'августа',\n            'сентября',\n            'октября',\n            'ноября',\n            'декабря',\n        ];\n        let month = undefined;\n        for (let i = 0; i < months.length; i++) {\n            if (cyrillic == months[i]) {\n                month = i + 1;\n                month = month.toString ();\n                if (i < 9)\n                    month = '0' + month;\n            }\n        }\n        return month;\n    }\n\n    parseCyrillicDatetime (cyrillic) {\n        let parts = cyrillic.split (' ');\n        let day = parts[0];\n        let month = this.convertCyrillicMonthNameToString (parts[1]);\n        if (!month)\n            throw new ExchangeError (this.id + ' parseTrade() undefined month name: ' + cyrillic);\n        let year = parts[2];\n        let hms = parts[4];\n        let hmsLength = hms.length;\n        if (hmsLength == 7) {\n            hms = '0' + hms;\n        }\n        let ymd = [ year, month, day ].join ('-');\n        let ymdhms = ymd + 'T' + hms;\n        let timestamp = this.parse8601 (ymdhms);\n        timestamp = timestamp - 10800000; // server reports local GMT+3 time, adjust to UTC\n        return timestamp;\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = this.parseCyrillicDatetime (trade['pub_date']);\n        return {\n            'id': trade['id'].toString (),\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': undefined,\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['amnt_trade']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetDealsSymbol (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        let trades = [];\n        for (let i = 0; i < response.length; i++) {\n            if (response[i]['id'] % 2) {\n                trades.push (response[i]);\n            }\n        }\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type == 'market')\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        let market = this.market (symbol);\n        let method = 'privatePost' + this.capitalize (side) + 'Id';\n        let order = {\n            'count': amount,\n            'currency1': market['quote'],\n            'currency': market['base'],\n            'price': price,\n        };\n        return this[method] (this.extend (order, params));\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostRemoveOrderId ({ 'id': id });\n    }\n\n    parseOrder (trade, market) {\n        let timestamp = this.milliseconds;\n        return {\n            'id': trade['id'],\n            'timestamp': timestamp, // until they fix their timestamp\n            'datetime': this.iso8601 (timestamp),\n            'status': 'open',\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': trade['type'],\n            'price': trade['price'],\n            'amount': trade['amnt_trade'],\n            'filled': 0,\n            'remaining': trade['amnt_trade'],\n            'trades': undefined,\n            'info': trade,\n        };\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (!symbol)\n            throw new ExchangeError (this.id + ' fetchOpenOrders requires a symbol param');\n        let market = this.market (symbol);\n        let response = await this.privatePostMyOrdersSymbol (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        let orders = response['your_open_orders'];\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'public') {\n            if (Object.keys (query).length)\n                url += this.implodeParams (path, query);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            body = this.urlencode (this.extend ({\n                'out_order_id': nonce,\n                'nonce': nonce,\n            }, query));\n            let auth = body + this.secret;\n            headers = {\n                'public-key': this.apiKey,\n                'api-sign': this.hash (this.encode (auth), 'sha256'),\n                'Content-Type': 'application/x-www-form-urlencoded',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/btctradeua.js\n// module id = 392\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class btcx extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'btcx',\n            'name': 'BTCX',\n            'countries': [ 'IS', 'US', 'EU' ],\n            'rateLimit': 1500, // support in english is very poor, unable to tell rate limits\n            'version': 'v1',\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766385-9fdcc98c-5ed6-11e7-8f14-66d5e5cd47e6.jpg',\n                'api': 'https://btc-x.is/api',\n                'www': 'https://btc-x.is',\n                'doc': 'https://btc-x.is/custom/api-document.html',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'depth/{id}/{limit}',\n                        'ticker/{id}',\n                        'trade/{id}/{limit}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'balance',\n                        'cancel',\n                        'history',\n                        'order',\n                        'redeem',\n                        'trade',\n                        'withdraw',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/USD': { 'id': 'btc/usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },\n                'BTC/EUR': { 'id': 'btc/eur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        let balances = await this.privatePostBalance ();\n        let result = { 'info': balances };\n        let currencies = Object.keys (balances);\n        for (let c = 0; c < currencies.length; c++) {\n            let currency = currencies[c];\n            let uppercase = currency.toUpperCase ();\n            let account = {\n                'free': balances[currency],\n                'used': 0.0,\n                'total': balances[currency],\n            };\n            result[uppercase] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let orderbook = await this.publicGetDepthIdLimit (this.extend ({\n            'id': this.marketId (symbol),\n            'limit': 1000,\n        }, params));\n        return this.parseOrderBook (orderbook, undefined, 'bids', 'asks', 'price', 'amount');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let ticker = await this.publicGetTickerId (this.extend ({\n            'id': this.marketId (symbol),\n        }, params));\n        let timestamp = ticker['time'] * 1000;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['sell']),\n            'ask': parseFloat (ticker['buy']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': undefined,\n            'quoteVolume': parseFloat (ticker['volume']),\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = parseInt (trade['date']) * 1000;\n        let side = (trade['type'] == 'ask') ? 'sell' : 'buy';\n        return {\n            'id': trade['id'],\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': side,\n            'price': trade['price'],\n            'amount': trade['amount'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetTradeIdLimit (this.extend ({\n            'id': market['id'],\n            'limit': 1000,\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        let response = await this.privatePostTrade (this.extend ({\n            'type': side.toUpperCase (),\n            'market': this.marketId (symbol),\n            'amount': amount,\n            'price': price,\n        }, params));\n        return {\n            'info': response,\n            'id': response['order']['id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostCancel ({ 'order': id });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version + '/';\n        if (api == 'public') {\n            url += this.implodeParams (path, params);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            url += api;\n            body = this.urlencode (this.extend ({\n                'Method': path.toUpperCase (),\n                'Nonce': nonce,\n            }, params));\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': this.apiKey,\n                'Signature': this.hmac (this.encode (body), this.encode (this.secret), 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('error' in response)\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/btcx.js\n// module id = 393\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class bxinth extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'bxinth',\n            'name': 'BX.in.th',\n            'countries': 'TH', // Thailand\n            'rateLimit': 1500,\n            'hasCORS': false,\n            'hasFetchTickers': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766412-567b1eb4-5ed7-11e7-94a8-ff6a3884f6c5.jpg',\n                'api': 'https://bx.in.th/api',\n                'www': 'https://bx.in.th',\n                'doc': 'https://bx.in.th/info/api',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        '', // ticker\n                        'options',\n                        'optionbook',\n                        'orderbook',\n                        'pairing',\n                        'trade',\n                        'tradehistory',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'balance',\n                        'biller',\n                        'billgroup',\n                        'billpay',\n                        'cancel',\n                        'deposit',\n                        'getorders',\n                        'history',\n                        'option-issue',\n                        'option-bid',\n                        'option-sell',\n                        'option-myissue',\n                        'option-mybid',\n                        'option-myoptions',\n                        'option-exercise',\n                        'option-cancel',\n                        'option-history',\n                        'order',\n                        'withdrawal',\n                        'withdrawal-history',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'taker': 0.25 / 100,\n                    'maker': 0.25 / 100,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetPairing ();\n        let keys = Object.keys (markets);\n        let result = [];\n        for (let p = 0; p < keys.length; p++) {\n            let market = markets[keys[p]];\n            let id = market['pairing_id'].toString ();\n            let base = market['secondary_currency'];\n            let quote = market['primary_currency'];\n            base = this.commonCurrencyCode (base);\n            quote = this.commonCurrencyCode (quote);\n            let symbol = base + '/' + quote;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    commonCurrencyCode (currency) {\n        // why would they use three letters instead of four for currency codes\n        if (currency == 'DAS')\n            return 'DASH';\n        if (currency == 'DOG')\n            return 'DOGE';\n        return currency;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostBalance ();\n        let balance = response['balance'];\n        let result = { 'info': balance };\n        let currencies = Object.keys (balance);\n        for (let c = 0; c < currencies.length; c++) {\n            let currency = currencies[c];\n            let code = this.commonCurrencyCode (currency);\n            let account = {\n                'free': parseFloat (balance[currency]['available']),\n                'used': 0.0,\n                'total': parseFloat (balance[currency]['total']),\n            };\n            account['used'] = account['total'] - account['free'];\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let orderbook = await this.publicGetOrderbook (this.extend ({\n            'pairing': this.marketId (symbol),\n        }, params));\n        return this.parseOrderBook (orderbook);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': parseFloat (ticker['orderbook']['bids']['highbid']),\n            'ask': parseFloat (ticker['orderbook']['asks']['highbid']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last_price']),\n            'change': parseFloat (ticker['change']),\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['volume_24hours']),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let tickers = await this.publicGet (params);\n        let result = {};\n        let ids = Object.keys (tickers);\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            let ticker = tickers[id];\n            let market = this.markets_by_id[id];\n            let symbol = market['symbol'];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let tickers = await this.publicGet (this.extend ({\n            'pairing': market['id'],\n        }, params));\n        let id = market['id'].toString ();\n        let ticker = tickers[id];\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = this.parse8601 (trade['trade_date']);\n        return {\n            'id': trade['trade_id'],\n            'info': trade,\n            'order': trade['order_id'],\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': trade['trade_type'],\n            'price': parseFloat (trade['rate']),\n            'amount': parseFloat (trade['amount']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetTrade (this.extend ({\n            'pairing': market['id'],\n        }, params));\n        return this.parseTrades (response['trades'], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostOrder (this.extend ({\n            'pairing': this.marketId (symbol),\n            'type': side,\n            'amount': amount,\n            'rate': price,\n        }, params));\n        return {\n            'info': response,\n            'id': response['order_id'].toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let pairing = undefined; // TODO fixme\n        return await this.privatePostCancel ({\n            'order_id': id,\n            'pairing': pairing,\n        });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/';\n        if (path)\n            url += path + '/';\n        if (Object.keys (params).length)\n            url += '?' + this.urlencode (params);\n        if (api == 'private') {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            let auth = this.apiKey + nonce.toString () + this.secret;\n            let signature = this.hash (this.encode (auth), 'sha256');\n            body = this.urlencode (this.extend ({\n                'key': this.apiKey,\n                'nonce': nonce,\n                'signature': signature,\n                // twofa: this.twofa,\n            }, params));\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if (api == 'public')\n            return response;\n        if ('success' in response)\n            if (response['success'])\n                return response;\n        throw new ExchangeError (this.id + ' ' + this.json (response));\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/bxinth.js\n// module id = 394\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class ccex extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'ccex',\n            'name': 'C-CEX',\n            'countries': [ 'DE', 'EU' ],\n            'rateLimit': 1500,\n            'hasCORS': false,\n            'hasFetchTickers': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766433-16881f90-5ed8-11e7-92f8-3d92cc747a6c.jpg',\n                'api': {\n                    'tickers': 'https://c-cex.com/t',\n                    'public': 'https://c-cex.com/t/api_pub.html',\n                    'private': 'https://c-cex.com/t/api.html',\n                },\n                'www': 'https://c-cex.com',\n                'doc': 'https://c-cex.com/?id=api',\n            },\n            'api': {\n                'tickers': {\n                    'get': [\n                        'coinnames',\n                        '{market}',\n                        'pairs',\n                        'prices',\n                        'volume_{coin}',\n                    ],\n                },\n                'public': {\n                    'get': [\n                        'balancedistribution',\n                        'markethistory',\n                        'markets',\n                        'marketsummaries',\n                        'orderbook',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'buylimit',\n                        'cancel',\n                        'getbalance',\n                        'getbalances',\n                        'getopenorders',\n                        'getorder',\n                        'getorderhistory',\n                        'mytrades',\n                        'selllimit',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'taker': 0.2 / 100,\n                    'maker': 0.2 / 100,\n                },\n            },\n        });\n    }\n\n    commonCurrencyCode (currency) {\n        if (currency == 'IOT')\n            return 'IoTcoin';\n        if (currency == 'BLC')\n            return 'Cryptobullcoin';\n        if (currency == 'XID')\n            return 'InternationalDiamond';\n        return currency;\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetMarkets ();\n        let result = [];\n        for (let p = 0; p < markets['result'].length; p++) {\n            let market = markets['result'][p];\n            let id = market['MarketName'];\n            let base = market['MarketCurrency'];\n            let quote = market['BaseCurrency'];\n            base = this.commonCurrencyCode (base);\n            quote = this.commonCurrencyCode (quote);\n            let symbol = base + '/' + quote;\n            result.push (this.extend (this.fees['trading'], {\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n            }));\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privateGetBalances ();\n        let balances = response['result'];\n        let result = { 'info': balances };\n        for (let b = 0; b < balances.length; b++) {\n            let balance = balances[b];\n            let code = balance['Currency'];\n            let currency = this.commonCurrencyCode (code);\n            let account = {\n                'free': balance['Available'],\n                'used': balance['Pending'],\n                'total': balance['Balance'],\n            };\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.publicGetOrderbook (this.extend ({\n            'market': this.marketId (symbol),\n            'type': 'both',\n            'depth': 100,\n        }, params));\n        let orderbook = response['result'];\n        return this.parseOrderBook (orderbook, undefined, 'buy', 'sell', 'Rate', 'Quantity');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = ticker['updated'] * 1000;\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['buy']),\n            'ask': parseFloat (ticker['sell']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['lastprice']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': parseFloat (ticker['avg']),\n            'baseVolume': undefined,\n            'quoteVolume': this.safeFloat (ticker, 'buysupport'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let tickers = await this.tickersGetPrices (params);\n        let result = { 'info': tickers };\n        let ids = Object.keys (tickers);\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            let ticker = tickers[id];\n            let uppercase = id.toUpperCase ();\n            let market = undefined;\n            let symbol = undefined;\n            if (uppercase in this.markets_by_id) {\n                market = this.markets_by_id[uppercase];\n                symbol = market['symbol'];\n            } else {\n                let [ base, quote ] = uppercase.split ('-');\n                base = this.commonCurrencyCode (base);\n                quote = this.commonCurrencyCode (quote);\n                symbol = base + '/' + quote;\n            }\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.tickersGetMarket (this.extend ({\n            'market': market['id'].toLowerCase (),\n        }, params));\n        let ticker = response['ticker'];\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = this.parse8601 (trade['TimeStamp']);\n        return {\n            'id': trade['Id'],\n            'info': trade,\n            'order': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': trade['OrderType'].toLowerCase (),\n            'price': trade['Price'],\n            'amount': trade['Quantity'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetMarkethistory (this.extend ({\n            'market': market['id'],\n            'type': 'both',\n            'depth': 100,\n        }, params));\n        return this.parseTrades (response['result'], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let method = 'privateGet' + this.capitalize (side) + type;\n        let response = await this[method] (this.extend ({\n            'market': this.marketId (symbol),\n            'quantity': amount,\n            'rate': price,\n        }, params));\n        return {\n            'info': response,\n            'id': response['result']['uuid'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privateGetCancel ({ 'uuid': id });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api];\n        if (api == 'private') {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ().toString ();\n            let query = this.keysort (this.extend ({\n                'a': path,\n                'apikey': this.apiKey,\n                'nonce': nonce,\n            }, params));\n            url += '?' + this.urlencode (query);\n            headers = { 'apisign': this.hmac (this.encode (url), this.encode (this.secret), 'sha512') };\n        } else if (api == 'public') {\n            url += '?' + this.urlencode (this.extend ({\n                'a': 'get' + path,\n            }, params));\n        } else {\n            url += '/' + this.implodeParams (path, params) + '.json';\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if (api == 'tickers')\n            return response;\n        if ('success' in response)\n            if (response['success'])\n                return response;\n        throw new ExchangeError (this.id + ' ' + this.json (response));\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/ccex.js\n// module id = 395\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, AuthenticationError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class cex extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'cex',\n            'name': 'CEX.IO',\n            'countries': [ 'GB', 'EU', 'CY', 'RU' ],\n            'rateLimit': 1500,\n            'hasCORS': true,\n            'hasFetchTickers': true,\n            'hasFetchOHLCV': true,\n            'hasFetchOpenOrders': true,\n            'timeframes': {\n                '1m': '1m',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766442-8ddc33b0-5ed8-11e7-8b98-f786aef0f3c9.jpg',\n                'api': 'https://cex.io/api',\n                'www': 'https://cex.io',\n                'doc': 'https://cex.io/cex-api',\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n                'uid': true,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'currency_limits/',\n                        'last_price/{pair}/',\n                        'last_prices/{currencies}/',\n                        'ohlcv/hd/{yyyymmdd}/{pair}',\n                        'order_book/{pair}/',\n                        'ticker/{pair}/',\n                        'tickers/{currencies}/',\n                        'trade_history/{pair}/',\n                    ],\n                    'post': [\n                        'convert/{pair}',\n                        'price_stats/{pair}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'active_orders_status/',\n                        'archived_orders/{pair}/',\n                        'balance/',\n                        'cancel_order/',\n                        'cancel_orders/{pair}/',\n                        'cancel_replace_order/{pair}/',\n                        'close_position/{pair}/',\n                        'get_address/',\n                        'get_myfee/',\n                        'get_order/',\n                        'get_order_tx/',\n                        'open_orders/{pair}/',\n                        'open_orders/',\n                        'open_position/{pair}/',\n                        'open_positions/{pair}/',\n                        'place_order/{pair}/',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0,\n                    'taker': 0.2 / 100,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetCurrencyLimits ();\n        let result = [];\n        for (let p = 0; p < markets['data']['pairs'].length; p++) {\n            let market = markets['data']['pairs'][p];\n            let id = market['symbol1'] + '/' + market['symbol2'];\n            let symbol = id;\n            let [ base, quote ] = symbol.split ('/');\n            result.push ({\n                'id': id,\n                'info': market,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'precision': {\n                    'price': this.precisionFromString (market['minPrice']),\n                    'amount': -1 * Math.log10 (market['minLotSize']),\n                },\n                'limits': {\n                    'amount': {\n                        'min': market['minLotSize'],\n                        'max': market['maxLotSize'],\n                    },\n                    'price': {\n                        'min': parseFloat (market['minPrice']),\n                        'max': parseFloat (market['maxPrice']),\n                    },\n                    'cost': {\n                        'min': market['minLotSizeS2'],\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostBalance ();\n        let result = { 'info': response };\n        let ommited = [ 'username', 'timestamp' ];\n        let balances = this.omit (response, ommited);\n        let currencies = Object.keys (balances);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            if (currency in balances) {\n                let account = {\n                    'free': this.safeFloat (balances[currency], 'available', 0.0),\n                    'used': this.safeFloat (balances[currency], 'orders', 0.0),\n                    'total': 0.0,\n                };\n                account['total'] = this.sum (account['free'], account['used']);\n                result[currency] = account;\n            }\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let orderbook = await this.publicGetOrderBookPair (this.extend ({\n            'pair': this.marketId (symbol),\n        }, params));\n        let timestamp = orderbook['timestamp'] * 1000;\n        return this.parseOrderBook (orderbook, timestamp);\n    }\n\n    parseOHLCV (ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {\n        return [\n            ohlcv[0] * 1000,\n            ohlcv[1],\n            ohlcv[2],\n            ohlcv[3],\n            ohlcv[4],\n            ohlcv[5],\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        if (!since)\n            since = this.milliseconds () - 86400000; // yesterday\n        let ymd = this.Ymd (since);\n        ymd = ymd.split ('-');\n        ymd = ymd.join ('');\n        let request = {\n            'pair': market['id'],\n            'yyyymmdd': ymd,\n        };\n        let response = await this.publicGetOhlcvHdYyyymmddPair (this.extend (request, params));\n        let key = 'data' + this.timeframes[timeframe];\n        let ohlcvs = JSON.parse (response[key]);\n        return this.parseOHLCVs (ohlcvs, market, timeframe, since, limit);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = undefined;\n        let iso8601 = undefined;\n        if ('timestamp' in ticker) {\n            timestamp = parseInt (ticker['timestamp']) * 1000;\n            iso8601 = this.iso8601 (timestamp);\n        }\n        let volume = this.safeFloat (ticker, 'volume');\n        let high = this.safeFloat (ticker, 'high');\n        let low = this.safeFloat (ticker, 'low');\n        let bid = this.safeFloat (ticker, 'bid');\n        let ask = this.safeFloat (ticker, 'ask');\n        let last = this.safeFloat (ticker, 'last');\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': iso8601,\n            'high': high,\n            'low': low,\n            'bid': bid,\n            'ask': ask,\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': last,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': volume,\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let currencies = Object.keys (this.currencies);\n        let response = await this.publicGetTickersCurrencies (this.extend ({\n            'currencies': currencies.join ('/'),\n        }, params));\n        let tickers = response['data'];\n        let result = {};\n        for (let t = 0; t < tickers.length; t++) {\n            let ticker = tickers[t];\n            let symbol = ticker['pair'].replace (':', '/');\n            let market = this.markets[symbol];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let ticker = await this.publicGetTickerPair (this.extend ({\n            'pair': market['id'],\n        }, params));\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        let timestamp = parseInt (trade['date']) * 1000;\n        return {\n            'info': trade,\n            'id': trade['tid'],\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': trade['type'],\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['amount']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetTradeHistoryPair (this.extend ({\n            'pair': market['id'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let order = {\n            'pair': this.marketId (symbol),\n            'type': side,\n            'amount': amount,\n        };\n        if (type == 'limit') {\n            order['price'] = price;\n        } else {\n            // for market buy CEX.io requires the amount of quote currency to spend\n            if (side == 'buy') {\n                if (!price) {\n                    throw new InvalidOrder ('For market buy orders ' + this.id + \" requires the amount of quote currency to spend, to calculate proper costs call createOrder (symbol, 'market', 'buy', amount, price)\");\n                }\n                order['amount'] = amount * price;\n            }\n            order['order_type'] = type;\n        }\n        let response = await this.privatePostPlaceOrderPair (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privatePostCancelOrder ({ 'id': id });\n    }\n\n    parseOrder (order, market = undefined) {\n        let timestamp = parseInt (order['time']);\n        let symbol = undefined;\n        if (!market) {\n            let symbol = order['symbol1'] + '/' + order['symbol2'];\n            if (symbol in this.markets)\n                market = this.market (symbol);\n        }\n        let status = order['status'];\n        if (status == 'a') {\n            status = 'open'; // the unified status\n        } else if (status == 'cd') {\n            status = 'canceled';\n        } else if (status == 'c') {\n            status = 'canceled';\n        } else if (status == 'd') {\n            status = 'closed';\n        }\n        let price = this.safeFloat (order, 'price');\n        let amount = this.safeFloat (order, 'amount');\n        let remaining = this.safeFloat (order, 'pending');\n        if (!remaining)\n            remaining = this.safeFloat (order, 'remains');\n        let filled = amount - remaining;\n        let fee = undefined;\n        let cost = undefined;\n        if (market) {\n            symbol = market['symbol'];\n            cost = this.safeFloat (order, 'ta:' + market['quote']);\n            let baseFee = 'fa:' + market['base'];\n            let quoteFee = 'fa:' + market['quote'];\n            let feeRate = this.safeFloat (order, 'tradingFeeMaker');\n            if (!feeRate)\n                feeRate = this.safeFloat (order, 'tradingFeeTaker', feeRate);\n            if (feeRate)\n                feeRate /= 100.0; // convert to mathematically-correct percentage coefficients: 1.0 = 100%\n            if (baseFee in order) {\n                fee = {\n                    'currency': market['base'],\n                    'rate': feeRate,\n                    'cost': this.safeFloat (order, baseFee),\n                };\n            } else if (quoteFee in order) {\n                fee = {\n                    'currency': market['quote'],\n                    'rate': feeRate,\n                    'cost': this.safeFloat (order, quoteFee),\n                };\n            }\n        }\n        if (!cost)\n            cost = price * filled;\n        return {\n            'id': order['id'],\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'status': status,\n            'symbol': symbol,\n            'type': undefined,\n            'side': order['type'],\n            'price': price,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'trades': undefined,\n            'fee': fee,\n            'info': order,\n        };\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let request = {};\n        let method = 'privatePostOpenOrders';\n        let market = undefined;\n        if (symbol) {\n            market = this.market (symbol);\n            request['pair'] = market['id'];\n            method += 'Pair';\n        }\n        let orders = await this[method] (this.extend (request, params));\n        for (let i = 0; i < orders.length; i++) {\n            orders[i] = this.extend (orders[i], { 'status': 'open' });\n        }\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostGetOrder (this.extend ({\n            'id': id.toString (),\n        }, params));\n        return this.parseOrder (response);\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'public') {\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ().toString ();\n            let auth = nonce + this.uid + this.apiKey;\n            let signature = this.hmac (this.encode (auth), this.encode (this.secret));\n            body = this.urlencode (this.extend ({\n                'key': this.apiKey,\n                'signature': signature.toUpperCase (),\n                'nonce': nonce,\n            }, query));\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if (!response) {\n            throw new ExchangeError (this.id + ' returned ' + this.json (response));\n        } else if (response == true) {\n            return response;\n        } else if ('e' in response) {\n            if ('ok' in response)\n                if (response['ok'] == 'ok')\n                    return response;\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        } else if ('error' in response) {\n            if (response['error'])\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n        }\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/cex.js\n// module id = 396\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst zb = require ('./zb.js')\nconst { ExchangeError, ExchangeNotAvailable } = require ('./base/errors')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class chbtc extends zb {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'chbtc',\n            'name': 'CHBTC',\n            'countries': 'CN',\n            'rateLimit': 1000,\n            'version': 'v1',\n            'hasCORS': false,\n            'hasFetchOrder': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/28555659-f0040dc2-7109-11e7-9d99-688a438bf9f4.jpg',\n                'api': {\n                    'public': 'http://api.chbtc.com/data', // no https for public API\n                    'private': 'https://trade.chbtc.com/api',\n                },\n                'www': 'https://trade.chbtc.com/api',\n                'doc': 'https://www.chbtc.com/i/developer',\n            },\n        });\n    }\n\n    getMarketFieldName () {\n        return 'currency';\n    }\n\n    async fetchMarkets () {\n        return {\n            'BTC/CNY': { 'id': 'btc_cny', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY' },\n            'LTC/CNY': { 'id': 'ltc_cny', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY' },\n            'ETH/CNY': { 'id': 'eth_cny', 'symbol': 'ETH/CNY', 'base': 'ETH', 'quote': 'CNY' },\n            'ETC/CNY': { 'id': 'etc_cny', 'symbol': 'ETC/CNY', 'base': 'ETC', 'quote': 'CNY' },\n            'BTS/CNY': { 'id': 'bts_cny', 'symbol': 'BTS/CNY', 'base': 'BTS', 'quote': 'CNY' },\n            // 'EOS/CNY': { 'id': 'eos_cny', 'symbol': 'EOS/CNY', 'base': 'EOS', 'quote': 'CNY' },\n            'BCH/CNY': { 'id': 'bcc_cny', 'symbol': 'BCH/CNY', 'base': 'BCH', 'quote': 'CNY' },\n            'HSR/CNY': { 'id': 'hsr_cny', 'symbol': 'HSR/CNY', 'base': 'HSR', 'quote': 'CNY' },\n            'QTUM/CNY': { 'id': 'qtum_cny', 'symbol': 'QTUM/CNY', 'base': 'QTUM', 'quote': 'CNY' },\n        };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if (api == 'private') {\n            if ('code' in response)\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n        }\n        if ('result' in response) {\n            if (!response['result'])\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n        }\n        return response;\n    }\n\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/chbtc.js\n// module id = 397\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst foxbit = require ('./foxbit.js')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class chilebit extends foxbit {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'chilebit',\n            'name': 'ChileBit',\n            'countries': 'CL',\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27991414-1298f0d8-647f-11e7-9c40-d56409266336.jpg',\n                'api': {\n                    'public': 'https://api.blinktrade.com/api',\n                    'private': 'https://api.blinktrade.com/tapi',\n                },\n                'www': 'https://chilebit.net',\n                'doc': 'https://blinktrade.com/docs',\n            },\n        });\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/chilebit.js\n// module id = 398\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, NotSupported } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class coincheck extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'coincheck',\n            'name': 'coincheck',\n            'countries': [ 'JP', 'ID' ],\n            'rateLimit': 1500,\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766464-3b5c3c74-5ed9-11e7-840e-31b32968e1da.jpg',\n                'api': 'https://coincheck.com/api',\n                'www': 'https://coincheck.com',\n                'doc': 'https://coincheck.com/documents/exchange/api',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'exchange/orders/rate',\n                        'order_books',\n                        'rate/{pair}',\n                        'ticker',\n                        'trades',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'accounts',\n                        'accounts/balance',\n                        'accounts/leverage_balance',\n                        'bank_accounts',\n                        'deposit_money',\n                        'exchange/orders/opens',\n                        'exchange/orders/transactions',\n                        'exchange/orders/transactions_pagination',\n                        'exchange/leverage/positions',\n                        'lending/borrows/matches',\n                        'send_money',\n                        'withdraws',\n                    ],\n                    'post': [\n                        'bank_accounts',\n                        'deposit_money/{id}/fast',\n                        'exchange/orders',\n                        'exchange/transfers/to_leverage',\n                        'exchange/transfers/from_leverage',\n                        'lending/borrows',\n                        'lending/borrows/{id}/repay',\n                        'send_money',\n                        'withdraws',\n                    ],\n                    'delete': [\n                        'bank_accounts/{id}',\n                        'exchange/orders/{id}',\n                        'withdraws/{id}',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/JPY': { 'id': 'btc_jpy', 'symbol': 'BTC/JPY', 'base': 'BTC', 'quote': 'JPY' }, // the only real pair\n                // 'ETH/JPY': { 'id': 'eth_jpy', 'symbol': 'ETH/JPY', 'base': 'ETH', 'quote': 'JPY' },\n                // 'ETC/JPY': { 'id': 'etc_jpy', 'symbol': 'ETC/JPY', 'base': 'ETC', 'quote': 'JPY' },\n                // 'DAO/JPY': { 'id': 'dao_jpy', 'symbol': 'DAO/JPY', 'base': 'DAO', 'quote': 'JPY' },\n                // 'LSK/JPY': { 'id': 'lsk_jpy', 'symbol': 'LSK/JPY', 'base': 'LSK', 'quote': 'JPY' },\n                // 'FCT/JPY': { 'id': 'fct_jpy', 'symbol': 'FCT/JPY', 'base': 'FCT', 'quote': 'JPY' },\n                // 'XMR/JPY': { 'id': 'xmr_jpy', 'symbol': 'XMR/JPY', 'base': 'XMR', 'quote': 'JPY' },\n                // 'REP/JPY': { 'id': 'rep_jpy', 'symbol': 'REP/JPY', 'base': 'REP', 'quote': 'JPY' },\n                // 'XRP/JPY': { 'id': 'xrp_jpy', 'symbol': 'XRP/JPY', 'base': 'XRP', 'quote': 'JPY' },\n                // 'ZEC/JPY': { 'id': 'zec_jpy', 'symbol': 'ZEC/JPY', 'base': 'ZEC', 'quote': 'JPY' },\n                // 'XEM/JPY': { 'id': 'xem_jpy', 'symbol': 'XEM/JPY', 'base': 'XEM', 'quote': 'JPY' },\n                // 'LTC/JPY': { 'id': 'ltc_jpy', 'symbol': 'LTC/JPY', 'base': 'LTC', 'quote': 'JPY' },\n                // 'DASH/JPY': { 'id': 'dash_jpy', 'symbol': 'DASH/JPY', 'base': 'DASH', 'quote': 'JPY' },\n                // 'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC' },\n                // 'ETC/BTC': { 'id': 'etc_btc', 'symbol': 'ETC/BTC', 'base': 'ETC', 'quote': 'BTC' },\n                // 'LSK/BTC': { 'id': 'lsk_btc', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC' },\n                // 'FCT/BTC': { 'id': 'fct_btc', 'symbol': 'FCT/BTC', 'base': 'FCT', 'quote': 'BTC' },\n                // 'XMR/BTC': { 'id': 'xmr_btc', 'symbol': 'XMR/BTC', 'base': 'XMR', 'quote': 'BTC' },\n                // 'REP/BTC': { 'id': 'rep_btc', 'symbol': 'REP/BTC', 'base': 'REP', 'quote': 'BTC' },\n                // 'XRP/BTC': { 'id': 'xrp_btc', 'symbol': 'XRP/BTC', 'base': 'XRP', 'quote': 'BTC' },\n                // 'ZEC/BTC': { 'id': 'zec_btc', 'symbol': 'ZEC/BTC', 'base': 'ZEC', 'quote': 'BTC' },\n                // 'XEM/BTC': { 'id': 'xem_btc', 'symbol': 'XEM/BTC', 'base': 'XEM', 'quote': 'BTC' },\n                // 'LTC/BTC': { 'id': 'ltc_btc', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC' },\n                // 'DASH/BTC': { 'id': 'dash_btc', 'symbol': 'DASH/BTC', 'base': 'DASH', 'quote': 'BTC' },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        let balances = await this.privateGetAccountsBalance ();\n        let result = { 'info': balances };\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let lowercase = currency.toLowerCase ();\n            let account = this.account ();\n            if (lowercase in balances)\n                account['free'] = parseFloat (balances[lowercase]);\n            let reserved = lowercase + '_reserved';\n            if (reserved in balances)\n                account['used'] = parseFloat (balances[reserved]);\n            account['total'] = this.sum (account['free'], account['used']);\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        if (symbol != 'BTC/JPY')\n            throw new NotSupported (this.id + ' fetchOrderBook () supports BTC/JPY only');\n        let orderbook = await this.publicGetOrderBooks (params);\n        return this.parseOrderBook (orderbook);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        if (symbol != 'BTC/JPY')\n            throw new NotSupported (this.id + ' fetchTicker () supports BTC/JPY only');\n        let ticker = await this.publicGetTicker (params);\n        let timestamp = ticker['timestamp'] * 1000;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['bid']),\n            'ask': parseFloat (ticker['ask']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['volume']),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = this.parse8601 (trade['created_at']);\n        return {\n            'id': trade['id'].toString (),\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': trade['order_type'],\n            'price': parseFloat (trade['rate']),\n            'amount': parseFloat (trade['amount']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        if (symbol != 'BTC/JPY')\n            throw new NotSupported (this.id + ' fetchTrades () supports BTC/JPY only');\n        let market = this.market (symbol);\n        let response = await this.publicGetTrades (params);\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        let prefix = '';\n        let order = {\n            'pair': this.marketId (symbol),\n        };\n        if (type == 'market') {\n            let order_type = type + '_' + side;\n            order['order_type'] = order_type;\n            let prefix = (side == 'buy') ? (order_type + '_') : '';\n            order[prefix + 'amount'] = amount;\n        } else {\n            order['order_type'] = side;\n            order['rate'] = price;\n            order['amount'] = amount;\n        }\n        let response = await this.privatePostExchangeOrders (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['id'].toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privateDeleteExchangeOrdersId ({ 'id': id });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'public') {\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ().toString ();\n            let queryString = '';\n            if (method == 'GET') {\n                if (Object.keys (query).length)\n                    url += '?' + this.urlencode (this.keysort (query));\n            } else {\n                if (Object.keys (query).length) {\n                    body = this.urlencode (this.keysort (query));\n                    queryString = body;\n                }\n            }\n            let auth = nonce + url + queryString;\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'ACCESS-KEY': this.apiKey,\n                'ACCESS-NONCE': nonce,\n                'ACCESS-SIGNATURE': this.hmac (this.encode (auth), this.encode (this.secret)),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if (api == 'public')\n            return response;\n        if ('success' in response)\n            if (response['success'])\n                return response;\n        throw new ExchangeError (this.id + ' ' + this.json (response));\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/coincheck.js\n// module id = 399\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class coinfloor extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'coinfloor',\n            'name': 'coinfloor',\n            'rateLimit': 1000,\n            'countries': 'UK',\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/28246081-623fc164-6a1c-11e7-913f-bac0d5576c90.jpg',\n                'api': 'https://webapi.coinfloor.co.uk:8090/bist',\n                'www': 'https://www.coinfloor.co.uk',\n                'doc': [\n                    'https://github.com/coinfloor/api',\n                    'https://www.coinfloor.co.uk/api',\n                ],\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n                'uid': true,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        '{id}/ticker/',\n                        '{id}/order_book/',\n                        '{id}/transactions/',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        '{id}/balance/',\n                        '{id}/user_transactions/',\n                        '{id}/open_orders/',\n                        '{id}/cancel_order/',\n                        '{id}/buy/',\n                        '{id}/sell/',\n                        '{id}/buy_market/',\n                        '{id}/sell_market/',\n                        '{id}/estimate_sell_market/',\n                        '{id}/estimate_buy_market/',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/GBP': { 'id': 'XBT/GBP', 'symbol': 'BTC/GBP', 'base': 'BTC', 'quote': 'GBP' },\n                'BTC/EUR': { 'id': 'XBT/EUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },\n                'BTC/USD': { 'id': 'XBT/USD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },\n                'BTC/PLN': { 'id': 'XBT/PLN', 'symbol': 'BTC/PLN', 'base': 'BTC', 'quote': 'PLN' },\n                'BCH/GBP': { 'id': 'BCH/GBP', 'symbol': 'BCH/GBP', 'base': 'BCH', 'quote': 'GBP' },\n            },\n        });\n    }\n\n    fetchBalance (params = {}) {\n        let symbol = undefined;\n        if ('symbol' in params)\n            symbol = params['symbol'];\n        if ('id' in params)\n            symbol = params['id'];\n        if (!symbol)\n            throw new ExchangeError (this.id + ' fetchBalance requires a symbol param');\n        // todo parse balance\n        return this.privatePostIdBalance ({\n            'id': this.marketId (symbol),\n        });\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let orderbook = await this.publicGetIdOrderBook (this.extend ({\n            'id': this.marketId (symbol),\n        }, params));\n        return this.parseOrderBook (orderbook);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        // rewrite to get the timestamp from HTTP headers\n        let timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        let vwap = this.safeFloat (ticker, 'vwap');\n        let baseVolume = parseFloat (ticker['volume']);\n        let quoteVolume = undefined;\n        if (typeof vwap != 'undefined') {\n            quoteVolume = baseVolume * vwap;\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['bid']),\n            'ask': parseFloat (ticker['ask']),\n            'vwap': vwap,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let market = this.market (symbol);\n        let ticker = await this.publicGetIdTicker (this.extend ({\n            'id': market['id'],\n        }, params));\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = trade['date'] * 1000;\n        return {\n            'info': trade,\n            'id': trade['tid'].toString (),\n            'order': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': undefined,\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['amount']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetIdTransactions (this.extend ({\n            'id': market['id'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        let order = { 'id': this.marketId (symbol) };\n        let method = 'privatePostId' + this.capitalize (side);\n        if (type == 'market') {\n            order['quantity'] = amount;\n            method += 'Market';\n        } else {\n            order['price'] = price;\n            order['amount'] = amount;\n        }\n        return this[method] (this.extend (order, params));\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostIdCancelOrder ({ 'id': id });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        // curl -k -u '[User ID]/[API key]:[Passphrase]' https://webapi.coinfloor.co.uk:8090/bist/XBT/GBP/balance/\n        let url = this.urls['api'] + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'public') {\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            body = this.urlencode (this.extend ({ 'nonce': nonce }, query));\n            let auth = this.uid + '/' + this.apiKey + ':' + this.password;\n            let signature = this.stringToBase64 (auth);\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': 'Basic ' + signature,\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/coinfloor.js\n// module id = 400\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class coingi extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'coingi',\n            'name': 'Coingi',\n            'rateLimit': 1000,\n            'countries': [ 'PA', 'BG', 'CN', 'US' ], // Panama, Bulgaria, China, US\n            'hasFetchTickers': true,\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/28619707-5c9232a8-7212-11e7-86d6-98fe5d15cc6e.jpg',\n                'api': {\n                    'www': 'https://coingi.com',\n                    'current': 'https://api.coingi.com',\n                    'user': 'https://api.coingi.com',\n                },\n                'www': 'https://coingi.com',\n                'doc': 'http://docs.coingi.apiary.io/',\n            },\n            'api': {\n                'www': {\n                    'get': [\n                        '',\n                    ],\n                },\n                'current': {\n                    'get': [\n                        'order-book/{pair}/{askCount}/{bidCount}/{depth}',\n                        'transactions/{pair}/{maxCount}',\n                        '24hour-rolling-aggregation',\n                    ],\n                },\n                'user': {\n                    'post': [\n                        'balance',\n                        'add-order',\n                        'cancel-order',\n                        'orders',\n                        'transactions',\n                        'create-crypto-withdrawal',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'taker': 0.2 / 100,\n                    'maker': 0.2 / 100,\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {\n                        'BTC': 0.001,\n                        'LTC': 0.01,\n                        'DOGE': 2,\n                        'PPC': 0.02,\n                        'VTC': 0.2,\n                        'NMC': 2,\n                        'DASH': 0.002,\n                        'USD': 10,\n                        'EUR': 10,\n                    },\n                    'deposit': {\n                        'BTC': 0,\n                        'LTC': 0,\n                        'DOGE': 0,\n                        'PPC': 0,\n                        'VTC': 0,\n                        'NMC': 0,\n                        'DASH': 0,\n                        'USD': 5,\n                        'EUR': 1,\n                    },\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        this.parseJsonResponse = false;\n        let response = await this.wwwGet ();\n        this.parseJsonResponse = true;\n        let parts = response.split ('do=currencyPairSelector-selectCurrencyPair\" class=\"active\">');\n        let currencyParts = parts[1].split ('<div class=\"currency-pair-label\">');\n        let result = [];\n        for (let i = 1; i < currencyParts.length; i++) {\n            let currencyPart = currencyParts[i];\n            let idParts = currencyPart.split ('</div>');\n            let id = idParts[0];\n            let symbol = id;\n            id = id.replace ('/', '-');\n            id = id.toLowerCase ();\n            let [ base, quote ] = symbol.split ('/');\n            let precision = {\n                'amount': 8,\n                'price': 8,\n            };\n            let lot = Math.pow (10, -precision['amount']);\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': id,\n                'lot': lot,\n                'active': true,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': lot,\n                        'max': Math.pow (10, precision['amount']),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': 0,\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let lowercaseCurrencies = [];\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            lowercaseCurrencies.push (currency.toLowerCase ());\n        }\n        let balances = await this.userPostBalance ({\n            'currencies': lowercaseCurrencies.join (',')\n        });\n        let result = { 'info': balances };\n        for (let b = 0; b < balances.length; b++) {\n            let balance = balances[b];\n            let currency = balance['currency']['name'];\n            currency = currency.toUpperCase ();\n            let account = {\n                'free': balance['available'],\n                'used': balance['blocked'] + balance['inOrders'] + balance['withdrawing'],\n                'total': 0.0,\n            };\n            account['total'] = this.sum (account['free'], account['used']);\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let orderbook = await this.currentGetOrderBookPairAskCountBidCountDepth (this.extend ({\n            'pair': market['id'],\n            'askCount': 512, // maximum returned number of asks 1-512\n            'bidCount': 512, // maximum returned number of bids 1-512\n            'depth': 32, // maximum number of depth range steps 1-32\n        }, params));\n        return this.parseOrderBook (orderbook, undefined, 'bids', 'asks', 'price', 'baseAmount');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': ticker['high'],\n            'low': ticker['low'],\n            'bid': ticker['highestBid'],\n            'ask': ticker['lowestAsk'],\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': ticker['baseVolume'],\n            'quoteVolume': ticker['counterVolume'],\n            'info': ticker,\n        };\n        return ticker;\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.currentGet24hourRollingAggregation (params);\n        let result = {};\n        for (let t = 0; t < response.length; t++) {\n            let ticker = response[t];\n            let base = ticker['currencyPair']['base'].toUpperCase ();\n            let quote = ticker['currencyPair']['counter'].toUpperCase ();\n            let symbol = base + '/' + quote;\n            let market = undefined;\n            if (symbol in this.markets) {\n                market = this.markets[symbol];\n            }\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let tickers = await this.fetchTickers (undefined, params);\n        if (symbol in tickers)\n            return tickers[symbol];\n        throw new ExchangeError (this.id + ' return did not contain ' + symbol);\n    }\n\n    parseTrade (trade, market = undefined) {\n        if (!market)\n            market = this.markets_by_id[trade['currencyPair']];\n        return {\n            'id': trade['id'],\n            'info': trade,\n            'timestamp': trade['timestamp'],\n            'datetime': this.iso8601 (trade['timestamp']),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': undefined, // type\n            'price': trade['price'],\n            'amount': trade['amount'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.currentGetTransactionsPairMaxCount (this.extend ({\n            'pair': market['id'],\n            'maxCount': 128,\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let order = {\n            'currencyPair': this.marketId (symbol),\n            'volume': amount,\n            'price': price,\n            'orderType': (side == 'buy') ? 0 : 1,\n        };\n        let response = await this.userPostAddOrder (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['result'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.userPostCancelOrder ({ 'orderId': id });\n    }\n\n    sign (path, api = 'current', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api];\n        if (api != 'www') {\n            url += '/' + api + '/' + this.implodeParams (path, params);\n        }\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'current') {\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else if (api == 'user') {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            let request = this.extend ({\n                'token': this.apiKey,\n                'nonce': nonce,\n            }, query);\n            let auth = nonce.toString () + '$' + this.apiKey;\n            request['signature'] = this.hmac (this.encode (auth), this.encode (this.secret));\n            body = this.json (request);\n            headers = {\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'current', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if (typeof response != 'string') {\n            if ('errors' in response)\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n        }\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/coingi.js\n// module id = 401\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class coinmarketcap extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'coinmarketcap',\n            'name': 'CoinMarketCap',\n            'rateLimit': 10000,\n            'version': 'v1',\n            'countries': 'US',\n            'hasCORS': true,\n            'hasPrivateAPI': false,\n            'hasCreateOrder': false,\n            'hasCancelOrder': false,\n            'hasFetchBalance': false,\n            'hasFetchOrderBook': false,\n            'hasFetchTrades': false,\n            'hasFetchTickers': true,\n            'hasFetchCurrencies': true,\n            'has': {\n                'fetchCurrencies': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/28244244-9be6312a-69ed-11e7-99c1-7c1797275265.jpg',\n                'api': 'https://api.coinmarketcap.com',\n                'www': 'https://coinmarketcap.com',\n                'doc': 'https://coinmarketcap.com/api',\n            },\n            'requiredCredentials': {\n                'apiKey': false,\n                'secret': false,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'ticker/',\n                        'ticker/{id}/',\n                        'global/',\n                    ],\n                },\n            },\n            'currencyCodes': [\n                'AUD',\n                'BRL',\n                'CAD',\n                'CHF',\n                'CNY',\n                'EUR',\n                'GBP',\n                'HKD',\n                'IDR',\n                'INR',\n                'JPY',\n                'KRW',\n                'MXN',\n                'RUB',\n                'USD',\n            ],\n        });\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        throw new ExchangeError ('Fetching order books is not supported by the API of ' + this.id);\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetTicker ({\n            'limit': 0,\n        });\n        let result = [];\n        for (let p = 0; p < markets.length; p++) {\n            let market = markets[p];\n            let currencies = this.currencyCodes;\n            for (let i = 0; i < currencies.length; i++) {\n                let quote = currencies[i];\n                let quoteId = quote.toLowerCase ();\n                let base = market['symbol'];\n                let baseId = market['id'];\n                let symbol = base + '/' + quote;\n                let id = baseId + '/' + quote;\n                result.push ({\n                    'id': id,\n                    'symbol': symbol,\n                    'base': base,\n                    'quote': quote,\n                    'baseId': baseId,\n                    'quoteId': quoteId,\n                    'info': market,\n                });\n            }\n        }\n        return result;\n    }\n\n    async fetchGlobal (currency = 'USD') {\n        await this.loadMarkets ();\n        let request = {};\n        if (currency)\n            request['convert'] = currency;\n        return await this.publicGetGlobal (request);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = this.milliseconds ();\n        if ('last_updated' in ticker)\n            if (ticker['last_updated'])\n                timestamp = parseInt (ticker['last_updated']) * 1000;\n        let change = undefined;\n        if ('percent_change_24h' in ticker)\n            if (ticker['percent_change_24h'])\n                change = this.safeFloat (ticker, 'percent_change_24h');\n        let last = undefined;\n        let symbol = undefined;\n        let volume = undefined;\n        if (market) {\n            let priceKey = 'price_' + market['quoteId'];\n            if (priceKey in ticker)\n                if (ticker[priceKey])\n                    last = this.safeFloat (ticker, priceKey);\n            symbol = market['symbol'];\n            let volumeKey = '24h_volume_' + market['quoteId'];\n            if (volumeKey in ticker)\n                if (ticker[volumeKey])\n                    volume = this.safeFloat (ticker, volumeKey);\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': undefined,\n            'ask': undefined,\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': last,\n            'change': change,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': undefined,\n            'quoteVolume': volume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (currency = 'USD', params = {}) {\n        await this.loadMarkets ();\n        let request = {\n            'limit': 10000,\n        };\n        if (currency)\n            request['convert'] = currency;\n        let response = await this.publicGetTicker (this.extend (request, params));\n        let tickers = {};\n        for (let t = 0; t < response.length; t++) {\n            let ticker = response[t];\n            let id = ticker['id'] + '/' + currency;\n            let symbol = id;\n            let market = undefined;\n            if (id in this.markets_by_id) {\n                market = this.markets_by_id[id];\n                symbol = market['symbol'];\n            }\n            tickers[symbol] = this.parseTicker (ticker, market);\n        }\n        return tickers;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = this.extend ({\n            'convert': market['quote'],\n            'id': market['baseId'],\n        }, params);\n        let response = await this.publicGetTickerId (request);\n        let ticker = response[0];\n        return this.parseTicker (ticker, market);\n    }\n\n    async fetchCurrencies (params = {}) {\n        let currencies = await this.publicGetTicker (this.extend ({\n            'limit': 0\n        }, params));\n        let result = {};\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let id = currency['symbol'];\n            // todo: will need to rethink the fees\n            // to add support for multiple withdrawal/deposit methods and\n            // differentiated fees for each particular method\n            let precision = 8; // default precision, todo: fix \"magic constants\"\n            let code = this.commonCurrencyCode (id);\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency,\n                'name': currency['name'],\n                'active': true,\n                'status': 'ok',\n                'fee': undefined, // todo: redesign\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (Object.keys (query).length)\n            url += '?' + this.urlencode (query);\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('error' in response) {\n            if (response['error']) {\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n            }\n        }\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/coinmarketcap.js\n// module id = 402\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, AuthenticationError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class coinmate extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'coinmate',\n            'name': 'CoinMate',\n            'countries': [ 'GB', 'CZ' ], // UK, Czech Republic\n            'rateLimit': 1000,\n            'hasCORS': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27811229-c1efb510-606c-11e7-9a36-84ba2ce412d8.jpg',\n                'api': 'https://coinmate.io/api',\n                'www': 'https://coinmate.io',\n                'doc': [\n                    'http://docs.coinmate.apiary.io',\n                    'https://coinmate.io/developers',\n                ],\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n                'uid': true,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'orderBook',\n                        'ticker',\n                        'transactions',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'balances',\n                        'bitcoinWithdrawal',\n                        'bitcoinDepositAddresses',\n                        'buyInstant',\n                        'buyLimit',\n                        'cancelOrder',\n                        'cancelOrderWithInfo',\n                        'createVoucher',\n                        'openOrders',\n                        'redeemVoucher',\n                        'sellInstant',\n                        'sellLimit',\n                        'transactionHistory',\n                        'unconfirmedBitcoinDeposits',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/EUR': { 'id': 'BTC_EUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'precision': { 'amount': 4, 'price': 2 }},\n                'BTC/CZK': { 'id': 'BTC_CZK', 'symbol': 'BTC/CZK', 'base': 'BTC', 'quote': 'CZK', 'precision': { 'amount': 4, 'price': 2 }},\n                'LTC/BTC': { 'id': 'LTC_BTC', 'symbol': 'LTC/BTC', 'base': 'LTC', 'quote': 'BTC', 'precision': { 'amount': 4, 'price': 5 }},\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.0005,\n                    'taker': 0.0035,\n                },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        let response = await this.privatePostBalances ();\n        let balances = response['data'];\n        let result = { 'info': balances };\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let account = this.account ();\n            if (currency in balances) {\n                account['free'] = balances[currency]['available'];\n                account['used'] = balances[currency]['reserved'];\n                account['total'] = balances[currency]['balance'];\n            }\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let response = await this.publicGetOrderBook (this.extend ({\n            'currencyPair': this.marketId (symbol),\n            'groupByPriceLimit': 'False',\n        }, params));\n        let orderbook = response['data'];\n        let timestamp = orderbook['timestamp'] * 1000;\n        return this.parseOrderBook (orderbook, timestamp, 'bids', 'asks', 'price', 'amount');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let response = await this.publicGetTicker (this.extend ({\n            'currencyPair': this.marketId (symbol),\n        }, params));\n        let ticker = response['data'];\n        let timestamp = ticker['timestamp'] * 1000;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['bid']),\n            'ask': parseFloat (ticker['ask']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['amount']),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        if (!market)\n            market = this.markets_by_id[trade['currencyPair']];\n        return {\n            'id': trade['transactionId'],\n            'info': trade,\n            'timestamp': trade['timestamp'],\n            'datetime': this.iso8601 (trade['timestamp']),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': undefined,\n            'price': trade['price'],\n            'amount': trade['amount'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetTransactions (this.extend ({\n            'currencyPair': market['id'],\n            'minutesIntoHistory': 10,\n        }, params));\n        return this.parseTrades (response['data'], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        let method = 'privatePost' + this.capitalize (side);\n        let order = {\n            'currencyPair': this.marketId (symbol),\n        };\n        if (type == 'market') {\n            if (side == 'buy')\n                order['total'] = amount; // amount in fiat\n            else\n                order['amount'] = amount; // amount in fiat\n            method += 'Instant';\n        } else {\n            order['amount'] = amount; // amount in crypto\n            order['price'] = price;\n            method += this.capitalize (type);\n        }\n        let response = await this[method] (self.extend (order, params));\n        return {\n            'info': response,\n            'id': response['data'].toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostCancelOrder ({ 'orderId': id });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + path;\n        if (api == 'public') {\n            if (Object.keys (params).length)\n                url += '?' + this.urlencode (params);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ().toString ();\n            let auth = nonce + this.uid + this.apiKey;\n            let signature = this.hmac (this.encode (auth), this.encode (this.secret));\n            body = this.urlencode (this.extend ({\n                'clientId': this.uid,\n                'nonce': nonce,\n                'publicKey': this.apiKey,\n                'signature': signature.toUpperCase (),\n            }, params));\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('error' in response)\n            if (response['error'])\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/coinmate.js\n// module id = 403\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class coinsecure extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'coinsecure',\n            'name': 'Coinsecure',\n            'countries': 'IN', // India\n            'rateLimit': 1000,\n            'version': 'v1',\n            'hasCORS': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766472-9cbd200a-5ed9-11e7-9551-2267ad7bac08.jpg',\n                'api': 'https://api.coinsecure.in',\n                'www': 'https://coinsecure.in',\n                'doc': [\n                    'https://api.coinsecure.in',\n                    'https://github.com/coinsecure/plugins',\n                ],\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': false,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'bitcoin/search/confirmation/{txid}',\n                        'exchange/ask/low',\n                        'exchange/ask/orders',\n                        'exchange/bid/high',\n                        'exchange/bid/orders',\n                        'exchange/lastTrade',\n                        'exchange/max24Hr',\n                        'exchange/min24Hr',\n                        'exchange/ticker',\n                        'exchange/trades',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'mfa/authy/call',\n                        'mfa/authy/sms',\n                        'netki/search/{netkiName}',\n                        'user/bank/otp/{number}',\n                        'user/kyc/otp/{number}',\n                        'user/profile/phone/otp/{number}',\n                        'user/wallet/coin/address/{id}',\n                        'user/wallet/coin/deposit/confirmed/all',\n                        'user/wallet/coin/deposit/confirmed/{id}',\n                        'user/wallet/coin/deposit/unconfirmed/all',\n                        'user/wallet/coin/deposit/unconfirmed/{id}',\n                        'user/wallet/coin/wallets',\n                        'user/exchange/bank/fiat/accounts',\n                        'user/exchange/bank/fiat/balance/available',\n                        'user/exchange/bank/fiat/balance/pending',\n                        'user/exchange/bank/fiat/balance/total',\n                        'user/exchange/bank/fiat/deposit/cancelled',\n                        'user/exchange/bank/fiat/deposit/unverified',\n                        'user/exchange/bank/fiat/deposit/verified',\n                        'user/exchange/bank/fiat/withdraw/cancelled',\n                        'user/exchange/bank/fiat/withdraw/completed',\n                        'user/exchange/bank/fiat/withdraw/unverified',\n                        'user/exchange/bank/fiat/withdraw/verified',\n                        'user/exchange/ask/cancelled',\n                        'user/exchange/ask/completed',\n                        'user/exchange/ask/pending',\n                        'user/exchange/bid/cancelled',\n                        'user/exchange/bid/completed',\n                        'user/exchange/bid/pending',\n                        'user/exchange/bank/coin/addresses',\n                        'user/exchange/bank/coin/balance/available',\n                        'user/exchange/bank/coin/balance/pending',\n                        'user/exchange/bank/coin/balance/total',\n                        'user/exchange/bank/coin/deposit/cancelled',\n                        'user/exchange/bank/coin/deposit/unverified',\n                        'user/exchange/bank/coin/deposit/verified',\n                        'user/exchange/bank/coin/withdraw/cancelled',\n                        'user/exchange/bank/coin/withdraw/completed',\n                        'user/exchange/bank/coin/withdraw/unverified',\n                        'user/exchange/bank/coin/withdraw/verified',\n                        'user/exchange/bank/summary',\n                        'user/exchange/coin/fee',\n                        'user/exchange/fiat/fee',\n                        'user/exchange/kycs',\n                        'user/exchange/referral/coin/paid',\n                        'user/exchange/referral/coin/successful',\n                        'user/exchange/referral/fiat/paid',\n                        'user/exchange/referrals',\n                        'user/exchange/trade/summary',\n                        'user/login/token/{token}',\n                        'user/summary',\n                        'user/wallet/summary',\n                        'wallet/coin/withdraw/cancelled',\n                        'wallet/coin/withdraw/completed',\n                        'wallet/coin/withdraw/unverified',\n                        'wallet/coin/withdraw/verified',\n                    ],\n                    'post': [\n                        'login',\n                        'login/initiate',\n                        'login/password/forgot',\n                        'mfa/authy/initiate',\n                        'mfa/ga/initiate',\n                        'signup',\n                        'user/netki/update',\n                        'user/profile/image/update',\n                        'user/exchange/bank/coin/withdraw/initiate',\n                        'user/exchange/bank/coin/withdraw/newVerifycode',\n                        'user/exchange/bank/fiat/withdraw/initiate',\n                        'user/exchange/bank/fiat/withdraw/newVerifycode',\n                        'user/password/change',\n                        'user/password/reset',\n                        'user/wallet/coin/withdraw/initiate',\n                        'wallet/coin/withdraw/newVerifycode',\n                    ],\n                    'put': [\n                        'signup/verify/{token}',\n                        'user/exchange/kyc',\n                        'user/exchange/bank/fiat/deposit/new',\n                        'user/exchange/ask/new',\n                        'user/exchange/bid/new',\n                        'user/exchange/instant/buy',\n                        'user/exchange/instant/sell',\n                        'user/exchange/bank/coin/withdraw/verify',\n                        'user/exchange/bank/fiat/account/new',\n                        'user/exchange/bank/fiat/withdraw/verify',\n                        'user/mfa/authy/initiate/enable',\n                        'user/mfa/ga/initiate/enable',\n                        'user/netki/create',\n                        'user/profile/phone/new',\n                        'user/wallet/coin/address/new',\n                        'user/wallet/coin/new',\n                        'user/wallet/coin/withdraw/sendToExchange',\n                        'user/wallet/coin/withdraw/verify',\n                    ],\n                    'delete': [\n                        'user/gcm/{code}',\n                        'user/logout',\n                        'user/exchange/bank/coin/withdraw/unverified/cancel/{withdrawID}',\n                        'user/exchange/bank/fiat/deposit/cancel/{depositID}',\n                        'user/exchange/ask/cancel/{orderID}',\n                        'user/exchange/bid/cancel/{orderID}',\n                        'user/exchange/bank/fiat/withdraw/unverified/cancel/{withdrawID}',\n                        'user/mfa/authy/disable/{code}',\n                        'user/mfa/ga/disable/{code}',\n                        'user/profile/phone/delete',\n                        'user/profile/image/delete/{netkiName}',\n                        'user/wallet/coin/withdraw/unverified/cancel/{withdrawID}',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/INR': { 'id': 'BTC/INR', 'symbol': 'BTC/INR', 'base': 'BTC', 'quote': 'INR' },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.4 / 100,\n                    'taker': 0.4 / 100,\n                },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        let response = await this.privateGetUserExchangeBankSummary ();\n        let balance = response['message'];\n        let coin = {\n            'free': balance['availableCoinBalance'],\n            'used': balance['pendingCoinBalance'],\n            'total': balance['totalCoinBalance'],\n        };\n        let fiat = {\n            'free': balance['availableFiatBalance'],\n            'used': balance['pendingFiatBalance'],\n            'total': balance['totalFiatBalance'],\n        };\n        let result = {\n            'info': balance,\n            'BTC': coin,\n            'INR': fiat,\n        };\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let bids = await this.publicGetExchangeBidOrders (params);\n        let asks = await this.publicGetExchangeAskOrders (params);\n        let orderbook = {\n            'bids': bids['message'],\n            'asks': asks['message'],\n        };\n        return this.parseOrderBook (orderbook, undefined, 'bids', 'asks', 'rate', 'vol');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let response = await this.publicGetExchangeTicker (params);\n        let ticker = response['message'];\n        let timestamp = ticker['timestamp'];\n        let baseVolume = parseFloat (ticker['coinvolume']);\n        if (symbol == 'BTC/INR') {\n            let satoshi = 0.00000001;\n            baseVolume = baseVolume * satoshi;\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['bid']),\n            'ask': parseFloat (ticker['ask']),\n            'vwap': undefined,\n            'open': parseFloat (ticker['open']),\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['lastPrice']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': parseFloat (ticker['fiatvolume']),\n            'info': ticker,\n        };\n    }\n\n    fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        return this.publicGetExchangeTrades (params);\n    }\n\n    async createOrder (market, type, side, amount, price = undefined, params = {}) {\n        let method = 'privatePutUserExchange';\n        let order = {};\n        if (type == 'market') {\n            method += 'Instant' + this.capitalize (side);\n            if (side == 'buy')\n                order['maxFiat'] = amount;\n            else\n                order['maxVol'] = amount;\n        } else {\n            let direction = (side == 'buy') ? 'Bid' : 'Ask';\n            method += direction + 'New';\n            order['rate'] = price;\n            order['vol'] = amount;\n        }\n        let response = await this[method] (self.extend (order, params));\n        return {\n            'info': response,\n            'id': response['message']['orderID'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        throw new ExchangeError (this.id + ' cancelOrder () is not fully implemented yet');\n        let method = 'privateDeleteUserExchangeAskCancelOrderId'; // TODO fixme, have to specify order side here\n        return await this[method] ({ 'orderID': id });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'private') {\n            this.checkRequiredCredentials ();\n            headers = { 'Authorization': this.apiKey };\n            if (Object.keys (query).length) {\n                body = this.json (query);\n                headers['Content-Type'] = 'application/json';\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('success' in response)\n            if (response['success'])\n                return response;\n        throw new ExchangeError (this.id + ' ' + this.json (response));\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/coinsecure.js\n// module id = 404\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, AuthenticationError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class coinspot extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'coinspot',\n            'name': 'CoinSpot',\n            'countries': 'AU', // Australia\n            'rateLimit': 1000,\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/28208429-3cacdf9a-6896-11e7-854e-4c79a772a30f.jpg',\n                'api': {\n                    'public': 'https://www.coinspot.com.au/pubapi',\n                    'private': 'https://www.coinspot.com.au/api',\n                },\n                'www': 'https://www.coinspot.com.au',\n                'doc': 'https://www.coinspot.com.au/api',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'latest',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'orders',\n                        'orders/history',\n                        'my/coin/deposit',\n                        'my/coin/send',\n                        'quote/buy',\n                        'quote/sell',\n                        'my/balances',\n                        'my/orders',\n                        'my/buy',\n                        'my/sell',\n                        'my/buy/cancel',\n                        'my/sell/cancel',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/AUD': { 'id': 'BTC', 'symbol': 'BTC/AUD', 'base': 'BTC', 'quote': 'AUD' },\n                'LTC/AUD': { 'id': 'LTC', 'symbol': 'LTC/AUD', 'base': 'LTC', 'quote': 'AUD' },\n                'DOGE/AUD': { 'id': 'DOGE', 'symbol': 'DOGE/AUD', 'base': 'DOGE', 'quote': 'AUD' },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        let response = await this.privatePostMyBalances ();\n        let result = { 'info': response };\n        if ('balance' in response) {\n            let balances = response['balance'];\n            let currencies = Object.keys (balances);\n            for (let c = 0; c < currencies.length; c++) {\n                let currency = currencies[c];\n                let uppercase = currency.toUpperCase ();\n                let account = {\n                    'free': balances[currency],\n                    'used': 0.0,\n                    'total': balances[currency],\n                };\n                if (uppercase == 'DRK')\n                    uppercase = 'DASH';\n                result[uppercase] = account;\n            }\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let market = this.market (symbol);\n        let orderbook = await this.privatePostOrders (this.extend ({\n            'cointype': market['id'],\n        }, params));\n        let result = this.parseOrderBook (orderbook, undefined, 'buyorders', 'sellorders', 'rate', 'amount');\n        result['bids'] = this.sortBy (result['bids'], 0, true);\n        result['asks'] = this.sortBy (result['asks'], 0);\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let response = await this.publicGetLatest (params);\n        let id = this.marketId (symbol);\n        id = id.toLowerCase ();\n        let ticker = response['prices'][id];\n        let timestamp = this.milliseconds ();\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': parseFloat (ticker['bid']),\n            'ask': parseFloat (ticker['ask']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': undefined,\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        return this.privatePostOrdersHistory (this.extend ({\n            'cointype': this.marketId (symbol),\n        }, params));\n    }\n\n    createOrder (market, type, side, amount, price = undefined, params = {}) {\n        let method = 'privatePostMy' + this.capitalize (side);\n        if (type == 'market')\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        let order = {\n            'cointype': this.marketId (market),\n            'amount': amount,\n            'rate': price,\n        };\n        return this[method] (this.extend (order, params));\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        throw new ExchangeError (this.id + ' cancelOrder () is not fully implemented yet');\n        let method = 'privatePostMyBuy';\n        return await this[method] ({ 'id': id });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        if (!this.apiKey)\n            throw new AuthenticationError (this.id + ' requires apiKey for all requests');\n        let url = this.urls['api'][api] + '/' + path;\n        if (api == 'private') {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            body = this.json (this.extend ({ 'nonce': nonce }, params));\n            headers = {\n                'Content-Type': 'application/json',\n                'key': this.apiKey,\n                'sign': this.hmac (this.encode (body), this.encode (this.secret), 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/coinspot.js\n// module id = 405\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, InsufficientFunds, OrderNotFound, OrderNotCached } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class cryptopia extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'cryptopia',\n            'name': 'Cryptopia',\n            'rateLimit': 1500,\n            'countries': 'NZ', // New Zealand\n            'hasCORS': false,\n            // obsolete metainfo interface\n            'hasFetchTickers': true,\n            'hasFetchOrder': true,\n            'hasFetchOrders': true,\n            'hasFetchOpenOrders': true,\n            'hasFetchClosedOrders': true,\n            'hasFetchMyTrades': true,\n            'hasFetchCurrencies': true,\n            'hasDeposit': true,\n            'hasWithdraw': true,\n            // new metainfo interface\n            'has': {\n                'fetchTickers': true,\n                'fetchOrder': 'emulated',\n                'fetchOrders': 'emulated',\n                'fetchOpenOrders': true,\n                'fetchClosedOrders': 'emulated',\n                'fetchMyTrades': true,\n                'fetchCurrencies': true,\n                'deposit': true,\n                'withdraw': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/29484394-7b4ea6e2-84c6-11e7-83e5-1fccf4b2dc81.jpg',\n                'api': 'https://www.cryptopia.co.nz/api',\n                'www': 'https://www.cryptopia.co.nz',\n                'doc': [\n                    'https://www.cryptopia.co.nz/Forum/Category/45',\n                    'https://www.cryptopia.co.nz/Forum/Thread/255',\n                    'https://www.cryptopia.co.nz/Forum/Thread/256',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'GetCurrencies',\n                        'GetTradePairs',\n                        'GetMarkets',\n                        'GetMarkets/{id}',\n                        'GetMarkets/{hours}',\n                        'GetMarkets/{id}/{hours}',\n                        'GetMarket/{id}',\n                        'GetMarket/{id}/{hours}',\n                        'GetMarketHistory/{id}',\n                        'GetMarketHistory/{id}/{hours}',\n                        'GetMarketOrders/{id}',\n                        'GetMarketOrders/{id}/{count}',\n                        'GetMarketOrderGroups/{ids}/{count}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'CancelTrade',\n                        'GetBalance',\n                        'GetDepositAddress',\n                        'GetOpenOrders',\n                        'GetTradeHistory',\n                        'GetTransactions',\n                        'SubmitTip',\n                        'SubmitTrade',\n                        'SubmitTransfer',\n                        'SubmitWithdraw',\n                    ],\n                },\n            },\n        });\n    }\n\n    commonCurrencyCode (currency) {\n        if (currency == 'CC')\n            return 'CCX';\n        if (currency == 'FCN')\n            return 'Facilecoin';\n        if (currency == 'NET')\n            return 'NetCoin';\n        if (currency == 'BTG')\n            return 'Bitgem';\n        if (currency == 'FUEL')\n            return 'FC2'; // FuelCoin != FUEL\n        if (currency == 'WRC')\n            return 'WarCoin';\n        return currency;\n    }\n\n    currencyId (currency) {\n        if (currency == 'CCX')\n            return 'CC';\n        if (currency == 'Facilecoin')\n            return 'FCN';\n        if (currency == 'NetCoin')\n            return 'NET';\n        if (currency == 'Bitgem')\n            return 'BTG';\n        if (currency == 'FC2')\n            return 'FUEL'; // FuelCoin != FUEL\n        return currency;\n    }\n\n    async fetchMarkets () {\n        let response = await this.publicGetTradePairs ();\n        let result = [];\n        let markets = response['Data'];\n        for (let i = 0; i < markets.length; i++) {\n            let market = markets[i];\n            let id = market['Id'];\n            let symbol = market['Label'];\n            let [ base, quote ] = symbol.split ('/');\n            base = this.commonCurrencyCode (base);\n            quote = this.commonCurrencyCode (quote);\n            symbol = base + '/' + quote;\n            let precision = {\n                'amount': 8,\n                'price': 8,\n            };\n            let amountLimits = {\n                'min': market['MinimumTrade'],\n                'max': market['MaximumTrade']\n            };\n            let priceLimits = {\n                'min': market['MinimumPrice'],\n                'max': market['MaximumPrice'],\n            };\n            let limits = {\n                'amount': amountLimits,\n                'price': priceLimits,\n            };\n            let active = market['Status'] == 'OK';\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n                'maker': market['TradeFee'] / 100,\n                'taker': market['TradeFee'] / 100,\n                'lot': amountLimits['min'],\n                'active': active,\n                'precision': precision,\n                'limits': limits,\n            });\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.publicGetMarketOrdersId (this.extend ({\n            'id': this.marketId (symbol),\n        }, params));\n        let orderbook = response['Data'];\n        return this.parseOrderBook (orderbook, undefined, 'Buy', 'Sell', 'Price', 'Volume');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'info': ticker,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['High']),\n            'low': parseFloat (ticker['Low']),\n            'bid': parseFloat (ticker['BidPrice']),\n            'ask': parseFloat (ticker['AskPrice']),\n            'vwap': undefined,\n            'open': parseFloat (ticker['Open']),\n            'close': parseFloat (ticker['Close']),\n            'first': undefined,\n            'last': parseFloat (ticker['LastPrice']),\n            'change': parseFloat (ticker['Change']),\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['Volume']),\n            'quoteVolume': parseFloat (ticker['BaseVolume']),\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetMarketId (this.extend ({\n            'id': market['id'],\n        }, params));\n        let ticker = response['Data'];\n        return this.parseTicker (ticker, market);\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.publicGetMarkets (params);\n        let result = {};\n        let tickers = response['Data'];\n        for (let i = 0; i < tickers.length; i++) {\n            let ticker = tickers[i];\n            let id = ticker['TradePairId'];\n            let recognized = (id in this.markets_by_id);\n            if (!recognized)\n                throw new ExchangeError (this.id + ' fetchTickers() returned unrecognized pair id ' + id);\n            let market = this.markets_by_id[id];\n            let symbol = market['symbol'];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    parseTrade (trade, market = undefined) {\n        let timestamp = undefined;\n        if ('Timestamp' in trade) {\n            timestamp = trade['Timestamp'] * 1000;\n        } else if ('TimeStamp' in trade) {\n            timestamp = this.parse8601 (trade['TimeStamp']);\n        }\n        let price = this.safeFloat (trade, 'Price');\n        if (!price)\n            price = this.safeFloat (trade, 'Rate');\n        let cost = this.safeFloat (trade, 'Total');\n        let id = this.safeString (trade, 'TradeId');\n        if (!market) {\n            if ('TradePairId' in trade)\n                if (trade['TradePairId'] in this.markets_by_id)\n                    market = this.markets_by_id[trade['TradePairId']];\n        }\n        let symbol = undefined;\n        let fee = undefined;\n        if (market) {\n            symbol = market['symbol'];\n            if ('Fee' in trade) {\n                fee = {\n                    'currency': market['quote'],\n                    'cost': trade['Fee'],\n                };\n            }\n        }\n        return {\n            'id': id,\n            'info': trade,\n            'order': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': 'limit',\n            'side': trade['Type'].toLowerCase (),\n            'price': price,\n            'cost': cost,\n            'amount': trade['Amount'],\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetMarketHistoryIdHours (this.extend ({\n            'id': market['id'],\n            'hours': 24, // default\n        }, params));\n        let trades = response['Data'];\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let request = {};\n        let market = undefined;\n        if (symbol) {\n            market = this.market (symbol);\n            request['TradePairId'] = market['id'];\n        }\n        let response = await this.privatePostGetTradeHistory (this.extend (request, params));\n        return this.parseTrades (response['Data'], market, since, limit);\n    }\n\n    async fetchCurrencies (params = {}) {\n        let response = await this.publicGetCurrencies (params);\n        let currencies = response['Data'];\n        let result = {};\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let id = currency['Symbol'];\n            // todo: will need to rethink the fees\n            // to add support for multiple withdrawal/deposit methods and\n            // differentiated fees for each particular method\n            let precision = 8; // default precision, todo: fix \"magic constants\"\n            let code = this.commonCurrencyCode (id);\n            let active = (currency['ListingStatus'] == 'Active');\n            let status = currency['Status'].toLowerCase ();\n            if (status != 'ok')\n                active = false;\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency,\n                'name': currency['Name'],\n                'active': active,\n                'status': status,\n                'fee': currency['WithdrawFee'],\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': currency['MinBaseTrade'],\n                        'max': Math.pow (10, precision),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': currency['MinWithdraw'],\n                        'max': currency['MaxWithdraw'],\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostGetBalance ();\n        let balances = response['Data'];\n        let result = { 'info': response };\n        for (let i = 0; i < balances.length; i++) {\n            let balance = balances[i];\n            let code = balance['Symbol'];\n            let currency = this.commonCurrencyCode (code);\n            let account = {\n                'free': balance['Available'],\n                'used': 0.0,\n                'total': balance['Total'],\n            };\n            account['used'] = account['total'] - account['free'];\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type == 'market')\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        price = parseFloat (price);\n        amount = parseFloat (amount);\n        let request = {\n            'TradePairId': market['id'],\n            'Type': this.capitalize (side),\n            'Rate': this.priceToPrecision (symbol, price),\n            'Amount': this.amountToPrecision (symbol, amount),\n        };\n        let response = await this.privatePostSubmitTrade (this.extend (request, params));\n        if (!response)\n            throw new ExchangeError (this.id + ' createOrder returned unknown error: ' + this.json (response));\n        let id = undefined;\n        let filled = 0.0;\n        if ('Data' in response) {\n            if ('OrderId' in response['Data']) {\n                if (response['Data']['OrderId']) {\n                    id = response['Data']['OrderId'].toString ();\n                }\n            }\n            if ('FilledOrders' in response['Data']) {\n                let filledOrders = response['Data']['FilledOrders'];\n                let filledOrdersLength = filledOrders.length;\n                if (filledOrdersLength) {\n                    filled = undefined;\n                }\n            }\n        }\n        let timestamp = this.milliseconds ();\n        let order = {\n            'id': id,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'status': 'open',\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'price': price,\n            'cost': price * amount,\n            'amount': amount,\n            'remaining': amount,\n            'filled': filled,\n            'fee': undefined,\n            // 'trades': this.parseTrades (order['trades'], market),\n        };\n        if (id)\n            this.orders[id] = order;\n        return this.extend ({ 'info': response }, order);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = undefined;\n        try {\n            response = await this.privatePostCancelTrade (this.extend ({\n                'Type': 'Trade',\n                'OrderId': id,\n            }, params));\n            if (id in this.orders)\n                this.orders[id]['status'] = 'canceled';\n        } catch (e) {\n            if (this.last_json_response) {\n                let message = this.safeString (this.last_json_response, 'Error');\n                if (message) {\n                    if (message.indexOf ('does not exist') >= 0)\n                        throw new OrderNotFound (this.id + ' cancelOrder() error: ' + this.last_http_response);\n                }\n            }\n            throw e;\n        }\n        return response;\n    }\n\n    parseOrder (order, market = undefined) {\n        let symbol = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        } else if ('Market' in order) {\n            let id = order['Market'];\n            if (id in this.markets_by_id) {\n                market = this.markets_by_id[id];\n                symbol = market['symbol'];\n            }\n        }\n        let timestamp = this.parse8601 (order['TimeStamp']);\n        let amount = this.safeFloat (order, 'Amount');\n        let remaining = this.safeFloat (order, 'Remaining');\n        let filled = amount - remaining;\n        return {\n            'id': order['OrderId'].toString (),\n            'info': this.omit (order, 'status'),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'status': order['status'],\n            'symbol': symbol,\n            'type': 'limit',\n            'side': order['Type'].toLowerCase (),\n            'price': this.safeFloat (order, 'Rate'),\n            'cost': this.safeFloat (order, 'Total'),\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'fee': undefined,\n            // 'trades': this.parseTrades (order['trades'], market),\n        };\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (!symbol)\n            throw new ExchangeError (this.id + ' fetchOrders requires a symbol param');\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.privatePostGetOpenOrders ({\n            // 'Market': market['id'],\n            'TradePairId': market['id'], // Cryptopia identifier (not required if 'Market' supplied)\n            // 'Count': 100, // default = 100\n        }, params);\n        let orders = [];\n        for (let i = 0; i < response['Data'].length; i++) {\n            orders.push (this.extend (response['Data'][i], { 'status': 'open' }));\n        }\n        let openOrders = this.parseOrders (orders, market);\n        for (let j = 0; j < openOrders.length; j++) {\n            this.orders[openOrders[j]['id']] = openOrders[j];\n        }\n        let openOrdersIndexedById = this.indexBy (openOrders, 'id');\n        let cachedOrderIds = Object.keys (this.orders);\n        let result = [];\n        for (let k = 0; k < cachedOrderIds.length; k++) {\n            let id = cachedOrderIds[k];\n            if (id in openOrdersIndexedById) {\n                this.orders[id] = this.extend (this.orders[id], openOrdersIndexedById[id]);\n            } else {\n                let order = this.orders[id];\n                if (order['status'] == 'open') {\n                    this.orders[id] = this.extend (order, {\n                        'status': 'closed',\n                        'cost': order['amount'] * order['price'],\n                        'filled': order['amount'],\n                        'remaining': 0.0,\n                    });\n                }\n            }\n            let order = this.orders[id];\n            if (order['symbol'] == symbol)\n                result.push (order);\n        }\n        return this.filterBySinceLimit (result, since, limit);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        id = id.toString ();\n        let orders = await this.fetchOrders (symbol, params);\n        for (let i = 0; i < orders.length; i++) {\n            if (orders[i]['id'] == id)\n                return orders[i];\n        }\n        throw new OrderNotCached (this.id + ' order ' + id + ' not found in cached .orders, fetchOrder requires .orders (de)serialization implemented for this method to work properly');\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        let orders = await this.fetchOrders (symbol, params);\n        let result = [];\n        for (let i = 0; i < orders.length; i++) {\n            if (orders[i]['status'] == 'open')\n                result.push (orders[i]);\n        }\n        return result;\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        let orders = await this.fetchOrders (symbol, params);\n        let result = [];\n        for (let i = 0; i < orders.length; i++) {\n            if (orders[i]['status'] == 'closed')\n                result.push (orders[i]);\n        }\n        return result;\n    }\n\n    async fetchDepositAddress (currency, params = {}) {\n        let currencyId = this.currencyId (currency);\n        let response = await this.privatePostGetDepositAddress (this.extend ({\n            'Currency': currencyId\n        }, params));\n        let address = this.safeString (response['Data'], 'BaseAddress');\n        if (!address)\n            address = this.safeString (response['Data'], 'Address');\n        return {\n            'currency': currency,\n            'address': address,\n            'status': 'ok',\n            'info': response,\n        };\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        let currencyId = this.currencyId (currency);\n        let response = await this.privatePostSubmitWithdraw (this.extend ({\n            'Currency': currencyId,\n            'Amount': amount,\n            'Address': address, // Address must exist in you AddressBook in security settings\n        }, params));\n        return {\n            'info': response,\n            'id': response['Data'],\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'public') {\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ().toString ();\n            body = this.json (query);\n            let hash = this.hash (this.encode (body), 'md5', 'base64');\n            let secret = this.base64ToBinary (this.secret);\n            let uri = this.encodeURIComponent (url);\n            let lowercase = uri.toLowerCase ();\n            let payload = this.apiKey + method + lowercase + nonce + this.binaryToString (hash);\n            let signature = this.hmac (this.encode (payload), secret, 'sha256', 'base64');\n            let auth = 'amx ' + this.apiKey + ':' + this.binaryToString (signature) + ':' + nonce;\n            headers = {\n                'Content-Type': 'application/json',\n                'Authorization': auth,\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if (response) {\n            if ('Success' in response)\n                if (response['Success']) {\n                    return response;\n                } else if ('Error' in response) {\n                    if (response['Error'] == 'Insufficient Funds.')\n                        throw new InsufficientFunds (this.id + ' ' + this.json (response));\n                }\n        }\n        throw new ExchangeError (this.id + ' ' + this.json (response));\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/cryptopia.js\n// module id = 406\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst liqui = require ('./liqui.js')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class dsx extends liqui {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'dsx',\n            'name': 'DSX',\n            'countries': 'UK',\n            'rateLimit': 1500,\n            'hasCORS': false,\n            'hasFetchOrder': true,\n            'hasFetchOrders': true,\n            'hasFetchOpenOrders': true,\n            'hasFetchClosedOrders': true,\n            'hasFetchTickers': true,\n            'hasFetchMyTrades': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27990275-1413158a-645a-11e7-931c-94717f7510e3.jpg',\n                'api': {\n                    'public': 'https://dsx.uk/mapi', // market data\n                    'private': 'https://dsx.uk/tapi', // trading\n                    'dwapi': 'https://dsx.uk/dwapi', // deposit/withdraw\n                },\n                'www': 'https://dsx.uk',\n                'doc': [\n                    'https://api.dsx.uk',\n                    'https://dsx.uk/api_docs/public',\n                    'https://dsx.uk/api_docs/private',\n                    '',\n                ],\n            },\n            'api': {\n                // market data (public)\n                'public': {\n                    'get': [\n                        'barsFromMoment/{id}/{period}/{start}', // empty reply :\\\n                        'depth/{pair}',\n                        'info',\n                        'lastBars/{id}/{period}/{amount}', // period is (m, h or d)\n                        'periodBars/{id}/{period}/{start}/{end}',\n                        'ticker/{pair}',\n                        'trades/{pair}',\n                    ],\n                },\n                // trading (private)\n                'private': {\n                    'post': [\n                        'getInfo',\n                        'TransHistory',\n                        'TradeHistory',\n                        'OrderHistory',\n                        'ActiveOrders',\n                        'Trade',\n                        'CancelOrder',\n                    ],\n                },\n                // deposit / withdraw (private)\n                'dwapi': {\n                    'post': [\n                        'getCryptoDepositAddress',\n                        'cryptoWithdraw',\n                        'fiatWithdraw',\n                        'getTransactionStatus',\n                        'getTransactions',\n                    ],\n                },\n            },\n        });\n    }\n\n    getBaseQuoteFromMarketId (id) {\n        let uppercase = id.toUpperCase ();\n        let base = uppercase.slice (0, 3);\n        let quote = uppercase.slice (3, 6);\n        base = this.commonCurrencyCode (base);\n        quote = this.commonCurrencyCode (quote);\n        return [ base, quote ];\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostGetInfo ();\n        let balances = response['return'];\n        let result = { 'info': balances };\n        let funds = balances['funds'];\n        let currencies = Object.keys (funds);\n        for (let c = 0; c < currencies.length; c++) {\n            let currency = currencies[c];\n            let uppercase = currency.toUpperCase ();\n            uppercase = this.commonCurrencyCode (uppercase);\n            let account = {\n                'free': funds[currency],\n                'used': 0.0,\n                'total': balances['total'][currency],\n            };\n            account['used'] = account['total'] - account['free'];\n            result[uppercase] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = ticker['updated'] * 1000;\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy'),\n            'ask': this.safeFloat (ticker, 'sell'),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': this.safeFloat (ticker, 'last'),\n            'change': undefined,\n            'percentage': undefined,\n            'average': 1 / this.safeFloat (ticker, 'avg'),\n            'baseVolume': this.safeFloat (ticker, 'vol'),\n            'quoteVolume': this.safeFloat (ticker, 'vol_cur'),\n            'info': ticker,\n        };\n    }\n\n    getOrderIdKey () {\n        return 'orderId';\n    }\n\n    signBodyWithSecret (body) {\n        return this.decode (this.hmac (this.encode (body), this.encode (this.secret), 'sha512', 'base64'));\n    }\n\n    getVersionString () {\n        return ''; // they don't prepend version number to public URLs as other BTC-e clones do\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/dsx.js\n// module id = 407\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class exmo extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'exmo',\n            'name': 'EXMO',\n            'countries': [ 'ES', 'RU' ], // Spain, Russia\n            'rateLimit': 1000, // once every 350 ms ≈ 180 requests per minute ≈ 3 requests per second\n            'version': 'v1',\n            'hasCORS': false,\n            'hasFetchTickers': true,\n            'hasWithdraw': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766491-1b0ea956-5eda-11e7-9225-40d67b481b8d.jpg',\n                'api': 'https://api.exmo.com',\n                'www': 'https://exmo.me',\n                'doc': [\n                    'https://exmo.me/en/api_doc',\n                    'https://github.com/exmo-dev/exmo_api_lib/tree/master/nodejs',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'currency',\n                        'order_book',\n                        'pair_settings',\n                        'ticker',\n                        'trades',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'user_info',\n                        'order_create',\n                        'order_cancel',\n                        'user_open_orders',\n                        'user_trades',\n                        'user_cancelled_orders',\n                        'order_trades',\n                        'required_amount',\n                        'deposit_address',\n                        'withdraw_crypt',\n                        'withdraw_get_txid',\n                        'excode_create',\n                        'excode_load',\n                        'wallet_history',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.2 / 100,\n                    'taker': 0.2 / 100,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetPairSettings ();\n        let keys = Object.keys (markets);\n        let result = [];\n        for (let p = 0; p < keys.length; p++) {\n            let id = keys[p];\n            let market = markets[id];\n            let symbol = id.replace ('_', '/');\n            let [ base, quote ] = symbol.split ('/');\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'limits': {\n                    'amount': {\n                        'min': market['min_quantity'],\n                        'max': market['max_quantity'],\n                    },\n                    'price': {\n                        'min': market['min_price'],\n                        'max': market['max_price'],\n                    },\n                    'cost': {\n                        'min': market['min_amount'],\n                        'max': market['max_amount'],\n                    },\n                },\n                'precision': {\n                    'amount': 8,\n                    'price': 8,\n                },\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostUserInfo ();\n        let result = { 'info': response };\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let account = this.account ();\n            if (currency in response['balances'])\n                account['free'] = parseFloat (response['balances'][currency]);\n            if (currency in response['reserved'])\n                account['used'] = parseFloat (response['reserved'][currency]);\n            account['total'] = this.sum (account['free'], account['used']);\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetOrderBook (this.extend ({\n            'pair': market['id'],\n        }, params));\n        let orderbook = response[market['id']];\n        return this.parseOrderBook (orderbook, undefined, 'bid', 'ask');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = ticker['updated'] * 1000;\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['buy_price']),\n            'ask': parseFloat (ticker['sell_price']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last_trade']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': parseFloat (ticker['avg']),\n            'baseVolume': parseFloat (ticker['vol']),\n            'quoteVolume': parseFloat (ticker['vol_curr']),\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.publicGetTicker (params);\n        let result = {};\n        let ids = Object.keys (response);\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            let market = this.markets_by_id[id];\n            let symbol = market['symbol'];\n            let ticker = response[id];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.publicGetTicker (params);\n        let market = this.market (symbol);\n        return this.parseTicker (response[market['id']], market);\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = trade['date'] * 1000;\n        return {\n            'id': trade['trade_id'].toString (),\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'order': undefined,\n            'type': undefined,\n            'side': trade['type'],\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['quantity']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetTrades (this.extend ({\n            'pair': market['id'],\n        }, params));\n        return this.parseTrades (response[market['id']], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let prefix = '';\n        if (type == 'market')\n            prefix = 'market_';\n        if (typeof price == 'undefined')\n            price = 0;\n        let order = {\n            'pair': this.marketId (symbol),\n            'quantity': amount,\n            'price': price,\n            'type': prefix + side,\n        };\n        let response = await this.privatePostOrderCreate (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['order_id'].toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privatePostOrderCancel ({ 'order_id': id });\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        await this.loadMarkets ();\n        let result = await this.privatePostWithdrawCrypt (this.extend ({\n            'amount': amount,\n            'currency': currency,\n            'address': address,\n        }, params));\n        return {\n            'info': result,\n            'id': result['task_id'],\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version + '/' + path;\n        if (api == 'public') {\n            if (Object.keys (params).length)\n                url += '?' + this.urlencode (params);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            body = this.urlencode (this.extend ({ 'nonce': nonce }, params));\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': this.apiKey,\n                'Sign': this.hmac (this.encode (body), this.encode (this.secret), 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('result' in response) {\n            if (response['result'])\n                return response;\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        }\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/exmo.js\n// module id = 408\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, AuthenticationError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class flowbtc extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'flowbtc',\n            'name': 'flowBTC',\n            'countries': 'BR', // Brazil\n            'version': 'v1',\n            'rateLimit': 1000,\n            'hasCORS': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/28162465-cd815d4c-67cf-11e7-8e57-438bea0523a2.jpg',\n                'api': 'https://api.flowbtc.com:8400/ajax',\n                'www': 'https://trader.flowbtc.com',\n                'doc': 'http://www.flowbtc.com.br/api/',\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n                'uid': true,\n            },\n            'api': {\n                'public': {\n                    'post': [\n                        'GetTicker',\n                        'GetTrades',\n                        'GetTradesByDate',\n                        'GetOrderBook',\n                        'GetProductPairs',\n                        'GetProducts',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'CreateAccount',\n                        'GetUserInfo',\n                        'SetUserInfo',\n                        'GetAccountInfo',\n                        'GetAccountTrades',\n                        'GetDepositAddresses',\n                        'Withdraw',\n                        'CreateOrder',\n                        'ModifyOrder',\n                        'CancelOrder',\n                        'CancelAllOrders',\n                        'GetAccountOpenOrders',\n                        'GetOrderFee',\n                    ],\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let response = await this.publicPostGetProductPairs ();\n        let markets = response['productPairs'];\n        let result = [];\n        for (let p = 0; p < markets.length; p++) {\n            let market = markets[p];\n            let id = market['name'];\n            let base = market['product1Label'];\n            let quote = market['product2Label'];\n            let symbol = base + '/' + quote;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostGetAccountInfo ();\n        let balances = response['currencies'];\n        let result = { 'info': response };\n        for (let b = 0; b < balances.length; b++) {\n            let balance = balances[b];\n            let currency = balance['name'];\n            let account = {\n                'free': balance['balance'],\n                'used': balance['hold'],\n                'total': 0.0,\n            };\n            account['total'] = this.sum (account['free'], account['used']);\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let orderbook = await this.publicPostGetOrderBook (this.extend ({\n            'productPair': market['id'],\n        }, params));\n        return this.parseOrderBook (orderbook, undefined, 'bids', 'asks', 'px', 'qty');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let ticker = await this.publicPostGetTicker (this.extend ({\n            'productPair': market['id'],\n        }, params));\n        let timestamp = this.milliseconds ();\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['bid']),\n            'ask': parseFloat (ticker['ask']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['volume24hr']),\n            'quoteVolume': parseFloat (ticker['volume24hrProduct2']),\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = trade['unixtime'] * 1000;\n        let side = (trade['incomingOrderSide'] == 0) ? 'buy' : 'sell';\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'id': trade['tid'].toString (),\n            'order': undefined,\n            'type': undefined,\n            'side': side,\n            'price': trade['px'],\n            'amount': trade['qty'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicPostGetTrades (this.extend ({\n            'ins': market['id'],\n            'startIndex': -1,\n        }, params));\n        return this.parseTrades (response['trades'], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let orderType = (type == 'market') ? 1 : 0;\n        let order = {\n            'ins': this.marketId (symbol),\n            'side': side,\n            'orderType': orderType,\n            'qty': amount,\n            'px': price,\n        };\n        let response = await this.privatePostCreateOrder (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['serverOrderId'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        if ('ins' in params) {\n            return await this.privatePostCancelOrder (this.extend ({\n                'serverOrderId': id,\n            }, params));\n        }\n        throw new ExchangeError (this.id + ' requires `ins` symbol parameter for cancelling an order');\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version + '/' + path;\n        if (api == 'public') {\n            if (Object.keys (params).length) {\n                body = this.json (params);\n            }\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            let auth = nonce.toString () + this.uid + this.apiKey;\n            let signature = this.hmac (this.encode (auth), this.encode (this.secret));\n            body = this.json (this.extend ({\n                'apiKey': this.apiKey,\n                'apiNonce': nonce,\n                'apiSig': signature.toUpperCase (),\n            }, params));\n            headers = {\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('isAccepted' in response)\n            if (response['isAccepted'])\n                return response;\n        throw new ExchangeError (this.id + ' ' + this.json (response));\n    }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/flowbtc.js\n// module id = 409\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst fybse = require ('./fybse.js')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class fybsg extends fybse {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'fybsg',\n            'name': 'FYB-SG',\n            'countries': 'SG', // Singapore\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766513-3364d56a-5edb-11e7-9e6b-d5898bb89c81.jpg',\n                'api': 'https://www.fybsg.com/api/SGD',\n                'www': 'https://www.fybsg.com',\n                'doc': 'http://docs.fyb.apiary.io',\n            },\n            'markets': {\n                'BTC/SGD': { 'id': 'SGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' },\n            },\n        });\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/fybsg.js\n// module id = 410\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, AuthenticationError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class gatecoin extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'gatecoin',\n            'name': 'Gatecoin',\n            'rateLimit': 2000,\n            'countries': 'HK', // Hong Kong\n            'comment': 'a regulated/licensed exchange',\n            'hasCORS': false,\n            'hasFetchTickers': true,\n            'hasFetchOHLCV': true,\n            'timeframes': {\n                '1m': '1m',\n                '15m': '15m',\n                '1h': '1h',\n                '6h': '6h',\n                '1d': '24h',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/28646817-508457f2-726c-11e7-9eeb-3528d2413a58.jpg',\n                'api': 'https://api.gatecoin.com',\n                'www': 'https://gatecoin.com',\n                'doc': [\n                    'https://gatecoin.com/api',\n                    'https://github.com/Gatecoin/RESTful-API-Implementation',\n                    'https://api.gatecoin.com/swagger-ui/index.html',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'Public/ExchangeRate', // Get the exchange rates\n                        'Public/LiveTicker', // Get live ticker for all currency\n                        'Public/LiveTicker/{CurrencyPair}', // Get live ticker by currency\n                        'Public/LiveTickers', // Get live ticker for all currency\n                        'Public/MarketDepth/{CurrencyPair}', // Gets prices and market depth for the currency pair.\n                        'Public/NetworkStatistics/{DigiCurrency}', // Get the network status of a specific digital currency\n                        'Public/StatisticHistory/{DigiCurrency}/{Typeofdata}', // Get the historical data of a specific digital currency\n                        'Public/TickerHistory/{CurrencyPair}/{Timeframe}', // Get ticker history\n                        'Public/Transactions/{CurrencyPair}', // Gets recent transactions\n                        'Public/TransactionsHistory/{CurrencyPair}', // Gets all transactions\n                        'Reference/BusinessNatureList', // Get the business nature list.\n                        'Reference/Countries', // Get the country list.\n                        'Reference/Currencies', // Get the currency list.\n                        'Reference/CurrencyPairs', // Get the currency pair list.\n                        'Reference/CurrentStatusList', // Get the current status list.\n                        'Reference/IdentydocumentTypes', // Get the different types of identity documents possible.\n                        'Reference/IncomeRangeList', // Get the income range list.\n                        'Reference/IncomeSourceList', // Get the income source list.\n                        'Reference/VerificationLevelList', // Get the verif level list.\n                        'Stream/PublicChannel', // Get the public pubnub channel list\n                    ],\n                    'post': [\n                        'Export/Transactions', // Request a export of all trades from based on currencypair, start date and end date\n                        'Ping', // Post a string, then get it back.\n                        'Public/Unsubscribe/{EmailCode}', // Lets the user unsubscribe from emails\n                        'RegisterUser', // Initial trader registration.\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'Account/CorporateData', // Get corporate account data\n                        'Account/DocumentAddress', // Check if residence proof uploaded\n                        'Account/DocumentCorporation', // Check if registered document uploaded\n                        'Account/DocumentID', // Check if ID document copy uploaded\n                        'Account/DocumentInformation', // Get Step3 Data\n                        'Account/Email', // Get user email\n                        'Account/FeeRate', // Get fee rate of logged in user\n                        'Account/Level', // Get verif level of logged in user\n                        'Account/PersonalInformation', // Get Step1 Data\n                        'Account/Phone', // Get user phone number\n                        'Account/Profile', // Get trader profile\n                        'Account/Questionnaire', // Fill the questionnaire\n                        'Account/Referral', // Get referral information\n                        'Account/ReferralCode', // Get the referral code of the logged in user\n                        'Account/ReferralNames', // Get names of referred traders\n                        'Account/ReferralReward', // Get referral reward information\n                        'Account/ReferredCode', // Get referral code\n                        'Account/ResidentInformation', // Get Step2 Data\n                        'Account/SecuritySettings', // Get verif details of logged in user\n                        'Account/User', // Get all user info\n                        'APIKey/APIKey', // Get API Key for logged in user\n                        'Auth/ConnectionHistory', // Gets connection history of logged in user\n                        'Balance/Balances', // Gets the available balance for each currency for the logged in account.\n                        'Balance/Balances/{Currency}', // Gets the available balance for s currency for the logged in account.\n                        'Balance/Deposits', // Get all account deposits, including wire and digital currency, of the logged in user\n                        'Balance/Withdrawals', // Get all account withdrawals, including wire and digital currency, of the logged in user\n                        'Bank/Accounts/{Currency}/{Location}', // Get internal bank account for deposit\n                        'Bank/Transactions', // Get all account transactions of the logged in user\n                        'Bank/UserAccounts', // Gets all the bank accounts related to the logged in user.\n                        'Bank/UserAccounts/{Currency}', // Gets all the bank accounts related to the logged in user.\n                        'ElectronicWallet/DepositWallets', // Gets all crypto currency addresses related deposits to the logged in user.\n                        'ElectronicWallet/DepositWallets/{DigiCurrency}', // Gets all crypto currency addresses related deposits to the logged in user by currency.\n                        'ElectronicWallet/Transactions', // Get all digital currency transactions of the logged in user\n                        'ElectronicWallet/Transactions/{DigiCurrency}', // Get all digital currency transactions of the logged in user\n                        'ElectronicWallet/UserWallets', // Gets all external digital currency addresses related to the logged in user.\n                        'ElectronicWallet/UserWallets/{DigiCurrency}', // Gets all external digital currency addresses related to the logged in user by currency.\n                        'Info/ReferenceCurrency', // Get user's reference currency\n                        'Info/ReferenceLanguage', // Get user's reference language\n                        'Notification/Messages', // Get from oldest unread + 3 read message to newest messages\n                        'Trade/Orders', // Gets open orders for the logged in trader.\n                        'Trade/Orders/{OrderID}', // Gets an order for the logged in trader.\n                        'Trade/StopOrders', // Gets all stop orders for the logged in trader. Max 1000 record.\n                        'Trade/StopOrdersHistory', // Gets all stop orders for the logged in trader. Max 1000 record.\n                        'Trade/Trades', // Gets all transactions of logged in user\n                        'Trade/UserTrades', // Gets all transactions of logged in user\n                    ],\n                    'post': [\n                        'Account/DocumentAddress', // Upload address proof document\n                        'Account/DocumentCorporation', // Upload registered document document\n                        'Account/DocumentID', // Upload ID document copy\n                        'Account/Email/RequestVerify', // Request for verification email\n                        'Account/Email/Verify', // Verification email\n                        'Account/GoogleAuth', // Enable google auth\n                        'Account/Level', // Request verif level of logged in user\n                        'Account/Questionnaire', // Fill the questionnaire\n                        'Account/Referral', // Post a referral email\n                        'APIKey/APIKey', // Create a new API key for logged in user\n                        'Auth/ChangePassword', // Change password.\n                        'Auth/ForgotPassword', // Request reset password\n                        'Auth/ForgotUserID', // Request user id\n                        'Auth/Login', // Trader session log in.\n                        'Auth/Logout', // Logout from the current session.\n                        'Auth/LogoutOtherSessions', // Logout other sessions.\n                        'Auth/ResetPassword', // Reset password\n                        'Bank/Transactions', // Request a transfer from the traders account of the logged in user. This is only available for bank account\n                        'Bank/UserAccounts', // Add an account the logged in user\n                        'ElectronicWallet/DepositWallets/{DigiCurrency}', // Add an digital currency addresses to the logged in user.\n                        'ElectronicWallet/Transactions/Deposits/{DigiCurrency}', // Get all internal digital currency transactions of the logged in user\n                        'ElectronicWallet/Transactions/Withdrawals/{DigiCurrency}', // Get all external digital currency transactions of the logged in user\n                        'ElectronicWallet/UserWallets/{DigiCurrency}', // Add an external digital currency addresses to the logged in user.\n                        'ElectronicWallet/Withdrawals/{DigiCurrency}', // Request a transfer from the traders account to an external address. This is only available for crypto currencies.\n                        'Notification/Messages', // Mark all as read\n                        'Notification/Messages/{ID}', // Mark as read\n                        'Trade/Orders', // Place an order at the exchange.\n                        'Trade/StopOrders', // Place a stop order at the exchange.\n                    ],\n                    'put': [\n                        'Account/CorporateData', // Update user company data for corporate account\n                        'Account/DocumentID', // Update ID document meta data\n                        'Account/DocumentInformation', // Update Step3 Data\n                        'Account/Email', // Update user email\n                        'Account/PersonalInformation', // Update Step1 Data\n                        'Account/Phone', // Update user phone number\n                        'Account/Questionnaire', // update the questionnaire\n                        'Account/ReferredCode', // Update referral code\n                        'Account/ResidentInformation', // Update Step2 Data\n                        'Account/SecuritySettings', // Update verif details of logged in user\n                        'Account/User', // Update all user info\n                        'Bank/UserAccounts', // Update the label of existing user bank accounnt\n                        'ElectronicWallet/DepositWallets/{DigiCurrency}/{AddressName}', // Update the name of an address\n                        'ElectronicWallet/UserWallets/{DigiCurrency}', // Update the name of an external address\n                        'Info/ReferenceCurrency', // User's reference currency\n                        'Info/ReferenceLanguage', // Update user's reference language\n                    ],\n                    'delete': [\n                        'APIKey/APIKey/{PublicKey}', // Remove an API key\n                        'Bank/Transactions/{RequestID}', // Delete pending account withdraw of the logged in user\n                        'Bank/UserAccounts/{Currency}/{Label}', // Delete an account of the logged in user\n                        'ElectronicWallet/DepositWallets/{DigiCurrency}/{AddressName}', // Delete an digital currency addresses related to the logged in user.\n                        'ElectronicWallet/UserWallets/{DigiCurrency}/{AddressName}', // Delete an external digital currency addresses related to the logged in user.\n                        'Trade/Orders', // Cancels all existing order\n                        'Trade/Orders/{OrderID}', // Cancels an existing order\n                        'Trade/StopOrders', // Cancels all existing stop orders\n                        'Trade/StopOrders/{ID}', // Cancels an existing stop order\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.0025,\n                    'taker': 0.0035,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let response = await this.publicGetPublicLiveTickers ();\n        let markets = response['tickers'];\n        let result = [];\n        for (let p = 0; p < markets.length; p++) {\n            let market = markets[p];\n            let id = market['currencyPair'];\n            let base = id.slice (0, 3);\n            let quote = id.slice (3, 6);\n            let symbol = base + '/' + quote;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privateGetBalanceBalances ();\n        let balances = response['balances'];\n        let result = { 'info': balances };\n        for (let b = 0; b < balances.length; b++) {\n            let balance = balances[b];\n            let currency = balance['currency'];\n            let account = {\n                'free': balance['availableBalance'],\n                'used': this.sum (\n                    balance['pendingIncoming'],\n                    balance['pendingOutgoing'],\n                    balance['openOrder']),\n                'total': balance['balance'],\n            };\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let orderbook = await this.publicGetPublicMarketDepthCurrencyPair (this.extend ({\n            'CurrencyPair': market['id'],\n        }, params));\n        return this.parseOrderBook (orderbook, undefined, 'bids', 'asks', 'price', 'volume');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = parseInt (ticker['createDateTime']) * 1000;\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        let baseVolume = parseFloat (ticker['volume']);\n        let vwap = parseFloat (ticker['vwap']);\n        let quoteVolume = baseVolume * vwap;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['bid']),\n            'ask': parseFloat (ticker['ask']),\n            'vwap': vwap,\n            'open': parseFloat (ticker['open']),\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.publicGetPublicLiveTickers (params);\n        let tickers = response['tickers'];\n        let result = {};\n        for (let t = 0; t < tickers.length; t++) {\n            let ticker = tickers[t];\n            let id = ticker['currencyPair'];\n            let market = this.markets_by_id[id];\n            let symbol = market['symbol'];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetPublicLiveTickerCurrencyPair (this.extend ({\n            'CurrencyPair': market['id'],\n        }, params));\n        let ticker = response['ticker'];\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        let side = undefined;\n        let order = undefined;\n        if ('way' in trade) {\n            side = (trade['way'] == 'bid') ? 'buy' : 'sell';\n            let orderId = trade['way'] + 'OrderId';\n            order = trade[orderId];\n        }\n        let timestamp = parseInt (trade['transactionTime']) * 1000;\n        if (!market)\n            market = this.markets_by_id[trade['currencyPair']];\n        return {\n            'info': trade,\n            'id': trade['transactionId'].toString (),\n            'order': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': side,\n            'price': trade['price'],\n            'amount': trade['quantity'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetPublicTransactionsCurrencyPair (this.extend ({\n            'CurrencyPair': market['id'],\n        }, params));\n        return this.parseTrades (response['transactions'], market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {\n        return [\n            parseInt (ohlcv['createDateTime']) * 1000,\n            ohlcv['open'],\n            ohlcv['high'],\n            ohlcv['low'],\n            undefined,\n            ohlcv['volume'],\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = {\n            'CurrencyPair': market['id'],\n            'Timeframe': this.timeframes[timeframe],\n        };\n        if (limit)\n            request['Count'] = limit;\n        request = this.extend (request, params);\n        let response = await this.publicGetPublicTickerHistoryCurrencyPairTimeframe (request);\n        return this.parseOHLCVs (response['tickers'], market, timeframe, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let order = {\n            'Code': this.marketId (symbol),\n            'Way': (side == 'buy') ? 'Bid' : 'Ask',\n            'Amount': amount,\n        };\n        if (type == 'limit')\n            order['Price'] = price;\n        if (this.twofa) {\n            if ('ValidationCode' in params)\n                order['ValidationCode'] = params['ValidationCode'];\n            else\n                throw new AuthenticationError (this.id + ' two-factor authentication requires a missing ValidationCode parameter');\n        }\n        let response = await this.privatePostTradeOrders (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['clOrderId'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privateDeleteTradeOrdersOrderID ({ 'OrderID': id });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'public') {\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            let contentType = (method == 'GET') ? '' : 'application/json';\n            let auth = method + url + contentType + nonce.toString ();\n            auth = auth.toLowerCase ();\n            let signature = this.hmac (this.encode (auth), this.encode (this.secret), 'sha256', 'base64');\n            headers = {\n                'API_PUBLIC_KEY': this.apiKey,\n                'API_REQUEST_SIGNATURE': signature,\n                'API_REQUEST_DATE': nonce,\n            };\n            if (method != 'GET') {\n                headers['Content-Type'] = contentType;\n                body = this.json (this.extend ({ 'nonce': nonce }, params));\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('responseStatus' in response)\n            if ('message' in response['responseStatus'])\n                if (response['responseStatus']['message'] == 'OK')\n                    return response;\n        throw new ExchangeError (this.id + ' ' + this.json (response));\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/gatecoin.js\n// module id = 411\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst bter = require ('./bter.js')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class gateio extends bter {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'gateio',\n            'name': 'Gate.io',\n            'countries': 'CN',\n            'rateLimit': 1000,\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/31784029-0313c702-b509-11e7-9ccc-bc0da6a0e435.jpg',\n                'api': {\n                    'public': 'https://data.gate.io/api',\n                    'private': 'https://data.gate.io/api',\n                },\n                'www': 'https://gate.io/',\n                'doc': 'https://gate.io/api2',\n            },\n        });\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/gateio.js\n// module id = 412\n// module chunks = 0","\"use strict\";\n\n// ----------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, InvalidOrder, AuthenticationError, NotSupported } = require ('./base/errors')\n\n// ----------------------------------------------------------------------------\n\nmodule.exports = class gdax extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'gdax',\n            'name': 'GDAX',\n            'countries': 'US',\n            'rateLimit': 1000,\n            'userAgent': this.userAgents['chrome'],\n            'hasCORS': true,\n            'hasFetchOHLCV': true,\n            'hasDeposit': true,\n            'hasWithdraw': true,\n            'hasFetchOrder': true,\n            'hasFetchOrders': true,\n            'hasFetchOpenOrders': true,\n            'hasFetchClosedOrders': true,\n            'timeframes': {\n                '1m': 60,\n                '5m': 300,\n                '15m': 900,\n                '30m': 1800,\n                '1h': 3600,\n                '2h': 7200,\n                '4h': 14400,\n                '12h': 43200,\n                '1d': 86400,\n                '1w': 604800,\n                '1M': 2592000,\n                '1y': 31536000,\n            },\n            'urls': {\n                'test': 'https://api-public.sandbox.gdax.com',\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766527-b1be41c6-5edb-11e7-95f6-5b496c469e2c.jpg',\n                'api': 'https://api.gdax.com',\n                'www': 'https://www.gdax.com',\n                'doc': 'https://docs.gdax.com',\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n                'password': true,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'currencies',\n                        'products',\n                        'products/{id}/book',\n                        'products/{id}/candles',\n                        'products/{id}/stats',\n                        'products/{id}/ticker',\n                        'products/{id}/trades',\n                        'time',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'accounts',\n                        'accounts/{id}',\n                        'accounts/{id}/holds',\n                        'accounts/{id}/ledger',\n                        'coinbase-accounts',\n                        'fills',\n                        'funding',\n                        'orders',\n                        'orders/{id}',\n                        'payment-methods',\n                        'position',\n                        'reports/{id}',\n                        'users/self/trailing-volume',\n                    ],\n                    'post': [\n                        'deposits/coinbase-account',\n                        'deposits/payment-method',\n                        'funding/repay',\n                        'orders',\n                        'position/close',\n                        'profiles/margin-transfer',\n                        'reports',\n                        'withdrawals/coinbase',\n                        'withdrawals/crypto',\n                        'withdrawals/payment-method',\n                    ],\n                    'delete': [\n                        'orders',\n                        'orders/{id}',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true, // complicated tier system per coin\n                    'percentage': true,\n                    'maker': 0.0,\n                    'taker': 0.30 / 100, // worst-case scenario: https://www.gdax.com/fees/BTC-USD\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {\n                        'BCH': 0,\n                        'BTC': 0,\n                        'LTC': 0,\n                        'ETH': 0,\n                        'EUR': 0.15,\n                        'USD': 25,\n                    },\n                    'deposit': {\n                        'BCH': 0,\n                        'BTC': 0,\n                        'LTC': 0,\n                        'ETH': 0,\n                        'EUR': 0.15,\n                        'USD': 10,\n                    },\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetProducts ();\n        let result = [];\n        for (let p = 0; p < markets.length; p++) {\n            let market = markets[p];\n            let id = market['id'];\n            let base = market['base_currency'];\n            let quote = market['quote_currency'];\n            let symbol = base + '/' + quote;\n            let amountLimits = {\n                'min': market['base_min_size'],\n                'max': market['base_max_size'],\n            };\n            let priceLimits = {\n                'min': market['quote_increment'],\n                'max': undefined,\n            };\n            let costLimits = {\n                'min': priceLimits['min'],\n                'max': undefined,\n            };\n            let limits = {\n                'amount': amountLimits,\n                'price': priceLimits,\n                'cost': costLimits,\n            };\n            let precision = {\n                'amount': -Math.log10 (parseFloat (amountLimits['min'])),\n                'price': -Math.log10 (parseFloat (priceLimits['min'])),\n            };\n            let taker = this.fees['trading']['taker'];\n            if ((base == 'ETH') || (base == 'LTC')) {\n                taker = 0.003;\n            }\n            result.push (this.extend (this.fees['trading'], {\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n                'precision': precision,\n                'limits': limits,\n                'taker': taker,\n            }));\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let balances = await this.privateGetAccounts ();\n        let result = { 'info': balances };\n        for (let b = 0; b < balances.length; b++) {\n            let balance = balances[b];\n            let currency = balance['currency'];\n            let account = {\n                'free': parseFloat (balance['available']),\n                'used': parseFloat (balance['hold']),\n                'total': parseFloat (balance['balance']),\n            };\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let orderbook = await this.publicGetProductsIdBook (this.extend ({\n            'id': this.marketId (symbol),\n            'level': 2, // 1 best bidask, 2 aggregated, 3 full\n        }, params));\n        return this.parseOrderBook (orderbook);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = this.extend ({\n            'id': market['id'],\n        }, params);\n        let ticker = await this.publicGetProductsIdTicker (request);\n        let timestamp = this.parse8601 (ticker['time']);\n        let bid = undefined;\n        let ask = undefined;\n        if ('bid' in ticker)\n            bid = parseFloat (ticker['bid']);\n        if ('ask' in ticker)\n            ask = parseFloat (ticker['ask']);\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': bid,\n            'ask': ask,\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': this.safeFloat (ticker, 'price'),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['volume']),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        let timestamp = this.parse8601 (trade['time']);\n        let side = (trade['side'] == 'buy') ? 'sell' : 'buy';\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        let fee = undefined;\n        if ('fill_fees' in trade) {\n            fee = {\n                'cost': parseFloat (trade['fill_fees']),\n                'currency': market['quote'],\n            };\n        }\n        return {\n            'id': trade['trade_id'].toString (),\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': side,\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['size']),\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetProductsIdTrades (this.extend ({\n            'id': market['id'], // fixes issue #2\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {\n        return [\n            ohlcv[0] * 1000,\n            ohlcv[3],\n            ohlcv[2],\n            ohlcv[1],\n            ohlcv[4],\n            ohlcv[5],\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let granularity = this.timeframes[timeframe];\n        let request = {\n            'id': market['id'],\n            'granularity': granularity,\n        };\n        if (since) {\n            request['start'] = this.iso8601 (since);\n            if (!limit)\n                limit = 200; // max = 200\n            request['end'] = this.iso8601 (limit * granularity * 1000 + since);\n        }\n        let response = await this.publicGetProductsIdCandles (this.extend (request, params));\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    async fetchTime () {\n        let response = this.publicGetTime ();\n        return this.parse8601 (response['iso']);\n    }\n\n    parseOrderStatus (status) {\n        let statuses = {\n            'pending': 'open',\n            'active': 'open',\n            'open': 'open',\n            'done': 'closed',\n            'canceled': 'canceled',\n        };\n        return this.safeString (statuses, status, status);\n    }\n\n    parseOrder (order, market = undefined) {\n        let timestamp = this.parse8601 (order['created_at']);\n        let symbol = undefined;\n        if (!market) {\n            if (order['product_id'] in this.markets_by_id)\n                market = this.markets_by_id[order['product_id']];\n        }\n        let status = this.parseOrderStatus (order['status']);\n        let price = this.safeFloat (order, 'price');\n        let amount = this.safeFloat (order, 'size');\n        let filled = this.safeFloat (order, 'filled_size');\n        let remaining = amount - filled;\n        let cost = this.safeFloat (order, 'executed_value');\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'id': order['id'],\n            'info': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'status': status,\n            'symbol': symbol,\n            'type': order['type'],\n            'side': order['side'],\n            'price': price,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'fee': undefined,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privateGetOrdersId (this.extend ({\n            'id': id,\n        }, params));\n        return this.parseOrder (response);\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let request = {\n            'status': 'all',\n        };\n        let market = undefined;\n        if (symbol) {\n            market = this.market (symbol);\n            request['product_id'] = market['id'];\n        }\n        let response = await this.privateGetOrders (this.extend (request, params));\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let request = {};\n        let market = undefined;\n        if (symbol) {\n            market = this.market (symbol);\n            request['product_id'] = market['id'];\n        }\n        let response = await this.privateGetOrders (this.extend (request, params));\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let request = {\n            'status': 'done',\n        };\n        let market = undefined;\n        if (symbol) {\n            market = this.market (symbol);\n            request['product_id'] = market['id'];\n        }\n        let response = await this.privateGetOrders (this.extend (request, params));\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async createOrder (market, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        // let oid = this.nonce ().toString ();\n        let order = {\n            'product_id': this.marketId (market),\n            'side': side,\n            'size': amount,\n            'type': type,\n        };\n        if (type == 'limit')\n            order['price'] = price;\n        let response = await this.privatePostOrders (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privateDeleteOrdersId ({ 'id': id });\n    }\n\n    async getPaymentMethods () {\n        let response = await this.privateGetPaymentMethods ();\n        return response;\n    }\n\n    async deposit (currency, amount, address, params = {}) {\n        await this.loadMarkets ();\n        let request = {\n            'currency': currency,\n            'amount': amount,\n        };\n        let method = 'privatePostDeposits';\n        if ('payment_method_id' in params) {\n            // deposit from a payment_method, like a bank account\n            method += 'PaymentMethod';\n        } else if ('coinbase_account_id' in params) {\n            // deposit into GDAX account from a Coinbase account\n            method += 'CoinbaseAccount';\n        } else {\n            // deposit methodotherwise we did not receive a supported deposit location\n            // relevant docs link for the Googlers\n            // https://docs.gdax.com/#deposits\n            throw new NotSupported (this.id + ' deposit() requires one of `coinbase_account_id` or `payment_method_id` extra params');\n        }\n        let response = await this[method] (this.extend (request, params));\n        if (!response)\n            throw new ExchangeError (this.id + ' deposit() error: ' + this.json (response));\n        return {\n            'info': response,\n            'id': response['id'],\n        };\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        await this.loadMarkets ();\n        let request = {\n            'currency': currency,\n            'amount': amount,\n        };\n        let method = 'privatePostWithdrawals';\n        if ('payment_method_id' in params) {\n            method += 'PaymentMethod';\n        } else if ('coinbase_account_id' in params) {\n            method += 'CoinbaseAccount';\n        } else {\n            method += 'Crypto';\n            request['crypto_address'] = address;\n        }\n        let response = await this[method] (this.extend (request, params));\n        if (!response)\n            throw new ExchangeError (this.id + ' withdraw() error: ' + this.json (response));\n        return {\n            'info': response,\n            'id': response['id'],\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let request = '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (method == 'GET') {\n            if (Object.keys (query).length)\n                request += '?' + this.urlencode (query);\n        }\n        let url = this.urls['api'] + request;\n        if (api == 'private') {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ().toString ();\n            let payload = '';\n            if (method != 'GET') {\n                if (Object.keys (query).length) {\n                    body = this.json (query);\n                    payload = body;\n                }\n            }\n            // let payload = (body) ? body : '';\n            let what = nonce + method + request + payload;\n            let secret = this.base64ToBinary (this.secret);\n            let signature = this.hmac (this.encode (what), secret, 'sha256', 'base64');\n            headers = {\n                'CB-ACCESS-KEY': this.apiKey,\n                'CB-ACCESS-SIGN': this.decode (signature),\n                'CB-ACCESS-TIMESTAMP': nonce,\n                'CB-ACCESS-PASSPHRASE': this.password,\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body) {\n        if (code == 400) {\n            if (body[0] == \"{\") {\n                let response = JSON.parse (body);\n                let message = response['message'];\n                if (message.indexOf ('price too small') >= 0) {\n                    throw new InvalidOrder (this.id + ' ' + message);\n                } else if (message.indexOf ('price too precise') >= 0) {\n                    throw new InvalidOrder (this.id + ' ' + message);\n                } else if (message == 'Invalid API Key') {\n                    throw new AuthenticationError (this.id + ' ' + message);\n                }\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n            }\n            throw new ExchangeError (this.id + ' ' + body);\n        }\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('message' in response) {\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        }\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/gdax.js\n// module id = 413\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class gemini extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'gemini',\n            'name': 'Gemini',\n            'countries': 'US',\n            'rateLimit': 1500, // 200 for private API\n            'version': 'v1',\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27816857-ce7be644-6096-11e7-82d6-3c257263229c.jpg',\n                'api': 'https://api.gemini.com',\n                'www': 'https://gemini.com',\n                'doc': 'https://docs.gemini.com/rest-api',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'symbols',\n                        'pubticker/{symbol}',\n                        'book/{symbol}',\n                        'trades/{symbol}',\n                        'auction/{symbol}',\n                        'auction/{symbol}/history',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'order/new',\n                        'order/cancel',\n                        'order/cancel/session',\n                        'order/cancel/all',\n                        'order/status',\n                        'orders',\n                        'mytrades',\n                        'tradevolume',\n                        'balances',\n                        'deposit/{currency}/newAddress',\n                        'withdraw/{currency}',\n                        'heartbeat',\n                    ],\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetSymbols ();\n        let result = [];\n        for (let p = 0; p < markets.length; p++) {\n            let id = markets[p];\n            let market = id;\n            let uppercase = market.toUpperCase ();\n            let base = uppercase.slice (0, 3);\n            let quote = uppercase.slice (3, 6);\n            let symbol = base + '/' + quote;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n                'taker': 0.0025\n            });\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let orderbook = await this.publicGetBookSymbol (this.extend ({\n            'symbol': this.marketId (symbol),\n        }, params));\n        return this.parseOrderBook (orderbook, undefined, 'bids', 'asks', 'price', 'amount');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let ticker = await this.publicGetPubtickerSymbol (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        let timestamp = ticker['volume']['timestamp'];\n        let baseVolume = market['base'];\n        let quoteVolume = market['quote'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': parseFloat (ticker['bid']),\n            'ask': parseFloat (ticker['ask']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['volume'][baseVolume]),\n            'quoteVolume': parseFloat (ticker['volume'][quoteVolume]),\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = trade['timestampms'];\n        return {\n            'id': trade['tid'].toString (),\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': trade['type'],\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['amount']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetTradesSymbol (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let balances = await this.privatePostBalances ();\n        let result = { 'info': balances };\n        for (let b = 0; b < balances.length; b++) {\n            let balance = balances[b];\n            let currency = balance['currency'];\n            let account = {\n                'free': parseFloat (balance['available']),\n                'used': 0.0,\n                'total': parseFloat (balance['amount']),\n            };\n            account['used'] = account['total'] - account['free'];\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (type == 'market')\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        let nonce = this.nonce ();\n        let order = {\n            'client_order_id': nonce.toString (),\n            'symbol': this.marketId (symbol),\n            'amount': amount.toString (),\n            'price': price.toString (),\n            'side': side,\n            'type': 'exchange limit', // gemini allows limit orders only\n        };\n        let response = await this.privatePostOrderNew (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['order_id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privatePostCancelOrder ({ 'order_id': id });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = '/' + this.version + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'public') {\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            let request = this.extend ({\n                'request': url,\n                'nonce': nonce,\n            }, query);\n            let payload = this.json (request);\n            payload = this.stringToBase64 (this.encode (payload));\n            let signature = this.hmac (payload, this.encode (this.secret), 'sha384');\n            headers = {\n                'Content-Type': 'text/plain',\n                'X-GEMINI-APIKEY': this.apiKey,\n                'X-GEMINI-PAYLOAD': this.decode (payload),\n                'X-GEMINI-SIGNATURE': signature,\n            };\n        }\n        url = this.urls['api'] + url;\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('result' in response)\n            if (response['result'] == 'error')\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/gemini.js\n// module id = 414\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst _1btcxe = require ('./_1btcxe.js')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class getbtc extends _1btcxe {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'getbtc',\n            'name': 'GetBTC',\n            'countries': [ 'VC', 'RU' ], // Saint Vincent and the Grenadines, Russia, CIS\n            'rateLimit': 1000,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/33801902-03c43462-dd7b-11e7-992e-077e4cd015b9.jpg',\n                'api': 'https://getbtc.org/api',\n                'www': 'https://getbtc.org',\n                'doc': 'https://getbtc.org/api-docs.php',\n            },\n            'markets': {\n                'BTC/EUR': { 'id': 'EUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR', 'precision': { 'amount': 8, 'price': 8 }, 'lot': 0.00000001, 'limits': { 'amount': { 'min': 0.00000001, 'max': undefined }, 'price': { 'min': 0.00000001, 'max': undefined }}},\n                'BTC/RUB': { 'id': 'RUB', 'symbol': 'BTC/RUB', 'base': 'BTC', 'quote': 'RUB', 'precision': { 'amount': 8, 'price': 8 }, 'lot': 0.00000001, 'limits': { 'amount': { 'min': 0.00000001, 'max': undefined }, 'price': { 'min': 0.00000001, 'max': undefined }}},\n                'BTC/USD': { 'id': 'USD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'precision': { 'amount': 8, 'price': 8 }, 'lot': 0.00000001, 'limits': { 'amount': { 'min': 0.00000001, 'max': undefined }, 'price': { 'min': 0.00000001, 'max': undefined }}},\n            },\n            'fees': {\n                'trading': {\n                    'taker': 0.20 / 100,\n                    'maker': 0.20 / 100,\n                },\n            },\n        });\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/getbtc.js\n// module id = 415\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst hitbtc = require ('./hitbtc')\nconst { ExchangeError, OrderNotFound, InsufficientFunds } = require ('./base/errors')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class hitbtc2 extends hitbtc {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'hitbtc2',\n            'name': 'HitBTC v2',\n            'countries': 'HK', // Hong Kong\n            'rateLimit': 1500,\n            'version': '2',\n            'hasCORS': true,\n            // older metainfo interface\n            'hasFetchOHLCV': true,\n            'hasFetchTickers': true,\n            'hasFetchOrder': true,\n            'hasFetchOrders': false,\n            'hasFetchOpenOrders': true,\n            'hasFetchClosedOrders': true,\n            'hasFetchMyTrades': true,\n            'hasWithdraw': true,\n            'hasFetchCurrencies': true,\n            // new metainfo interface\n            'has': {\n                'fetchCurrencies': true,\n                'fetchOHLCV': true,\n                'fetchTickers': true,\n                'fetchOrder': true,\n                'fetchOrders': false,\n                'fetchOpenOrders': true,\n                'fetchClosedOrders': true,\n                'fetchMyTrades': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': 'M1',\n                '3m': 'M3',\n                '5m': 'M5',\n                '15m': 'M15',\n                '30m': 'M30', // default\n                '1h': 'H1',\n                '4h': 'H4',\n                '1d': 'D1',\n                '1w': 'D7',\n                '1M': '1M',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766555-8eaec20e-5edc-11e7-9c5b-6dc69fc42f5e.jpg',\n                'api': 'https://api.hitbtc.com',\n                'www': 'https://hitbtc.com',\n                'doc': 'https://api.hitbtc.com',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'symbol', // Available Currency Symbols\n                        'symbol/{symbol}', // Get symbol info\n                        'currency', // Available Currencies\n                        'currency/{currency}', // Get currency info\n                        'ticker', // Ticker list for all symbols\n                        'ticker/{symbol}', // Ticker for symbol\n                        'trades/{symbol}', // Trades\n                        'orderbook/{symbol}', // Orderbook\n                        'candles/{symbol}', // Candles\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'order', // List your current open orders\n                        'order/{clientOrderId}', // Get a single order by clientOrderId\n                        'trading/balance', // Get trading balance\n                        'trading/fee/{symbol}', // Get trading fee rate\n                        'history/trades', // Get historical trades\n                        'history/order', // Get historical orders\n                        'history/order/{id}/trades', // Get historical trades by specified order\n                        'account/balance', // Get main acccount balance\n                        'account/transactions', // Get account transactions\n                        'account/transactions/{id}', // Get account transaction by id\n                        'account/crypto/address/{currency}', // Get deposit crypro address\n                    ],\n                    'post': [\n                        'order', // Create new order\n                        'account/crypto/withdraw', // Withdraw crypro\n                        'account/crypto/address/{currency}', // Create new deposit crypro address\n                        'account/transfer', // Transfer amount to trading\n                    ],\n                    'put': [\n                        'order/{clientOrderId}', // Create new order\n                        'account/crypto/withdraw/{id}', // Commit withdraw crypro\n                    ],\n                    'delete': [\n                        'order', // Cancel all open orders\n                        'order/{clientOrderId}', // Cancel order\n                        'account/crypto/withdraw/{id}', // Rollback withdraw crypro\n                    ],\n                    'patch': [\n                        'order/{clientOrderId}', // Cancel Replace order\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': -0.01 / 100,\n                    'taker': 0.1 / 100,\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {\n                        'BTC': 0.0009,\n                        'ETH': 0.00958,\n                        'BCH': 0.0018,\n                        'USDT': 5,\n                        'BTG': 0.0005,\n                        'LTC': 0.003,\n                        'ZEC': 0.0001,\n                        'XMR': 0.09,\n                        '1ST': 0.84,\n                        'ADX': 5.7,\n                        'AE': 6.7,\n                        'AEON': 0.01006,\n                        'AIR': 565,\n                        'AMP': 9,\n                        'ANT': 6.7,\n                        'ARDR': 2,\n                        'ARN': 18.5,\n                        'ART': 26,\n                        'ATB': 0.0004,\n                        'ATL': 27,\n                        'ATM': 504,\n                        'ATS': 860,\n                        'AVT': 1.9,\n                        'BAS': 113,\n                        'BCN': 0.1,\n                        'BET': 124,\n                        'BKB': 46,\n                        'BMC': 32,\n                        'BMT': 100,\n                        'BNT': 2.57,\n                        'BQX': 4.7,\n                        'BTM': 40,\n                        'BTX': 0.04,\n                        'BUS': 0.004,\n                        'CCT': 115,\n                        'CDT': 100,\n                        'CDX': 30,\n                        'CFI': 61,\n                        'CLD': 0.88,\n                        'CND': 574,\n                        'CNX': 0.04,\n                        'COSS': 65,\n                        'CSNO': 16,\n                        'CTR': 15,\n                        'CTX': 146,\n                        'CVC': 8.46,\n                        'DBIX': 0.0168,\n                        'DCN': 120000,\n                        'DCT': 0.02,\n                        'DDF': 342,\n                        'DENT': 6240,\n                        'DGB': 0.4,\n                        'DGD': 0.01,\n                        'DICE': 0.32,\n                        'DLT': 0.26,\n                        'DNT': 0.21,\n                        'DOGE': 2,\n                        'DOV': 34,\n                        'DRPU': 24,\n                        'DRT': 240,\n                        'DSH': 0.017,\n                        'EBET': 84,\n                        'EBTC': 20,\n                        'EBTCOLD': 6.6,\n                        'ECAT': 14,\n                        'EDG': 2,\n                        'EDO': 2.9,\n                        'ELE': 0.00172,\n                        'ELM': 0.004,\n                        'EMC': 0.03,\n                        'EMGO': 14,\n                        'ENJ': 163,\n                        'EOS': 1.5,\n                        'ERO': 34,\n                        'ETBS': 15,\n                        'ETC': 0.002,\n                        'ETP': 0.004,\n                        'EVX': 5.4,\n                        'EXN': 456,\n                        'FRD': 65,\n                        'FUEL': 123.00105,\n                        'FUN': 202.9598309,\n                        'FYN': 1.849,\n                        'FYP': 66.13,\n                        'GNO': 0.0034,\n                        'GUP': 4,\n                        'GVT': 1.2,\n                        'HAC': 144,\n                        'HDG': 7,\n                        'HGT': 1082,\n                        'HPC': 0.4,\n                        'HVN': 120,\n                        'ICN': 0.55,\n                        'ICO': 34,\n                        'ICOS': 0.35,\n                        'IND': 76,\n                        'INDI': 5913,\n                        'ITS': 15.0012,\n                        'IXT': 11,\n                        'KBR': 143,\n                        'KICK': 112,\n                        'LA': 41,\n                        'LAT': 1.44,\n                        'LIFE': 13000,\n                        'LRC': 27,\n                        'LSK': 0.3,\n                        'LUN': 0.34,\n                        'MAID': 5,\n                        'MANA': 143,\n                        'MCAP': 5.44,\n                        'MIPS': 43,\n                        'MNE': 1.33,\n                        'MSP': 121,\n                        'MTH': 92,\n                        'MYB': 3.9,\n                        'NDC': 165,\n                        'NEBL': 0.04,\n                        'NET': 3.96,\n                        'NTO': 998,\n                        'NXC': 13.39,\n                        'NXT': 3,\n                        'OAX': 15,\n                        'ODN': 0.004,\n                        'OMG': 2,\n                        'OPT': 335,\n                        'ORME': 2.8,\n                        'OTN': 0.57,\n                        'PAY': 3.1,\n                        'PIX': 96,\n                        'PLBT': 0.33,\n                        'PLR': 114,\n                        'PLU': 0.87,\n                        'POE': 784,\n                        'POLL': 3.5,\n                        'PPT': 2,\n                        'PRE': 32,\n                        'PRG': 39,\n                        'PRO': 41,\n                        'PRS': 60,\n                        'PTOY': 0.5,\n                        'QAU': 63,\n                        'QCN': 0.03,\n                        'QTUM': 0.04,\n                        'QVT': 64,\n                        'REP': 0.02,\n                        'RKC': 15,\n                        'RVT': 14,\n                        'SAN': 2.24,\n                        'SBD': 0.03,\n                        'SCL': 2.6,\n                        'SISA': 1640,\n                        'SKIN': 407,\n                        'SMART': 0.4,\n                        'SMS': 0.0375,\n                        'SNC': 36,\n                        'SNGLS': 4,\n                        'SNM': 48,\n                        'SNT': 233,\n                        'STEEM': 0.01,\n                        'STRAT': 0.01,\n                        'STU': 14,\n                        'STX': 11,\n                        'SUB': 17,\n                        'SUR': 3,\n                        'SWT': 0.51,\n                        'TAAS': 0.91,\n                        'TBT': 2.37,\n                        'TFL': 15,\n                        'TIME': 0.03,\n                        'TIX': 7.1,\n                        'TKN': 1,\n                        'TKR': 84,\n                        'TNT': 90,\n                        'TRST': 1.6,\n                        'TRX': 1395,\n                        'UET': 480,\n                        'UGT': 15,\n                        'VEN': 14,\n                        'VERI': 0.037,\n                        'VIB': 50,\n                        'VIBE': 145,\n                        'VOISE': 618,\n                        'WEALTH': 0.0168,\n                        'WINGS': 2.4,\n                        'WTC': 0.75,\n                        'XAUR': 3.23,\n                        'XDN': 0.01,\n                        'XEM': 15,\n                        'XUC': 0.9,\n                        'YOYOW': 140,\n                        'ZAP': 24,\n                        'ZRX': 23,\n                        'ZSC': 191,\n                    },\n                    'deposit': {\n                        'BTC': 0,\n                        'ETH': 0,\n                        'BCH': 0,\n                        'USDT': 0,\n                        'BTG': 0,\n                        'LTC': 0,\n                        'ZEC': 0,\n                        'XMR': 0,\n                        '1ST': 0,\n                        'ADX': 0,\n                        'AE': 0,\n                        'AEON': 0,\n                        'AIR': 0,\n                        'AMP': 0,\n                        'ANT': 0,\n                        'ARDR': 0,\n                        'ARN': 0,\n                        'ART': 0,\n                        'ATB': 0,\n                        'ATL': 0,\n                        'ATM': 0,\n                        'ATS': 0,\n                        'AVT': 0,\n                        'BAS': 0,\n                        'BCN': 0,\n                        'BET': 0,\n                        'BKB': 0,\n                        'BMC': 0,\n                        'BMT': 0,\n                        'BNT': 0,\n                        'BQX': 0,\n                        'BTM': 0,\n                        'BTX': 0,\n                        'BUS': 0,\n                        'CCT': 0,\n                        'CDT': 0,\n                        'CDX': 0,\n                        'CFI': 0,\n                        'CLD': 0,\n                        'CND': 0,\n                        'CNX': 0,\n                        'COSS': 0,\n                        'CSNO': 0,\n                        'CTR': 0,\n                        'CTX': 0,\n                        'CVC': 0,\n                        'DBIX': 0,\n                        'DCN': 0,\n                        'DCT': 0,\n                        'DDF': 0,\n                        'DENT': 0,\n                        'DGB': 0,\n                        'DGD': 0,\n                        'DICE': 0,\n                        'DLT': 0,\n                        'DNT': 0,\n                        'DOGE': 0,\n                        'DOV': 0,\n                        'DRPU': 0,\n                        'DRT': 0,\n                        'DSH': 0,\n                        'EBET': 0,\n                        'EBTC': 0,\n                        'EBTCOLD': 0,\n                        'ECAT': 0,\n                        'EDG': 0,\n                        'EDO': 0,\n                        'ELE': 0,\n                        'ELM': 0,\n                        'EMC': 0,\n                        'EMGO': 0,\n                        'ENJ': 0,\n                        'EOS': 0,\n                        'ERO': 0,\n                        'ETBS': 0,\n                        'ETC': 0,\n                        'ETP': 0,\n                        'EVX': 0,\n                        'EXN': 0,\n                        'FRD': 0,\n                        'FUEL': 0,\n                        'FUN': 0,\n                        'FYN': 0,\n                        'FYP': 0,\n                        'GNO': 0,\n                        'GUP': 0,\n                        'GVT': 0,\n                        'HAC': 0,\n                        'HDG': 0,\n                        'HGT': 0,\n                        'HPC': 0,\n                        'HVN': 0,\n                        'ICN': 0,\n                        'ICO': 0,\n                        'ICOS': 0,\n                        'IND': 0,\n                        'INDI': 0,\n                        'ITS': 0,\n                        'IXT': 0,\n                        'KBR': 0,\n                        'KICK': 0,\n                        'LA': 0,\n                        'LAT': 0,\n                        'LIFE': 0,\n                        'LRC': 0,\n                        'LSK': 0,\n                        'LUN': 0,\n                        'MAID': 0,\n                        'MANA': 0,\n                        'MCAP': 0,\n                        'MIPS': 0,\n                        'MNE': 0,\n                        'MSP': 0,\n                        'MTH': 0,\n                        'MYB': 0,\n                        'NDC': 0,\n                        'NEBL': 0,\n                        'NET': 0,\n                        'NTO': 0,\n                        'NXC': 0,\n                        'NXT': 0,\n                        'OAX': 0,\n                        'ODN': 0,\n                        'OMG': 0,\n                        'OPT': 0,\n                        'ORME': 0,\n                        'OTN': 0,\n                        'PAY': 0,\n                        'PIX': 0,\n                        'PLBT': 0,\n                        'PLR': 0,\n                        'PLU': 0,\n                        'POE': 0,\n                        'POLL': 0,\n                        'PPT': 0,\n                        'PRE': 0,\n                        'PRG': 0,\n                        'PRO': 0,\n                        'PRS': 0,\n                        'PTOY': 0,\n                        'QAU': 0,\n                        'QCN': 0,\n                        'QTUM': 0,\n                        'QVT': 0,\n                        'REP': 0,\n                        'RKC': 0,\n                        'RVT': 0,\n                        'SAN': 0,\n                        'SBD': 0,\n                        'SCL': 0,\n                        'SISA': 0,\n                        'SKIN': 0,\n                        'SMART': 0,\n                        'SMS': 0,\n                        'SNC': 0,\n                        'SNGLS': 0,\n                        'SNM': 0,\n                        'SNT': 0,\n                        'STEEM': 0,\n                        'STRAT': 0,\n                        'STU': 0,\n                        'STX': 0,\n                        'SUB': 0,\n                        'SUR': 0,\n                        'SWT': 0,\n                        'TAAS': 0,\n                        'TBT': 0,\n                        'TFL': 0,\n                        'TIME': 0,\n                        'TIX': 0,\n                        'TKN': 0,\n                        'TKR': 0,\n                        'TNT': 0,\n                        'TRST': 0,\n                        'TRX': 0,\n                        'UET': 0,\n                        'UGT': 0,\n                        'VEN': 0,\n                        'VERI': 0,\n                        'VIB': 0,\n                        'VIBE': 0,\n                        'VOISE': 0,\n                        'WEALTH': 0,\n                        'WINGS': 0,\n                        'WTC': 0,\n                        'XAUR': 0,\n                        'XDN': 0,\n                        'XEM': 0,\n                        'XUC': 0,\n                        'YOYOW': 0,\n                        'ZAP': 0,\n                        'ZRX': 0,\n                        'ZSC': 0,\n                    },\n                },\n            },\n        });\n    }\n\n    currencyId (currency) {\n        if (currency == 'BitClave')\n            return 'CAT';\n        return currency;\n    }\n\n    feeToPrecision (symbol, fee) {\n        return this.truncate (fee, 8);\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetSymbol ();\n        let result = [];\n        for (let i = 0; i < markets.length; i++) {\n            let market = markets[i];\n            let id = market['id'];\n            let baseId = market['baseCurrency'];\n            let quoteId = market['quoteCurrency'];\n            let base = this.commonCurrencyCode (baseId);\n            let quote = this.commonCurrencyCode (quoteId);\n            let symbol = base + '/' + quote;\n            let lot = parseFloat (market['quantityIncrement']);\n            let step = parseFloat (market['tickSize']);\n            let precision = {\n                'price': this.precisionFromString (market['tickSize']),\n                'amount': this.precisionFromString (market['quantityIncrement']),\n            };\n            let taker = parseFloat (market['takeLiquidityRate']);\n            let maker = parseFloat (market['provideLiquidityRate']);\n            result.push (this.extend (this.fees['trading'], {\n                'info': market,\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'baseId': baseId,\n                'quoteId': quoteId,\n                'active': true,\n                'lot': lot,\n                'step': step,\n                'taker': taker,\n                'maker': maker,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': lot,\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': step,\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': lot * step,\n                        'max': undefined,\n                    },\n                },\n            }));\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        let currencies = await this.publicGetCurrency (params);\n        let result = {};\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let id = currency['id'];\n            // todo: will need to rethink the fees\n            // to add support for multiple withdrawal/deposit methods and\n            // differentiated fees for each particular method\n            let precision = 8; // default precision, todo: fix \"magic constants\"\n            let code = this.commonCurrencyCode (id);\n            let payin = currency['payinEnabled'];\n            let payout = currency['payoutEnabled'];\n            let transfer = currency['transferEnabled'];\n            let active = payin && payout && transfer;\n            let status = 'ok';\n            if ('disabled' in currency)\n                if (currency['disabled'])\n                    status = 'disabled';\n            let type = (currency['crypto']) ? 'crypto' : 'fiat';\n            result[code] = {\n                'id': id,\n                'code': code,\n                'type': type,\n                'payin': payin,\n                'payout': payout,\n                'transfer': transfer,\n                'info': currency,\n                'name': currency['fullName'],\n                'active': active,\n                'status': status,\n                'fee': undefined, // todo: redesign\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': undefined,\n                        'max': Math.pow (10, precision),\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let type = this.safeString (params, 'type', 'trading');\n        let method = 'privateGet' + this.capitalize (type) + 'Balance';\n        let balances = await this[method] ();\n        let result = { 'info': balances };\n        for (let b = 0; b < balances.length; b++) {\n            let balance = balances[b];\n            let code = balance['currency'];\n            let currency = this.commonCurrencyCode (code);\n            let account = {\n                'free': parseFloat (balance['available']),\n                'used': parseFloat (balance['reserved']),\n                'total': 0.0,\n            };\n            account['total'] = this.sum (account['free'], account['used']);\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    parseOHLCV (ohlcv, market = undefined, timeframe = '1d', since = undefined, limit = undefined) {\n        let timestamp = this.parse8601 (ohlcv['timestamp']);\n        return [\n            timestamp,\n            parseFloat (ohlcv['open']),\n            parseFloat (ohlcv['max']),\n            parseFloat (ohlcv['min']),\n            parseFloat (ohlcv['close']),\n            parseFloat (ohlcv['volumeQuote']),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = {\n            'symbol': market['id'],\n            'period': this.timeframes[timeframe],\n        };\n        if (limit)\n            request['limit'] = limit;\n        let response = await this.publicGetCandlesSymbol (this.extend (request, params));\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let orderbook = await this.publicGetOrderbookSymbol (this.extend ({\n            'symbol': this.marketId (symbol),\n        }, params));\n        return this.parseOrderBook (orderbook, undefined, 'bid', 'ask', 'price', 'size');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = this.parse8601 (ticker['timestamp']);\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'ask': this.safeFloat (ticker, 'ask'),\n            'vwap': undefined,\n            'open': this.safeFloat (ticker, 'open'),\n            'close': this.safeFloat (ticker, 'close'),\n            'first': undefined,\n            'last': this.safeFloat (ticker, 'last'),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'volume'),\n            'quoteVolume': this.safeFloat (ticker, 'volumeQuote'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let tickers = await this.publicGetTicker (params);\n        let result = {};\n        for (let i = 0; i < tickers.length; i++) {\n            let ticker = tickers[i];\n            let id = ticker['symbol'];\n            let market = this.markets_by_id[id];\n            let symbol = market['symbol'];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let ticker = await this.publicGetTickerSymbol (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        if ('message' in ticker)\n            throw new ExchangeError (this.id + ' ' + ticker['message']);\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        let timestamp = this.parse8601 (trade['timestamp']);\n        let symbol = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        } else {\n            let id = trade['symbol'];\n            if (id in this.markets_by_id) {\n                market = this.markets_by_id[id];\n                symbol = market['symbol'];\n            } else {\n                symbol = id;\n            }\n        }\n        let fee = undefined;\n        if ('fee' in trade) {\n            let currency = market ? market['quote'] : undefined;\n            fee = {\n                'cost': parseFloat (trade['fee']),\n                'currency': currency,\n            };\n        }\n        let orderId = undefined;\n        if ('clientOrderId' in trade)\n            orderId = trade['clientOrderId'];\n        let price = parseFloat (trade['price']);\n        let amount = parseFloat (trade['quantity']);\n        let cost = price * amount;\n        return {\n            'info': trade,\n            'id': trade['id'].toString (),\n            'order': orderId,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': trade['side'],\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetTradesSymbol (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        // their max accepted length is 32 characters\n        let uuid = this.uuid ();\n        let parts = uuid.split ('-');\n        let clientOrderId = parts.join ('');\n        clientOrderId = clientOrderId.slice (0, 32);\n        amount = parseFloat (amount);\n        let request = {\n            'clientOrderId': clientOrderId,\n            'symbol': market['id'],\n            'side': side,\n            'quantity': this.amountToPrecision (symbol, amount),\n            'type': type,\n        };\n        if (type == 'limit') {\n            request['price'] = this.priceToPrecision (symbol, price);\n        } else {\n            request['timeInForce'] = 'FOK';\n        }\n        let response = await this.privatePostOrder (this.extend (request, params));\n        let order = this.parseOrder (response);\n        let id = order['id'];\n        this.orders[id] = order;\n        return order;\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privateDeleteOrderClientOrderId (this.extend ({\n            'clientOrderId': id,\n        }, params));\n    }\n\n    parseOrder (order, market = undefined) {\n        let created = undefined;\n        if ('createdAt' in order)\n            created = this.parse8601 (order['createdAt']);\n        let updated = undefined;\n        if ('updatedAt' in order)\n            updated = this.parse8601 (order['updatedAt']);\n        if (!market)\n            market = this.markets_by_id[order['symbol']];\n        let symbol = market['symbol'];\n        let amount = this.safeFloat (order, 'quantity');\n        let filled = this.safeFloat (order, 'cumQuantity');\n        let status = order['status'];\n        if (status == 'new') {\n            status = 'open';\n        } else if (status == 'suspended') {\n            status = 'open';\n        } else if (status == 'partiallyFilled') {\n            status = 'open';\n        } else if (status == 'filled') {\n            status = 'closed';\n        }\n        let id = order['clientOrderId'].toString ();\n        let price = this.safeFloat (order, 'price');\n        if (typeof price == 'undefined') {\n            if (id in this.orders)\n                price = this.orders[id]['price'];\n        }\n        let remaining = undefined;\n        let cost = undefined;\n        if (typeof amount != 'undefined') {\n            if (typeof filled != 'undefined') {\n                remaining = amount - filled;\n                if (typeof price != 'undefined') {\n                    cost = filled * price;\n                }\n            }\n        }\n        return {\n            'id': id,\n            'timestamp': created,\n            'datetime': this.iso8601 (created),\n            'created': created,\n            'updated': updated,\n            'status': status,\n            'symbol': symbol,\n            'type': order['type'],\n            'side': order['side'],\n            'price': price,\n            'amount': amount,\n            'cost': cost,\n            'filled': filled,\n            'remaining': remaining,\n            'fee': undefined,\n            'info': order,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privateGetHistoryOrder (this.extend ({\n            'clientOrderId': id,\n        }, params));\n        let numOrders = response.length;\n        if (numOrders > 0)\n            return this.parseOrder (response[0]);\n        throw new OrderNotFound (this.id + ' order ' + id + ' not found');\n    }\n\n    async fetchActiveOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privateGetOrderClientOrderId (this.extend ({\n            'clientOrderId': id,\n        }, params));\n        return this.parseOrder (response);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        let request = {};\n        if (symbol) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        let response = await this.privateGetOrder (this.extend (request, params));\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        let request = {};\n        if (symbol) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (limit)\n            request['limit'] = limit;\n        if (since) {\n            request['from'] = this.iso8601 (since);\n        }\n        let response = await this.privateGetHistoryOrder (this.extend (request, params));\n        return this.parseOrders (response, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let request = {\n            // 'symbol': 'BTC/USD', // optional\n            // 'sort': 'DESC', // or 'ASC'\n            // 'by': 'timestamp', // or 'id'\tString\ttimestamp by default, or id\n            // 'from':\t'Datetime or Number', // ISO 8601\n            // 'till':\t'Datetime or Number',\n            // 'limit': 100,\n            // 'offset': 0,\n        };\n        let market = undefined;\n        if (symbol) {\n            market = this.market (symbol);\n            request['symbol'] = market['id'];\n        }\n        if (since)\n            request['from'] = this.iso8601 (since);\n        if (limit)\n            request['limit'] = limit;\n        let response = await this.privateGetHistoryTrades (this.extend (request, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createDepositAddress (currency, params = {}) {\n        let currencyId = this.currencyId (currency);\n        let response = await this.privatePostAccountCryptoAddressCurrency ({\n            'currency': currencyId,\n        });\n        let address = response['address'];\n        return {\n            'currency': currency,\n            'address': address,\n            'status': 'ok',\n            'info': response,\n        };\n    }\n\n    async fetchDepositAddress (currency, params = {}) {\n        let currencyId = this.currencyId (currency);\n        let response = await this.privateGetAccountCryptoAddressCurrency ({\n            'currency': currencyId,\n        });\n        let address = response['address'];\n        return {\n            'currency': currency,\n            'address': address,\n            'status': 'ok',\n            'info': response,\n        };\n    }\n\n    async withdraw (code, amount, address, params = {}) {\n        let currency = this.currency (code);\n        let response = await this.privatePostAccountCryptoWithdraw (this.extend ({\n            'currency': currency['id'],\n            'amount': parseFloat (amount),\n            'address': address,\n        }, params));\n        return {\n            'info': response,\n            'id': response['id'],\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = '/api' + '/' + this.version + '/';\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'public') {\n            url += api + '/' + this.implodeParams (path, params);\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            url += this.implodeParams (path, params);\n            if (method == 'GET') {\n                if (Object.keys (query).length)\n                    url += '?' + this.urlencode (query);\n            } else {\n                if (Object.keys (query).length)\n                    body = this.json (query);\n            }\n            let payload = this.encode (this.apiKey + ':' + this.secret);\n            let auth = this.stringToBase64 (payload);\n            headers = {\n                'Authorization': \"Basic \" + this.decode (auth),\n                'Content-Type': 'application/json',\n            };\n        }\n        url = this.urls['api'] + url;\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body) {\n        if (code == 400) {\n            if (body[0] == \"{\") {\n                let response = JSON.parse (body);\n                if ('error' in response) {\n                    if ('message' in response['error']) {\n                        let message = response['error']['message'];\n                        if (message == 'Order not found') {\n                            throw new OrderNotFound (this.id + ' order not found in active orders');\n                        } else if (message == 'Insufficient funds') {\n                            throw new InsufficientFunds (this.id + ' ' + message);\n                        }\n                    }\n                }\n            }\n            throw new ExchangeError (this.id + ' ' + body);\n        }\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('error' in response)\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/hitbtc2.js\n// module id = 416\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class huobi extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'huobi',\n            'name': 'Huobi',\n            'countries': 'CN',\n            'rateLimit': 2000,\n            'version': 'v3',\n            'hasCORS': false,\n            'hasFetchOHLCV': true,\n            'timeframes': {\n                '1m': '001',\n                '5m': '005',\n                '15m': '015',\n                '30m': '030',\n                '1h': '060',\n                '1d': '100',\n                '1w': '200',\n                '1M': '300',\n                '1y': '400',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766569-15aa7b9a-5edd-11e7-9e7f-44791f4ee49c.jpg',\n                'api': 'http://api.huobi.com',\n                'www': 'https://www.huobi.com',\n                'doc': 'https://github.com/huobiapi/API_Docs_en/wiki',\n            },\n            'api': {\n                'staticmarket': {\n                    'get': [\n                        '{id}_kline_{period}',\n                        'ticker_{id}',\n                        'depth_{id}',\n                        'depth_{id}_{length}',\n                        'detail_{id}',\n                    ],\n                },\n                'usdmarket': {\n                    'get': [\n                        '{id}_kline_{period}',\n                        'ticker_{id}',\n                        'depth_{id}',\n                        'depth_{id}_{length}',\n                        'detail_{id}',\n                    ],\n                },\n                'trade': {\n                    'post': [\n                        'get_account_info',\n                        'get_orders',\n                        'order_info',\n                        'buy',\n                        'sell',\n                        'buy_market',\n                        'sell_market',\n                        'cancel_order',\n                        'get_new_deal_orders',\n                        'get_order_id_by_trade_id',\n                        'withdraw_coin',\n                        'cancel_withdraw_coin',\n                        'get_withdraw_coin_result',\n                        'transfer',\n                        'loan',\n                        'repayment',\n                        'get_loan_available',\n                        'get_loans',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/CNY': { 'id': 'btc', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY', 'type': 'staticmarket', 'coinType': 1 },\n                'LTC/CNY': { 'id': 'ltc', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY', 'type': 'staticmarket', 'coinType': 2 },\n                // 'BTC/USD': { 'id': 'btc', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'type': 'usdmarket',    'coinType': 1 },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        let balances = await this.tradePostGetAccountInfo ();\n        let result = { 'info': balances };\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let lowercase = currency.toLowerCase ();\n            let account = this.account ();\n            let available = 'available_' + lowercase + '_display';\n            let frozen = 'frozen_' + lowercase + '_display';\n            let loan = 'loan_' + lowercase + '_display';\n            if (available in balances)\n                account['free'] = parseFloat (balances[available]);\n            if (frozen in balances)\n                account['used'] = parseFloat (balances[frozen]);\n            if (loan in balances)\n                account['used'] = this.sum (account['used'], parseFloat (balances[loan]));\n            account['total'] = this.sum (account['free'], account['used']);\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let market = this.market (symbol);\n        let method = market['type'] + 'GetDepthId';\n        let orderbook = await this[method] (this.extend ({ 'id': market['id'] }, params));\n        return this.parseOrderBook (orderbook);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let market = this.market (symbol);\n        let method = market['type'] + 'GetTickerId';\n        let response = await this[method] (this.extend ({\n            'id': market['id'],\n        }, params));\n        let ticker = response['ticker'];\n        let timestamp = parseInt (response['time']) * 1000;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy'),\n            'ask': this.safeFloat (ticker, 'sell'),\n            'vwap': undefined,\n            'open': this.safeFloat (ticker, 'open'),\n            'close': undefined,\n            'first': undefined,\n            'last': this.safeFloat (ticker, 'last'),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': undefined,\n            'quoteVolume': this.safeFloat (ticker, 'vol'),\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = trade['ts'];\n        return {\n            'info': trade,\n            'id': trade['id'].toString (),\n            'order': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': trade['direction'],\n            'price': trade['price'],\n            'amount': trade['amount'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let method = market['type'] + 'GetDetailId';\n        let response = await this[method] (this.extend ({\n            'id': market['id'],\n        }, params));\n        return this.parseTrades (response['trades'], market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {\n        // not implemented yet\n        return [\n            ohlcv[0],\n            ohlcv[1],\n            ohlcv[2],\n            ohlcv[3],\n            ohlcv[4],\n            ohlcv[6],\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let method = market['type'] + 'GetIdKlinePeriod';\n        let ohlcvs = await this[method] (this.extend ({\n            'id': market['id'],\n            'period': this.timeframes[timeframe],\n        }, params));\n        return ohlcvs;\n        // return this.parseOHLCVs (ohlcvs, market, timeframe, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        let market = this.market (symbol);\n        let method = 'tradePost' + this.capitalize (side);\n        let order = {\n            'coin_type': market['coinType'],\n            'amount': amount,\n            'market': market['quote'].toLowerCase (),\n        };\n        if (type == 'limit')\n            order['price'] = price;\n        else\n            method += this.capitalize (type);\n        let response = this[method] (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.tradePostCancelOrder ({ 'id': id });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'];\n        if (api == 'trade') {\n            this.checkRequiredCredentials ();\n            url += '/api' + this.version;\n            let query = this.keysort (this.extend ({\n                'method': path,\n                'access_key': this.apiKey,\n                'created': this.nonce (),\n            }, params));\n            let queryString = this.urlencode (this.omit (query, 'market'));\n            // secret key must be appended to the query before signing\n            queryString += '&secret_key=' + this.secret;\n            query['sign'] = this.hash (this.encode (queryString));\n            body = this.urlencode (query);\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            };\n        } else {\n            url += '/' + api + '/' + this.implodeParams (path, params) + '_json.js';\n            let query = this.omit (params, this.extractParams (path));\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'trade', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('status' in response)\n            if (response['status'] == 'error')\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n        if ('code' in response)\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/huobi.js\n// module id = 417\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst huobipro = require ('./huobipro.js')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class huobicny extends huobipro {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'huobicny',\n            'name': 'Huobi CNY',\n            'hostname': 'be.huobi.com',\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766569-15aa7b9a-5edd-11e7-9e7f-44791f4ee49c.jpg',\n                'api': 'https://be.huobi.com',\n                'www': 'https://www.huobi.com',\n                'doc': 'https://github.com/huobiapi/API_Docs/wiki/REST_api_reference',\n            },\n        });\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/huobicny.js\n// module id = 418\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class independentreserve extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'independentreserve',\n            'name': 'Independent Reserve',\n            'countries': [ 'AU', 'NZ' ], // Australia, New Zealand\n            'rateLimit': 1000,\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/30521662-cf3f477c-9bcb-11e7-89bc-d1ac85012eda.jpg',\n                'api': {\n                    'public': 'https://api.independentreserve.com/Public',\n                    'private': 'https://api.independentreserve.com/Private',\n                },\n                'www': 'https://www.independentreserve.com',\n                'doc': 'https://www.independentreserve.com/API',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'GetValidPrimaryCurrencyCodes',\n                        'GetValidSecondaryCurrencyCodes',\n                        'GetValidLimitOrderTypes',\n                        'GetValidMarketOrderTypes',\n                        'GetValidOrderTypes',\n                        'GetValidTransactionTypes',\n                        'GetMarketSummary',\n                        'GetOrderBook',\n                        'GetTradeHistorySummary',\n                        'GetRecentTrades',\n                        'GetFxRates',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'PlaceLimitOrder',\n                        'PlaceMarketOrder',\n                        'CancelOrder',\n                        'GetOpenOrders',\n                        'GetClosedOrders',\n                        'GetClosedFilledOrders',\n                        'GetOrderDetails',\n                        'GetAccounts',\n                        'GetTransactions',\n                        'GetDigitalCurrencyDepositAddress',\n                        'GetDigitalCurrencyDepositAddresses',\n                        'SynchDigitalCurrencyDepositAddressWithBlockchain',\n                        'WithdrawDigitalCurrency',\n                        'RequestFiatWithdrawal',\n                        'GetTrades',\n                    ],\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let baseCurrencies = await this.publicGetValidPrimaryCurrencyCodes ();\n        let quoteCurrencies = await this.publicGetValidSecondaryCurrencyCodes ();\n        let result = [];\n        for (let i = 0; i < baseCurrencies.length; i++) {\n            let baseId = baseCurrencies[i];\n            let baseIdUppercase = baseId.toUpperCase ();\n            let base = this.commonCurrencyCode (baseIdUppercase);\n            for (let j = 0; j < quoteCurrencies.length; j++) {\n                let quoteId = quoteCurrencies[j];\n                let quoteIdUppercase = quoteId.toUpperCase ();\n                let quote = this.commonCurrencyCode (quoteIdUppercase);\n                let id = baseId + '/' + quoteId;\n                let symbol = base + '/' + quote;\n                let taker = 0.5 / 100;\n                let maker = 0.5 / 100;\n                result.push ({\n                    'id': id,\n                    'symbol': symbol,\n                    'base': base,\n                    'quote': quote,\n                    'baseId': baseId,\n                    'quoteId': quoteId,\n                    'taker': taker,\n                    'maker': maker,\n                    'info': id,\n                });\n            }\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let balances = await this.privatePostGetAccounts ();\n        let result = { 'info': balances };\n        for (let i = 0; i < balances.length; i++) {\n            let balance = balances[i];\n            let currencyCode = balance['CurrencyCode'];\n            let uppercase = currencyCode.toUpperCase ();\n            let currency = this.commonCurrencyCode (uppercase);\n            let account = this.account ();\n            account['free'] = balance['AvailableBalance'];\n            account['total'] = balance['TotalBalance'];\n            account['used'] = account['total'] - account['free'];\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetOrderBook (this.extend ({\n            'primaryCurrencyCode': market['baseId'],\n            'secondaryCurrencyCode': market['quoteId'],\n        }, params));\n        let timestamp = this.parse8601 (response['CreatedTimestampUtc']);\n        return this.parseOrderBook (response, timestamp, 'BuyOrders', 'SellOrders', 'Price', 'Volume');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = this.parse8601 (ticker['CreatedTimestampUtc']);\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': ticker['DayHighestPrice'],\n            'low': ticker['DayLowestPrice'],\n            'bid': ticker['CurrentHighestBidPrice'],\n            'ask': ticker['CurrentLowestOfferPrice'],\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': ticker['LastPrice'],\n            'change': undefined,\n            'percentage': undefined,\n            'average': ticker['DayAvgPrice'],\n            'baseVolume': ticker['DayVolumeXbtInSecondaryCurrrency'],\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetMarketSummary (this.extend ({\n            'primaryCurrencyCode': market['baseId'],\n            'secondaryCurrencyCode': market['quoteId'],\n        }, params));\n        return this.parseTicker (response, market);\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = this.parse8601 (trade['TradeTimestampUtc']);\n        return {\n            'id': undefined,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'order': undefined,\n            'type': undefined,\n            'side': undefined,\n            'price': trade['SecondaryCurrencyTradePrice'],\n            'amount': trade['PrimaryCurrencyAmount'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetRecentTrades (this.extend ({\n            'primaryCurrencyCode': market['baseId'],\n            'secondaryCurrencyCode': market['quoteId'],\n            'numberOfRecentTradesToRetrieve': 50, // max = 50\n        }, params));\n        return this.parseTrades (response['Trades'], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let capitalizedOrderType = this.capitalize (type);\n        let method = 'Place' + capitalizedOrderType + 'Order';\n        let orderType = capitalizedOrderType;\n        orderType += (side == 'sell') ?  'Offer' : 'Bid';\n        let order = this.ordered ({\n            'primaryCurrencyCode': market['baseId'],\n            'secondaryCurrencyCode': market['quoteId'],\n            'orderType': orderType,\n        });\n        if (type == 'limit')\n            order['price'] = price;\n        order['volume'] = amount;\n        let response = await this[method] (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['OrderGuid'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privatePostCancelOrder ({ 'orderGuid': id });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api] + '/' + path;\n        if (api == 'public') {\n            if (Object.keys (params).length)\n                url += '?' + this.urlencode (params);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            let auth = [\n                url,\n                'apiKey=' + this.apiKey,\n                'nonce=' + nonce.toString (),\n            ];\n            let keysorted = this.keysort (params);\n            let keys = Object.keys (keysorted);\n            for (let i = 0; i < keys.length; i++) {\n                let key = keys[i];\n                auth.push (key + '=' + params[key]);\n            }\n            let message = auth.join (',');\n            let signature = this.hmac (this.encode (message), this.encode (this.secret));\n            let query = this.keysort (this.extend ({\n                'apiKey': this.apiKey,\n                'nonce': nonce,\n                'signature': signature,\n            }, params));\n            body = this.json (query);\n            headers = { 'Content-Type': 'application/json' };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        // todo error handling\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/independentreserve.js\n// module id = 419\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class itbit extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'itbit',\n            'name': 'itBit',\n            'countries': 'US',\n            'rateLimit': 2000,\n            'version': 'v1',\n            'hasCORS': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27822159-66153620-60ad-11e7-89e7-005f6d7f3de0.jpg',\n                'api': 'https://api.itbit.com',\n                'www': 'https://www.itbit.com',\n                'doc': [\n                    'https://api.itbit.com/docs',\n                    'https://www.itbit.com/api',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'markets/{symbol}/ticker',\n                        'markets/{symbol}/order_book',\n                        'markets/{symbol}/trades',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'wallets',\n                        'wallets/{walletId}',\n                        'wallets/{walletId}/balances/{currencyCode}',\n                        'wallets/{walletId}/funding_history',\n                        'wallets/{walletId}/trades',\n                        'wallets/{walletId}/orders/{id}',\n                    ],\n                    'post': [\n                        'wallet_transfers',\n                        'wallets',\n                        'wallets/{walletId}/cryptocurrency_deposits',\n                        'wallets/{walletId}/cryptocurrency_withdrawals',\n                        'wallets/{walletId}/orders',\n                        'wire_withdrawal',\n                    ],\n                    'delete': [\n                        'wallets/{walletId}/orders/{id}',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/USD': { 'id': 'XBTUSD', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD' },\n                'BTC/SGD': { 'id': 'XBTSGD', 'symbol': 'BTC/SGD', 'base': 'BTC', 'quote': 'SGD' },\n                'BTC/EUR': { 'id': 'XBTEUR', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0,\n                    'taker': 0.2 / 100,\n                },\n            },\n        });\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let orderbook = await this.publicGetMarketsSymbolOrderBook (this.extend ({\n            'symbol': this.marketId (symbol),\n        }, params));\n        return this.parseOrderBook (orderbook);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let ticker = await this.publicGetMarketsSymbolTicker (this.extend ({\n            'symbol': this.marketId (symbol),\n        }, params));\n        let serverTimeUTC = ('serverTimeUTC' in ticker);\n        if (!serverTimeUTC)\n            throw new ExchangeError (this.id + ' fetchTicker returned a bad response: ' + this.json (ticker));\n        let timestamp = this.parse8601 (ticker['serverTimeUTC']);\n        let vwap = parseFloat (ticker['vwap24h']);\n        let baseVolume = parseFloat (ticker['volume24h']);\n        let quoteVolume = baseVolume * vwap;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high24h']),\n            'low': parseFloat (ticker['low24h']),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'ask': this.safeFloat (ticker, 'ask'),\n            'vwap': vwap,\n            'open': parseFloat (ticker['openToday']),\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['lastPrice']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = this.parse8601 (trade['timestamp']);\n        let id = trade['matchNumber'].toString ();\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'id': id,\n            'order': id,\n            'type': undefined,\n            'side': undefined,\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['amount']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetMarketsSymbolTrades (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        return this.parseTrades (response['recentTrades'], market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        let response = await this.privateGetBalances ();\n        let balances = response['balances'];\n        let result = { 'info': response };\n        for (let b = 0; b < balances.length; b++) {\n            let balance = balances[b];\n            let currency = balance['currency'];\n            let account = {\n                'free': parseFloat (balance['availableBalance']),\n                'used': 0.0,\n                'total': parseFloat (balance['totalBalance']),\n            };\n            account['used'] = account['total'] - account['free'];\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    fetchWallets () {\n        return this.privateGetWallets ();\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type == 'market')\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        let walletIdInParams = ('walletId' in params);\n        if (!walletIdInParams)\n            throw new ExchangeError (this.id + ' createOrder requires a walletId parameter');\n        amount = amount.toString ();\n        price = price.toString ();\n        let market = this.market (symbol);\n        let order = {\n            'side': side,\n            'type': type,\n            'currency': market['base'],\n            'amount': amount,\n            'display': amount,\n            'price': price,\n            'instrument': market['id'],\n        };\n        let response = await this.privatePostTradeAdd (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        let walletIdInParams = ('walletId' in params);\n        if (!walletIdInParams)\n            throw new ExchangeError (this.id + ' cancelOrder requires a walletId parameter');\n        return await this.privateDeleteWalletsWalletIdOrdersId (this.extend ({\n            'id': id,\n        }, params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'public') {\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            if (Object.keys (query).length)\n                body = this.json (query);\n            else\n                body = '';\n            let nonce = this.nonce ().toString ();\n            let timestamp = nonce;\n            let auth = [ method, url, body, nonce, timestamp ];\n            let message = nonce + this.json (auth);\n            let hash = this.hash (this.encode (message), 'sha256', 'binary');\n            let binhash = this.binaryConcat (url, hash);\n            let signature = this.hmac (binhash, this.encode (this.secret), 'sha512', 'base64');\n            headers = {\n                'Authorization': self.apiKey + ':' + signature,\n                'Content-Type': 'application/json',\n                'X-Auth-Timestamp': timestamp,\n                'X-Auth-Nonce': nonce,\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('code' in response)\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/itbit.js\n// module id = 420\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst btcbox = require ('./btcbox.js')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class jubi extends btcbox {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'jubi',\n            'name': 'jubi.com',\n            'countries': 'CN',\n            'rateLimit': 1500,\n            'version': 'v1',\n            'hasCORS': false,\n            'hasFetchTickers': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766581-9d397d9a-5edd-11e7-8fb9-5d8236c0e692.jpg',\n                'api': 'https://www.jubi.com/api',\n                'www': 'https://www.jubi.com',\n                'doc': 'https://www.jubi.com/help/api.html',\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetAllticker ();\n        let keys = Object.keys (markets);\n        let result = [];\n        for (let p = 0; p < keys.length; p++) {\n            let id = keys[p];\n            let base = id.toUpperCase ();\n            let quote = 'CNY'; // todo\n            let symbol = base + '/' + quote;\n            base = this.commonCurrencyCode (base);\n            quote = this.commonCurrencyCode (quote);\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': id,\n            });\n        }\n        return result;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/jubi.js\n// module id = 421\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeNotAvailable, ExchangeError, OrderNotFound, DDoSProtection, InvalidNonce, InsufficientFunds, CancelPending, InvalidOrder } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class kraken extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'kraken',\n            'name': 'Kraken',\n            'countries': 'US',\n            'version': '0',\n            'rateLimit': 3000,\n            'hasCORS': false,\n            // obsolete metainfo interface\n            'hasFetchTickers': true,\n            'hasFetchOHLCV': true,\n            'hasFetchOrder': true,\n            'hasFetchOpenOrders': true,\n            'hasFetchClosedOrders': true,\n            'hasFetchMyTrades': true,\n            'hasWithdraw': true,\n            'hasFetchCurrencies': true,\n            // new metainfo interface\n            'has': {\n                'fetchCurrencies': true,\n                'fetchTickers': true,\n                'fetchOHLCV': true,\n                'fetchOrder': true,\n                'fetchOpenOrders': true,\n                'fetchClosedOrders': true,\n                'fetchMyTrades': true,\n                'withdraw': true,\n            },\n            'marketsByAltname': {},\n            'timeframes': {\n                '1m': '1',\n                '5m': '5',\n                '15m': '15',\n                '30m': '30',\n                '1h': '60',\n                '4h': '240',\n                '1d': '1440',\n                '1w': '10080',\n                '2w': '21600',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766599-22709304-5ede-11e7-9de1-9f33732e1509.jpg',\n                'api': 'https://api.kraken.com',\n                'www': 'https://www.kraken.com',\n                'doc': [\n                    'https://www.kraken.com/en-us/help/api',\n                    'https://github.com/nothingisdead/npm-kraken-api',\n                ],\n                'fees': [\n                    'https://www.kraken.com/en-us/help/fees',\n                    'https://support.kraken.com/hc/en-us/articles/201396777-What-are-the-deposit-fees-',\n                    'https://support.kraken.com/hc/en-us/articles/201893608-What-are-the-withdrawal-fees-',\n                ],\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': true,\n                    'percentage': true,\n                    'taker': 0.26 / 100,\n                    'maker': 0.16 / 100,\n                    'tiers': {\n                        'taker': [\n                            [0, 0.26 / 100],\n                            [50000, 0.24 / 100],\n                            [100000, 0.22 / 100],\n                            [250000, 0.2 / 100],\n                            [500000, 0.18 / 100],\n                            [1000000, 0.16 / 100],\n                            [2500000, 0.14 / 100],\n                            [5000000, 0.12 / 100],\n                            [10000000, 0.1 / 100],\n                        ],\n                        'maker': [\n                            [0, 0.16 / 100],\n                            [50000, 0.14 / 100],\n                            [100000, 0.12 / 100],\n                            [250000, 0.10 / 100],\n                            [500000, 0.8 / 100],\n                            [1000000, 0.6 / 100],\n                            [2500000, 0.4 / 100],\n                            [5000000, 0.2 / 100],\n                            [10000000, 0.0 / 100],\n                        ],\n                    },\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {\n                        'BTC': 0.001,\n                        'ETH': 0.005,\n                        'XRP': 0.02,\n                        'XLM': 0.00002,\n                        'LTC': 0.02,\n                        'DOGE': 2,\n                        'ZEC': 0.00010,\n                        'ICN': 0.02,\n                        'REP': 0.01,\n                        'ETC': 0.005,\n                        'MLN': 0.003,\n                        'XMR': 0.05,\n                        'DASH': 0.005,\n                        'GNO': 0.01,\n                        'EOS': 0.5,\n                        'BCH': 0.001,\n                        'USD': 5, // if domestic wire\n                        'EUR': 5, // if domestic wire\n                        'CAD': 10, // CAD EFT Withdrawal\n                        'JPY': 300, // if domestic wire\n                    },\n                    'deposit': {\n                        'BTC': 0,\n                        'ETH': 0,\n                        'XRP': 0,\n                        'XLM': 0,\n                        'LTC': 0,\n                        'DOGE': 0,\n                        'ZEC': 0,\n                        'ICN': 0,\n                        'REP': 0,\n                        'ETC': 0,\n                        'MLN': 0,\n                        'XMR': 0,\n                        'DASH': 0,\n                        'GNO': 0,\n                        'EOS': 0,\n                        'BCH': 0,\n                        'USD': 5, // if domestic wire\n                        'EUR': 0, // free deposit if EUR SEPA Deposit\n                        'CAD': 5, // if domestic wire\n                        'JPY': 0, // Domestic Deposit (Free, ¥5,000 deposit minimum)\n                    },\n                },\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'Assets',\n                        'AssetPairs',\n                        'Depth',\n                        'OHLC',\n                        'Spread',\n                        'Ticker',\n                        'Time',\n                        'Trades',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'AddOrder',\n                        'Balance',\n                        'CancelOrder',\n                        'ClosedOrders',\n                        'DepositAddresses',\n                        'DepositMethods',\n                        'DepositStatus',\n                        'Ledgers',\n                        'OpenOrders',\n                        'OpenPositions',\n                        'QueryLedgers',\n                        'QueryOrders',\n                        'QueryTrades',\n                        'TradeBalance',\n                        'TradesHistory',\n                        'TradeVolume',\n                        'Withdraw',\n                        'WithdrawCancel',\n                        'WithdrawInfo',\n                        'WithdrawStatus',\n                    ],\n                },\n            },\n        });\n    }\n\n    costToPrecision (symbol, cost) {\n        return this.truncate (parseFloat (cost), this.markets[symbol]['precision']['price']);\n    }\n\n    feeToPrecision (symbol, fee) {\n        return this.truncate (parseFloat (fee), this.markets[symbol]['precision']['amount']);\n    }\n\n    handleErrors (code, reason, url, method, headers, body) {\n        if (body.indexOf ('Invalid nonce') >= 0)\n            throw new InvalidNonce (this.id + ' ' + body);\n        if (body.indexOf ('Insufficient funds') >= 0)\n            throw new InsufficientFunds (this.id + ' ' + body);\n        if (body.indexOf ('Cancel pending') >= 0)\n            throw new CancelPending (this.id + ' ' + body);\n        if (body.indexOf ('Invalid arguments:volume') >= 0)\n            throw new InvalidOrder (this.id + ' ' + body);\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetAssetPairs ();\n        let keys = Object.keys (markets['result']);\n        let result = [];\n        for (let i = 0; i < keys.length; i++) {\n            let id = keys[i];\n            let market = markets['result'][id];\n            let base = market['base'];\n            let quote = market['quote'];\n            if ((base[0] == 'X') || (base[0] == 'Z'))\n                base = base.slice (1);\n            if ((quote[0] == 'X') || (quote[0] == 'Z'))\n                quote = quote.slice (1);\n            base = this.commonCurrencyCode (base);\n            quote = this.commonCurrencyCode (quote);\n            let darkpool = id.indexOf ('.d') >= 0;\n            let symbol = darkpool ? market['altname'] : (base + '/' + quote);\n            let maker = undefined;\n            if ('fees_maker' in market) {\n                maker = parseFloat (market['fees_maker'][0][1]) / 100;\n            }\n            let precision = {\n                'amount': market['lot_decimals'],\n                'price': market['pair_decimals'],\n            };\n            let lot = Math.pow (10, -precision['amount']);\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'darkpool': darkpool,\n                'info': market,\n                'altname': market['altname'],\n                'maker': maker,\n                'taker': parseFloat (market['fees'][0][1]) / 100,\n                'lot': lot,\n                'active': true,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': lot,\n                        'max': Math.pow (10, precision['amount']),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision['price']),\n                        'max': undefined,\n                    },\n                    'cost': {\n                        'min': 0,\n                        'max': undefined,\n                    },\n                },\n            });\n        }\n        result = this.appendInactiveMarkets (result);\n        this.marketsByAltname = this.indexBy (result, 'altname');\n        return result;\n    }\n\n    appendInactiveMarkets (result = []) {\n        let precision = { 'amount': 8, 'price': 8 };\n        let costLimits = { 'min': 0, 'max': undefined };\n        let priceLimits = { 'min': Math.pow (10, -precision['price']), 'max': undefined };\n        let amountLimits = { 'min': Math.pow (10, -precision['amount']), 'max': Math.pow (10, precision['amount']) };\n        let limits = { 'amount': amountLimits, 'price': priceLimits, 'cost': costLimits };\n        let defaults = {\n            'darkpool': false,\n            'info': undefined,\n            'maker': undefined,\n            'taker': undefined,\n            'lot': amountLimits['min'],\n            'active': false,\n            'precision': precision,\n            'limits': limits,\n        };\n        let markets = [\n            { 'id': 'XXLMZEUR', 'symbol': 'XLM/EUR', 'base': 'XLM', 'quote': 'EUR', 'altname': 'XLMEUR' },\n        ];\n        for (let i = 0; i < markets.length; i++) {\n            result.push (this.extend (defaults, markets[i]));\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        let response = await this.publicGetAssets (params);\n        let currencies = response['result'];\n        let ids = Object.keys (currencies);\n        let result = {};\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            let currency = currencies[id];\n            // todo: will need to rethink the fees\n            // to add support for multiple withdrawal/deposit methods and\n            // differentiated fees for each particular method\n            let code = this.commonCurrencyCode (currency['altname']);\n            let precision = currency['decimals'];\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency,\n                'name': code,\n                'active': true,\n                'status': 'ok',\n                'fee': undefined,\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': undefined,\n                        'max': Math.pow (10, precision),\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let darkpool = symbol.indexOf ('.d') >= 0;\n        if (darkpool)\n            throw new ExchangeError (this.id + ' does not provide an order book for darkpool symbol ' + symbol);\n        let market = this.market (symbol);\n        let response = await this.publicGetDepth (this.extend ({\n            'pair': market['id'],\n        }, params));\n        let orderbook = response['result'][market['id']];\n        return this.parseOrderBook (orderbook);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        let baseVolume = parseFloat (ticker['v'][1]);\n        let vwap = parseFloat (ticker['p'][1]);\n        let quoteVolume = baseVolume * vwap;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['h'][1]),\n            'low': parseFloat (ticker['l'][1]),\n            'bid': parseFloat (ticker['b'][0]),\n            'ask': parseFloat (ticker['a'][0]),\n            'vwap': vwap,\n            'open': parseFloat (ticker['o']),\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['c'][0]),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let pairs = [];\n        for (let s = 0; s < this.symbols.length; s++) {\n            let symbol = this.symbols[s];\n            let market = this.markets[symbol];\n            if (market['active'])\n                if (!market['darkpool'])\n                    pairs.push (market['id']);\n        }\n        let filter = pairs.join (',');\n        let response = await this.publicGetTicker (this.extend ({\n            'pair': filter,\n        }, params));\n        let tickers = response['result'];\n        let ids = Object.keys (tickers);\n        let result = {};\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            let market = this.markets_by_id[id];\n            let symbol = market['symbol'];\n            let ticker = tickers[id];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let darkpool = symbol.indexOf ('.d') >= 0;\n        if (darkpool)\n            throw new ExchangeError (this.id + ' does not provide a ticker for darkpool symbol ' + symbol);\n        let market = this.market (symbol);\n        let response = await this.publicGetTicker (this.extend ({\n            'pair': market['id'],\n        }, params));\n        let ticker = response['result'][market['id']];\n        return this.parseTicker (ticker, market);\n    }\n\n    parseOHLCV (ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {\n        return [\n            ohlcv[0] * 1000,\n            parseFloat (ohlcv[1]),\n            parseFloat (ohlcv[2]),\n            parseFloat (ohlcv[3]),\n            parseFloat (ohlcv[4]),\n            parseFloat (ohlcv[6]),\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = {\n            'pair': market['id'],\n            'interval': this.timeframes[timeframe],\n        };\n        if (since)\n            request['since'] = parseInt (since / 1000);\n        let response = await this.publicGetOHLC (this.extend (request, params));\n        let ohlcvs = response['result'][market['id']];\n        return this.parseOHLCVs (ohlcvs, market, timeframe, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        let timestamp = undefined;\n        let side = undefined;\n        let type = undefined;\n        let price = undefined;\n        let amount = undefined;\n        let id = undefined;\n        let order = undefined;\n        let fee = undefined;\n        if (!market)\n            market = this.findMarketByAltnameOrId (trade['pair']);\n        if ('ordertxid' in trade) {\n            order = trade['ordertxid'];\n            id = trade['id'];\n            timestamp = parseInt (trade['time'] * 1000);\n            side = trade['type'];\n            type = trade['ordertype'];\n            price = parseFloat (trade['price']);\n            amount = parseFloat (trade['vol']);\n            if ('fee' in trade) {\n                let currency = undefined;\n                if (market)\n                    currency = market['quote'];\n                fee = {\n                    'cost': parseFloat (trade['fee']),\n                    'currency': currency,\n                };\n            }\n        } else {\n            timestamp = parseInt (trade[2] * 1000);\n            side = (trade[3] == 's') ? 'sell' : 'buy';\n            type = (trade[4] == 'l') ? 'limit' : 'market';\n            price = parseFloat (trade[0]);\n            amount = parseFloat (trade[1]);\n        }\n        let symbol = (market) ? market['symbol'] : undefined;\n        return {\n            'id': id,\n            'order': order,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let id = market['id'];\n        let response = await this.publicGetTrades (this.extend ({\n            'pair': id,\n        }, params));\n        let trades = response['result'][id];\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostBalance ();\n        let balances = response['result'];\n        let result = { 'info': balances };\n        let currencies = Object.keys (balances);\n        for (let c = 0; c < currencies.length; c++) {\n            let currency = currencies[c];\n            let code = currency;\n            // X-ISO4217-A3 standard currency codes\n            if (code[0] == 'X') {\n                code = code.slice (1);\n            } else if (code[0] == 'Z') {\n                code = code.slice (1);\n            }\n            code = this.commonCurrencyCode (code);\n            let balance = parseFloat (balances[currency]);\n            let account = {\n                'free': balance,\n                'used': 0.0,\n                'total': balance,\n            };\n            result[code] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let order = {\n            'pair': market['id'],\n            'type': side,\n            'ordertype': type,\n            'volume': this.amountToPrecision (symbol, amount),\n        };\n        if (type == 'limit')\n            order['price'] = this.priceToPrecision (symbol, price);\n        let response = await this.privatePostAddOrder (this.extend (order, params));\n        let length = response['result']['txid'].length;\n        let id = (length > 1) ? response['result']['txid'] : response['result']['txid'][0];\n        return {\n            'info': response,\n            'id': id,\n        };\n    }\n\n    findMarketByAltnameOrId (id) {\n        let result = undefined;\n        if (id in this.marketsByAltname) {\n            result = this.marketsByAltname[id];\n        } else if (id in this.markets_by_id) {\n            result = this.markets_by_id[id];\n        }\n        return result;\n    }\n\n    parseOrder (order, market = undefined) {\n        let description = order['descr'];\n        let side = description['type'];\n        let type = description['ordertype'];\n        let symbol = undefined;\n        if (!market)\n            market = this.findMarketByAltnameOrId (description['pair']);\n        let timestamp = parseInt (order['opentm'] * 1000);\n        let amount = parseFloat (order['vol']);\n        let filled = parseFloat (order['vol_exec']);\n        let remaining = amount - filled;\n        let fee = undefined;\n        let cost = this.safeFloat (order, 'cost');\n        let price = this.safeFloat (description, 'price');\n        if (!price)\n            price = this.safeFloat (order, 'price');\n        if (market) {\n            symbol = market['symbol'];\n            if ('fee' in order) {\n                let flags = order['oflags'];\n                let feeCost = this.safeFloat (order, 'fee');\n                fee = {\n                    'cost': feeCost,\n                    'rate': undefined,\n                };\n                if (flags.indexOf ('fciq') >= 0) {\n                    fee['currency'] = market['quote'];\n                } else if (flags.indexOf ('fcib') >= 0) {\n                    fee['currency'] = market['base'];\n                }\n            }\n        }\n        return {\n            'id': order['id'],\n            'info': order,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'status': order['status'],\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'price': price,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'fee': fee,\n            // 'trades': this.parseTrades (order['trades'], market),\n        };\n    }\n\n    parseOrders (orders, market = undefined, since = undefined, limit = undefined) {\n        let result = [];\n        let ids = Object.keys (orders);\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            let order = this.extend ({ 'id': id }, orders[id]);\n            result.push (this.parseOrder (order, market));\n        }\n        return this.filterBySinceLimit (result, since, limit);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostQueryOrders (this.extend ({\n            'trades': true, // whether or not to include trades in output (optional, default false)\n            'txid': id, // comma delimited list of transaction ids to query info about (20 maximum)\n            // 'userref': 'optional', // restrict results to given user reference id (optional)\n        }, params));\n        let orders = response['result'];\n        let order = this.parseOrder (this.extend ({ 'id': id }, orders[id]));\n        return this.extend ({ 'info': response }, order);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let request = {\n            // 'type': 'all', // any position, closed position, closing position, no position\n            // 'trades': false, // whether or not to include trades related to position in output\n            // 'start': 1234567890, // starting unix timestamp or trade tx id of results (exclusive)\n            // 'end': 1234567890, // ending unix timestamp or trade tx id of results (inclusive)\n            // 'ofs' = result offset\n        };\n        if (since)\n            request['start'] = parseInt (since / 1000);\n        let response = await this.privatePostTradesHistory (this.extend (request, params));\n        let trades = response['result']['trades'];\n        let ids = Object.keys (trades);\n        for (let i = 0; i < ids.length; i++) {\n            trades[ids[i]]['id'] = ids[i];\n        }\n        return this.parseTrades (trades, undefined, since, limit);\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = undefined;\n        try {\n            response = await this.privatePostCancelOrder (this.extend ({\n                'txid': id,\n            }, params));\n        } catch (e) {\n            if (this.last_http_response)\n                if (this.last_http_response.indexOf ('EOrder:Unknown order') >= 0)\n                    throw new OrderNotFound (this.id + ' cancelOrder() error ' + this.last_http_response);\n            throw e;\n        }\n        return response;\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let request = {};\n        if (since)\n            request['start'] = parseInt (since / 1000);\n        let response = await this.privatePostOpenOrders (this.extend (request, params));\n        let orders = this.parseOrders (response['result']['open'], undefined, since, limit);\n        return this.filterOrdersBySymbol (orders, symbol);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let request = {};\n        if (since)\n            request['start'] = parseInt (since / 1000);\n        let response = await this.privatePostClosedOrders (this.extend (request, params));\n        let orders = this.parseOrders (response['result']['closed'], undefined, since, limit);\n        return this.filterOrdersBySymbol (orders, symbol);\n    }\n\n    async fetchDepositMethods (code = undefined, params = {}) {\n        await this.loadMarkets ();\n        let request = {};\n        if (code) {\n            let currency = this.currency (code);\n            request['asset'] = currency['id'];\n        }\n        let response = await this.privatePostDepositMethods (this.extend (request, params));\n        return response['result'];\n    }\n\n    async createDepositAddress (currency, params = {}) {\n        let request = {\n            'new': 'true',\n        };\n        let response = await this.fetchDepositAddress (currency, this.extend (request, params));\n        return {\n            'currency': currency,\n            'address': response['address'],\n            'status': 'ok',\n            'info': response,\n        };\n    }\n\n    async fetchDepositAddress (code, params = {}) {\n        let method = this.safeValue (params, 'method');\n        if (!method)\n            throw new ExchangeError (this.id + ' fetchDepositAddress() requires an extra `method` parameter');\n        await this.loadMarkets ();\n        let currency = this.currency (code);\n        let request = {\n            'asset': currency['id'],\n            'method': method,\n            'new': 'false',\n        };\n        let response = await this.privatePostDepositAddresses (this.extend (request, params));\n        let result = response['result'];\n        let numResults = result.length;\n        if (numResults < 1)\n            throw new ExchangeError (this.id + ' privatePostDepositAddresses() returned no addresses');\n        let address = this.safeString (result[0], 'address');\n        return {\n            'currency': code,\n            'address': address,\n            'status': 'ok',\n            'info': response,\n        };\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        if ('key' in params) {\n            await this.loadMarkets ();\n            let response = await this.privatePostWithdraw (this.extend ({\n                'asset': currency,\n                'amount': amount,\n                // 'address': address, // they don't allow withdrawals to direct addresses\n            }, params));\n            return {\n                'info': response,\n                'id': response['result'],\n            };\n        }\n        throw new ExchangeError (this.id + \" withdraw requires a 'key' parameter (withdrawal key name, as set up on your account)\");\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = '/' + this.version + '/' + api + '/' + path;\n        if (api == 'public') {\n            if (Object.keys (params).length)\n                url += '?' + this.urlencode (params);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ().toString ();\n            body = this.urlencode (this.extend ({ 'nonce': nonce }, params));\n            let auth = this.encode (nonce + body);\n            let hash = this.hash (auth, 'sha256', 'binary');\n            let binary = this.stringToBinary (this.encode (url));\n            let binhash = this.binaryConcat (binary, hash);\n            let secret = this.base64ToBinary (this.secret);\n            let signature = this.hmac (binhash, secret, 'sha512', 'base64');\n            headers = {\n                'API-Key': this.apiKey,\n                'API-Sign': this.decode (signature),\n                'Content-Type': 'application/x-www-form-urlencoded',\n            };\n        }\n        url = this.urls['api'] + url;\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('error' in response) {\n            let numErrors = response['error'].length;\n            if (numErrors) {\n                for (let i = 0; i < response['error'].length; i++) {\n                    if (response['error'][i] == 'EService:Unavailable')\n                        throw new ExchangeNotAvailable (this.id + ' ' + this.json (response));\n                    if (response['error'][i] == 'EService:Busy')\n                        throw new DDoSProtection (this.id + ' ' + this.json (response));\n                }\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n            }\n        }\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/kraken.js\n// module id = 422\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, InvalidNonce, AuthenticationError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class kucoin extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'kucoin',\n            'name': 'Kucoin',\n            'countries': 'HK', // Hong Kong\n            'version': 'v1',\n            'rateLimit': 2000,\n            'hasCORS': false,\n            'userAgent': this.userAgents['chrome'],\n            // obsolete metainfo interface\n            'hasFetchTickers': true,\n            'hasFetchOHLCV': false, // see the method implementation below\n            'hasFetchOrder': true,\n            'hasFetchOrders': true,\n            'hasFetchClosedOrders': true,\n            'hasFetchOpenOrders': true,\n            'hasFetchMyTrades': false,\n            'hasFetchCurrencies': true,\n            'hasWithdraw': true,\n            // new metainfo interface\n            'has': {\n                'fetchTickers': true,\n                'fetchOHLCV': true, // see the method implementation below\n                'fetchOrder': true,\n                'fetchOrders': true,\n                'fetchClosedOrders': true,\n                'fetchOpenOrders': true,\n                'fetchMyTrades': false,\n                'fetchCurrencies': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '1m': '1',\n                '5m': '5',\n                '15m': '15',\n                '30m': '30',\n                '1h': '60',\n                '8h': '480',\n                '1d': 'D',\n                '1w': 'W',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/33795655-b3c46e48-dcf6-11e7-8abe-dc4588ba7901.jpg',\n                'api': 'https://api.kucoin.com',\n                'www': 'https://kucoin.com',\n                'doc': 'https://kucoinapidocs.docs.apiary.io',\n                'fees': 'https://news.kucoin.com/en/fee',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'open/chart/config',\n                        'open/chart/history',\n                        'open/chart/symbol',\n                        'open/currencies',\n                        'open/deal-orders',\n                        'open/kline',\n                        'open/lang-list',\n                        'open/orders',\n                        'open/orders-buy',\n                        'open/orders-sell',\n                        'open/tick',\n                        'market/open/coin-info',\n                        'market/open/coins',\n                        'market/open/coins-trending',\n                        'market/open/symbols',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'account/balance',\n                        'account/{coin}/wallet/address',\n                        'account/{coin}/wallet/records',\n                        'account/{coin}/balance',\n                        'account/promotion/info',\n                        'account/promotion/sum',\n                        'deal-orders',\n                        'order/active',\n                        'order/active-map',\n                        'order/dealt',\n                        'referrer/descendant/count',\n                        'user/info',\n                    ],\n                    'post': [\n                        'account/{coin}/withdraw/apply',\n                        'account/{coin}/withdraw/cancel',\n                        'cancel-order',\n                        'order',\n                        'user/change-lang',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.0010,\n                    'taker': 0.0010,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let response = await this.publicGetMarketOpenSymbols ();\n        let markets = response['data'];\n        let result = [];\n        for (let i = 0; i < markets.length; i++) {\n            let market = markets[i];\n            let id = market['symbol'];\n            let base = market['coinType'];\n            let quote = market['coinTypePair'];\n            base = this.commonCurrencyCode (base);\n            quote = this.commonCurrencyCode (quote);\n            let symbol = base + '/' + quote;\n            let precision = {\n                'amount': 8,\n                'price': 8,\n            };\n            let active = market['trading'];\n            result.push (this.extend (this.fees['trading'], {\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'active': active,\n                'info': market,\n                'lot': Math.pow (10, -precision['amount']),\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision['amount']),\n                        'max': undefined,\n                    },\n                    'price': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                },\n            }));\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        let response = await this.publicGetMarketOpenCoins (params);\n        let currencies = response['data'];\n        let result = {};\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let id = currency['coin'];\n            // todo: will need to rethink the fees\n            // to add support for multiple withdrawal/deposit methods and\n            // differentiated fees for each particular method\n            let code = this.commonCurrencyCode (id);\n            let precision = currency['tradePrecision'];\n            let deposit = currency['enableDeposit'];\n            let withdraw = currency['enableWithdraw'];\n            let active = (deposit && withdraw);\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency,\n                'name': currency['name'],\n                'active': active,\n                'status': 'ok',\n                'fee': currency['withdrawFeeRate'], // todo: redesign\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': currency['withdrawMinAmount'],\n                        'max': Math.pow (10, precision),\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privateGetAccountBalance (this.extend ({\n            'limit': 20, // default 12, max 20\n            'page': 1,\n        }, params));\n        let balances = response['data'];\n        let result = { 'info': balances };\n        let indexed = this.indexBy (balances, 'coinType');\n        let keys = Object.keys (indexed);\n        for (let i = 0; i < keys.length; i++) {\n            let id = keys[i];\n            let currency = this.commonCurrencyCode (id);\n            let account = this.account ();\n            let balance = indexed[id];\n            let total = parseFloat (balance['balance']);\n            let used = parseFloat (balance['freezeBalance']);\n            let free = total - used;\n            account['free'] = free;\n            account['used'] = used;\n            account['total'] = total;\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetOpenOrders (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        let orderbook = response['data'];\n        return this.parseOrderBook (orderbook, undefined, 'BUY', 'SELL');\n    }\n\n    parseOrder (order, market = undefined) {\n        let symbol = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        } else {\n            symbol = order['coinType'] + '/' + order['coinTypePair'];\n        }\n        let timestamp = order['createdAt'];\n        let price = this.safeFloat (order, 'price');\n        let amount = this.safeFloat (order, 'amount');\n        let filled = this.safeFloat (order, 'dealAmount');\n        let remaining = this.safeFloat (order, 'pendingAmount');\n        let side = order['type'].toLowerCase ();\n        let result = {\n            'info': order,\n            'id': this.safeString (order, 'oid'),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': 'limit',\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'cost': price * filled,\n            'filled': filled,\n            'remaining': remaining,\n            'status': undefined,\n            'fee': this.safeFloat (order, 'fee'),\n        };\n        return result;\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (!symbol)\n            throw new ExchangeError (this.id + ' fetchOpenOrders requires a symbol param');\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = {\n            'symbol': market['id'],\n        };\n        let response = await this.privateGetOrderActiveMap (this.extend (request, params));\n        let orders = this.arrayConcat (response['data']['SELL'], response['data']['BUY']);\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        let request = {};\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        if (symbol) {\n            request['symbol'] = market['id'];\n        }\n        if (since) {\n            request['since'] = since;\n        }\n        if (limit) {\n            request['limit'] = limit;\n        }\n        let response = await this.privateGetOrderDealt (this.extend (request, params));\n        return this.parseOrders (response['data']['datas'], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type != 'limit')\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let order = {\n            'symbol': market['id'],\n            'type': side.toUpperCase (),\n            'price': this.priceToPrecision (symbol, price),\n            'amount': this.amountToPrecision (symbol, amount),\n        };\n        let response = await this.privatePostOrder (this.extend (order, params));\n        return {\n            'info': response,\n            'id': this.safeString (response['data'], 'orderOid'),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (!symbol)\n            throw new ExchangeError (this.id + ' cancelOrder requires symbol argument');\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = {\n            'symbol': market['id'],\n            'orderOid': id,\n        };\n        if ('type' in params) {\n            request['type'] = params['type'].toUpperCase ();\n        } else {\n            throw new ExchangeError (this.id + ' cancelOrder requires type (BUY or SELL) param');\n        }\n        let response = await this.privatePostCancelOrder (this.extend (request, params));\n        return response;\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = ticker['datetime'];\n        let symbol = undefined;\n        if (market) {\n            symbol = market['symbol'];\n        } else {\n            symbol = ticker['coinType'] + '/' + ticker['coinTypePair'];\n        }\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'buy'),\n            'ask': this.safeFloat (ticker, 'sell'),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': this.safeFloat (ticker, 'lastDealPrice'),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'vol'),\n            'quoteVolume': this.safeFloat (ticker, 'volValue'),\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        let response = await this.publicGetMarketOpenSymbols (params);\n        let tickers = response['data'];\n        let result = {};\n        for (let t = 0; t < tickers.length; t++) {\n            let ticker = this.parseTicker (tickers[t]);\n            let symbol = ticker['symbol'];\n            result[symbol] = ticker;\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetOpenTick (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        let ticker = response['data'];\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        let timestamp = trade[0];\n        let side = undefined;\n        if (trade[1] == 'BUY') {\n            side = 'buy';\n        } else if (trade[1] == 'SELL') {\n            side = 'sell';\n        }\n        return {\n            'id': undefined,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': 'limit',\n            'side': side,\n            'price': trade[2],\n            'amount': trade[3],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetOpenDealOrders (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        return this.parseTrades (response['data'], market, since, limit);\n    }\n\n    parseOHLCV (ohlcv, market = undefined, timeframe = '1d', since = undefined, limit = undefined) {\n        let timestamp = this.parse8601 (ohlcv['T']);\n        return [\n            timestamp,\n            ohlcv['O'],\n            ohlcv['H'],\n            ohlcv['L'],\n            ohlcv['C'],\n            ohlcv['V'],\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let to = this.seconds ();\n        let request = {\n            'symbol': market['id'],\n            'type': this.timeframes[timeframe],\n            'from': to - 86400,\n            'to': to,\n        };\n        if (since) {\n            request['from'] = parseInt (since / 1000);\n        }\n        // limit is not documented in api call, and not respected\n        if (limit) {\n            request['limit'] = limit;\n        }\n        let response = await this.publicGetOpenChartHistory (this.extend (request, params));\n        // we need buildOHLCV\n        return this.parseOHLCVs (response['data'], market, timeframe, since, limit);\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let endpoint = '/' + this.version + '/' + this.implodeParams (path, params);\n        let url = this.urls['api'] + endpoint;\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'public') {\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            // their nonce is always a calibrated synched milliseconds-timestamp\n            let nonce = this.milliseconds ();\n            let queryString = '';\n            nonce = nonce.toString ();\n            if (Object.keys (query).length) {\n                queryString = this.rawencode (this.keysort (query));\n                if (method == 'GET') {\n                    url += '?' + queryString;\n                } else {\n                    body = queryString;\n                }\n            }\n            let auth = endpoint + '/' + nonce + '/' + queryString;\n            let payload = this.stringToBase64 (this.encode (auth));\n            // payload should be \"encoded\" as returned from stringToBase64\n            let signature = this.hmac (payload, this.encode (this.secret), 'sha256');\n            headers = {\n                'KC-API-KEY': this.apiKey,\n                'KC-API-NONCE': nonce,\n                'KC-API-SIGNATURE': signature,\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body) {\n        if (code >= 400) {\n            if (body && (body[0] == \"{\")) {\n                let response = JSON.parse (body);\n                if ('success' in response) {\n                    if (!response['success']) {\n                        if ('code' in response) {\n                            if (response['code'] == 'UNAUTH') {\n                                let message = this.safeString (response, 'msg');\n                                if (message == 'Invalid nonce') {\n                                    throw new InvalidNonce (this.id + ' ' + message);\n                                }\n                                throw new AuthenticationError (this.id + ' ' + this.json (response));\n                            }\n                        }\n                        throw new ExchangeError (this.id + ' ' + this.json (response));\n                    }\n                }\n            } else {\n                throw new ExchangeError (this.id + ' ' + code.toString () + ' ' + reason);\n            }\n        }\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/kucoin.js\n// module id = 423\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst acx = require ('./acx.js')\nconst { ExchangeError, InsufficientFunds, OrderNotFound } = require ('./base/errors')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class kuna extends acx {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'kuna',\n            'name': 'Kuna',\n            'countries': 'UA',\n            'rateLimit': 1000,\n            'version': 'v2',\n            'hasCORS': false,\n            'hasFetchTickers': false,\n            'hasFetchOHLCV': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/31697638-912824fa-b3c1-11e7-8c36-cf9606eb94ac.jpg',\n                'api': 'https://kuna.io',\n                'www': 'https://kuna.io',\n                'doc': 'https://kuna.io/documents/api',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'tickers/{market}',\n                        'order_book',\n                        'order_book/{market}',\n                        'trades',\n                        'trades/{market}',\n                        'timestamp',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'members/me',\n                        'orders',\n                        'trades/my',\n                    ],\n                    'post': [\n                        'orders',\n                        'order/delete',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/UAH': { 'id': 'btcuah', 'symbol': 'BTC/UAH', 'base': 'BTC', 'quote': 'UAH', 'precision': { 'amount': 6, 'price': 0 }, 'lot': 0.000001, 'limits': { 'amount': { 'min': 0.000001, 'max': undefined }, 'price': { 'min': 1, 'max': undefined }}},\n                'ETH/UAH': { 'id': 'ethuah', 'symbol': 'ETH/UAH', 'base': 'ETH', 'quote': 'UAH', 'precision': { 'amount': 6, 'price': 0 }, 'lot': 0.000001, 'limits': { 'amount': { 'min': 0.000001, 'max': undefined }, 'price': { 'min': 1, 'max': undefined }}},\n                'GBG/UAH': { 'id': 'gbguah', 'symbol': 'GBG/UAH', 'base': 'GBG', 'quote': 'UAH', 'precision': { 'amount': 3, 'price': 2 }, 'lot': 0.001, 'limits': { 'amount': { 'min': 0.000001, 'max': undefined }, 'price': { 'min': 0.01, 'max': undefined }}}, // Golos Gold (GBG != GOLOS)\n                'KUN/BTC': { 'id': 'kunbtc', 'symbol': 'KUN/BTC', 'base': 'KUN', 'quote': 'BTC', 'precision': { 'amount': 6, 'price': 6 }, 'lot': 0.000001, 'limits': { 'amount': { 'min': 0.000001, 'max': undefined }, 'price': { 'min': 0.000001, 'max': undefined }}},\n                'BCH/BTC': { 'id': 'bchbtc', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC', 'precision': { 'amount': 6, 'price': 6 }, 'lot': 0.000001, 'limits': { 'amount': { 'min': 0.000001, 'max': undefined }, 'price': { 'min': 0.000001, 'max': undefined }}},\n                'WAVES/UAH': { 'id': 'wavesuah', 'symbol': 'WAVES/UAH', 'base': 'WAVES', 'quote': 'UAH', 'precision': { 'amount': 6, 'price': 0 }, 'lot': 0.000001, 'limits': { 'amount': { 'min': 0.000001, 'max': undefined }, 'price': { 'min': 1, 'max': undefined }}},\n            },\n            'fees': {\n                'trading': {\n                    'taker': 0.25 / 100,\n                    'maker': 0.25 / 100,\n                },\n            },\n        });\n    }\n\n    handleErrors (code, reason, url, method, headers, body) {\n        if (code == 400) {\n            let data = JSON.parse (body);\n            let error = data['error'];\n            let errorCode = error['code'];\n            if (errorCode == 2002) {\n                throw new InsufficientFunds ([ this.id, method, url, code, reason, body ].join (' '));\n            } else if (errorCode == 2003) {\n                throw new OrderNotFound ([ this.id, method, url, code, reason, body ].join (' '));\n            }\n        }\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let market = this.market (symbol);\n        let orderBook = await this.publicGetOrderBook (this.extend ({\n            'market': market['id'],\n        }, params));\n        return this.parseOrderBook (orderBook, undefined, 'bids', 'asks', 'price', 'remaining_volume');\n    }\n\n    async fetchL3OrderBook (symbol, params) {\n        return this.fetchOrderBook (symbol, params);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (!symbol)\n            throw new ExchangeError (this.id + ' fetchOpenOrders requires a symbol argument');\n        let market = this.market (symbol);\n        let orders = await this.privateGetOrders (this.extend ({\n            'market': market['id'],\n        }, params));\n        // todo emulation of fetchClosedOrders, fetchOrders, fetchOrder\n        // with order cache + fetchOpenOrders\n        // as in BTC-e, Liqui, Yobit, DSX, Tidex, WEX\n        return this.parseOrders (orders, market, since, limit);\n    }\n\n    parseTrade (trade, market = undefined) {\n        let timestamp = this.parse8601 (trade['created_at']);\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'id': trade['id'],\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': undefined,\n            'side': undefined,\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['volume']),\n            'info': trade,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetTrades (this.extend ({\n            'market': market['id'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseMyTrade (trade, market) {\n        let timestamp = this.parse8601 (trade['created_at']);\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'id': trade['id'],\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'price': trade['price'],\n            'amount': trade['volume'],\n            'cost': trade['funds'],\n            'symbol': symbol,\n            'side': trade['side'],\n            'order': trade['order_id'],\n        };\n    }\n\n    parseMyTrades (trades, market = undefined) {\n        let parsedTrades = [];\n        for (let i = 0; i < trades.length; i++) {\n            let trade = trades[i];\n            let parsedTrade = this.parseMyTrade (trade, market);\n            parsedTrades.push (parsedTrade);\n        }\n        return parsedTrades;\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        if (!symbol)\n            throw new ExchangeError (this.id + ' fetchOpenOrders requires a symbol argument');\n        let market = this.market (symbol);\n        let response = await this.privateGetTradesMy ({ 'market': market['id'] });\n        return this.parseMyTrades (response, market);\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/kuna.js\n// module id = 424\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class lakebtc extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'lakebtc',\n            'name': 'LakeBTC',\n            'countries': 'US',\n            'version': 'api_v2',\n            'hasCORS': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/28074120-72b7c38a-6660-11e7-92d9-d9027502281d.jpg',\n                'api': 'https://api.lakebtc.com',\n                'www': 'https://www.lakebtc.com',\n                'doc': [\n                    'https://www.lakebtc.com/s/api_v2',\n                    'https://www.lakebtc.com/s/api',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'bcorderbook',\n                        'bctrades',\n                        'ticker',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'buyOrder',\n                        'cancelOrders',\n                        'getAccountInfo',\n                        'getExternalAccounts',\n                        'getOrders',\n                        'getTrades',\n                        'openOrders',\n                        'sellOrder',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.15 / 100,\n                    'taker': 0.2 / 100,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetTicker ();\n        let result = [];\n        let keys = Object.keys (markets);\n        for (let k = 0; k < keys.length; k++) {\n            let id = keys[k];\n            let market = markets[id];\n            let base = id.slice (0, 3);\n            let quote = id.slice (3, 6);\n            base = base.toUpperCase ();\n            quote = quote.toUpperCase ();\n            let symbol = base + '/' + quote;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostGetAccountInfo ();\n        let balances = response['balance'];\n        let result = { 'info': response };\n        let currencies = Object.keys (balances);\n        for (let c = 0; c < currencies.length; c++) {\n            let currency = currencies[c];\n            let balance = parseFloat (balances[currency]);\n            let account = {\n                'free': balance,\n                'used': 0.0,\n                'total': balance,\n            };\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let orderbook = await this.publicGetBcorderbook (this.extend ({\n            'symbol': this.marketId (symbol),\n        }, params));\n        return this.parseOrderBook (orderbook);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let tickers = await this.publicGetTicker (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        let ticker = tickers[market['id']];\n        let timestamp = this.milliseconds ();\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'ask': this.safeFloat (ticker, 'ask'),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': this.safeFloat (ticker, 'last'),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'volume'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = trade['date'] * 1000;\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'id': trade['tid'].toString (),\n            'order': undefined,\n            'type': undefined,\n            'side': undefined,\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['amount']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetBctrades (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (market, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (type == 'market')\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        let method = 'privatePost' + this.capitalize (side) + 'Order';\n        let marketId = this.marketId (market);\n        let order = {\n            'params': [ price, amount, marketId ],\n        };\n        let response = await this[method] (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['id'].toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privatePostCancelOrder ({ 'params': id });\n    }\n\n    nonce () {\n        return this.microseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version;\n        if (api == 'public') {\n            url += '/' + path;\n            if (Object.keys (params).length)\n                url += '?' + this.urlencode (params);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            if (Object.keys (params).length)\n                params = params.join (',');\n            else\n                params = '';\n            let query = this.urlencode ({\n                'tonce': nonce,\n                'accesskey': this.apiKey,\n                'requestmethod': method.toLowerCase (),\n                'id': nonce,\n                'method': path,\n                'params': params,\n            });\n            body = this.json ({\n                'method': path,\n                'params': params,\n                'id': nonce,\n            });\n            let signature = this.hmac (this.encode (query), this.encode (this.secret), 'sha1');\n            let auth = this.encode (this.apiKey + ':' + signature);\n            headers = {\n                'Json-Rpc-Tonce': nonce,\n                'Authorization': \"Basic \" + this.decode (this.stringToBase64 (auth)),\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('error' in response)\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/lakebtc.js\n// module id = 425\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, AuthenticationError, NotSupported, InvalidOrder, OrderNotFound } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class livecoin extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'livecoin',\n            'name': 'LiveCoin',\n            'countries': [ 'US', 'UK', 'RU' ],\n            'rateLimit': 1000,\n            'hasCORS': false,\n            // obsolete metainfo interface\n            'hasFetchTickers': true,\n            'hasFetchCurrencies': true,\n            // new metainfo interface\n            'has': {\n                'fetchTickers': true,\n                'fetchCurrencies': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27980768-f22fc424-638a-11e7-89c9-6010a54ff9be.jpg',\n                'api': 'https://api.livecoin.net',\n                'www': 'https://www.livecoin.net',\n                'doc': 'https://www.livecoin.net/api?lang=en',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'exchange/all/order_book',\n                        'exchange/last_trades',\n                        'exchange/maxbid_minask',\n                        'exchange/order_book',\n                        'exchange/restrictions',\n                        'exchange/ticker', // omit params to get all tickers at once\n                        'info/coinInfo',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'exchange/client_orders',\n                        'exchange/order',\n                        'exchange/trades',\n                        'exchange/commission',\n                        'exchange/commissionCommonInfo',\n                        'payment/balances',\n                        'payment/balance',\n                        'payment/get/address',\n                        'payment/history/size',\n                        'payment/history/transactions',\n                    ],\n                    'post': [\n                        'exchange/buylimit',\n                        'exchange/buymarket',\n                        'exchange/cancellimit',\n                        'exchange/selllimit',\n                        'exchange/sellmarket',\n                        'payment/out/capitalist',\n                        'payment/out/card',\n                        'payment/out/coin',\n                        'payment/out/okpay',\n                        'payment/out/payeer',\n                        'payment/out/perfectmoney',\n                        'payment/voucher/amount',\n                        'payment/voucher/make',\n                        'payment/voucher/redeem',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0.18 / 100,\n                    'taker': 0.18 / 100,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetExchangeTicker ();\n        let restrictions = await this.publicGetExchangeRestrictions ();\n        let restrictionsById = this.indexBy (restrictions['restrictions'], 'currencyPair');\n        let result = [];\n        for (let p = 0; p < markets.length; p++) {\n            let market = markets[p];\n            let id = market['symbol'];\n            let symbol = id;\n            let [ base, quote ] = symbol.split ('/');\n            let coinRestrictions = this.safeValue (restrictionsById, symbol);\n            let precision = {\n                'price': 5,\n                'amount': 8,\n                'cost': 8,\n            };\n            let limits = {\n                'amount': {\n                    'min': Math.pow (10, -precision['amount']),\n                    'max': Math.pow (10, precision['amount']),\n                },\n            };\n            if (coinRestrictions) {\n                precision['price'] = this.safeInteger (coinRestrictions, 'priceScale', 5);\n                limits['amount']['min'] = this.safeFloat (coinRestrictions, 'minLimitQuantity', limits['amount']['min']);\n            }\n            limits['price'] = {\n                'min': Math.pow (10, -precision['price']),\n                'max': Math.pow (10, precision['price']),\n            };\n            result.push (this.extend (this.fees['trading'], {\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'precision': precision,\n                'limits': limits,\n                'info': market,\n            }));\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        let response = await this.publicGetInfoCoinInfo (params);\n        let currencies = response['info'];\n        let result = {};\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let id = currency['symbol'];\n            // todo: will need to rethink the fees\n            // to add support for multiple withdrawal/deposit methods and\n            // differentiated fees for each particular method\n            let code = this.commonCurrencyCode (id);\n            let precision = 8; // default precision, todo: fix \"magic constants\"\n            let active = (currency['walletStatus'] == 'normal');\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency,\n                'name': currency['name'],\n                'active': active,\n                'status': 'ok',\n                'fee': currency['withdrawFee'], // todo: redesign\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': currency['minOrderAmount'],\n                        'max': Math.pow (10, precision),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'cost': {\n                        'min': currency['minOrderAmount'],\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': currency['minWithdrawAmount'],\n                        'max': Math.pow (10, precision),\n                    },\n                    'deposit': {\n                        'min': currency['minDepositAmount'],\n                        'max': undefined,\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let balances = await this.privateGetPaymentBalances ();\n        let result = { 'info': balances };\n        for (let b = 0; b < balances.length; b++) {\n            let balance = balances[b];\n            let currency = balance['currency'];\n            let account = undefined;\n            if (currency in result)\n                account = result[currency];\n            else\n                account = this.account ();\n            if (balance['type'] == 'total')\n                account['total'] = parseFloat (balance['value']);\n            if (balance['type'] == 'available')\n                account['free'] = parseFloat (balance['value']);\n            if (balance['type'] == 'trade')\n                account['used'] = parseFloat (balance['value']);\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchFees (params = {}) {\n        await this.loadMarkets ();\n        let commissionInfo = await this.privateGetExchangeCommissionCommonInfo ();\n        let commission = this.safeFloat (commissionInfo, 'commission');\n        return {\n            'info': commissionInfo,\n            'maker': commission,\n            'taker': commission,\n            'withdraw': 0.0,\n        };\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let orderbook = await this.publicGetExchangeOrderBook (this.extend ({\n            'currencyPair': this.marketId (symbol),\n            'groupByPrice': 'false',\n            'depth': 100,\n        }, params));\n        let timestamp = orderbook['timestamp'];\n        return this.parseOrderBook (orderbook, timestamp);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        let vwap = parseFloat (ticker['vwap']);\n        let baseVolume = parseFloat (ticker['volume']);\n        let quoteVolume = baseVolume * vwap;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['best_bid']),\n            'ask': parseFloat (ticker['best_ask']),\n            'vwap': parseFloat (ticker['vwap']),\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.publicGetExchangeTicker (params);\n        let tickers = this.indexBy (response, 'symbol');\n        let ids = Object.keys (tickers);\n        let result = {};\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            let market = this.markets_by_id[id];\n            let symbol = market['symbol'];\n            let ticker = tickers[id];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let ticker = await this.publicGetExchangeTicker (this.extend ({\n            'currencyPair': market['id'],\n        }, params));\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = trade['time'] * 1000;\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'id': trade['id'].toString (),\n            'order': undefined,\n            'type': undefined,\n            'side': trade['type'].toLowerCase (),\n            'price': trade['price'],\n            'amount': trade['quantity'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetExchangeLastTrades (this.extend ({\n            'currencyPair': market['id'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    parseOrder (order, market = undefined) {\n        let timestamp = this.safeInteger (order, 'lastModificationTime');\n        if (!timestamp)\n            timestamp = this.parse8601 (order['lastModificationTime']);\n        let trades = undefined;\n        if ('trades' in order)\n            // TODO currently not supported by livecoin\n            // trades = this.parseTrades (order['trades'], market, since, limit);\n            trades = undefined;\n        let status = undefined;\n        if (order['orderStatus'] == 'OPEN' || order['orderStatus'] == 'PARTIALLY_FILLED') {\n            status = 'open';\n        } else if (order['orderStatus'] == 'EXECUTED' || order['orderStatus'] == 'PARTIALLY_FILLED_AND_CANCELLED') {\n            status = 'closed';\n        } else {\n            status = 'canceled';\n        }\n        let symbol = order['currencyPair'];\n        let [ base, quote ] = symbol.split ('/');\n        let type = undefined;\n        let side = undefined;\n        if (order['type'].indexOf ('MARKET') >= 0) {\n            type = 'market';\n        } else {\n            type = 'limit';\n        }\n        if (order['type'].indexOf ('SELL') >= 0) {\n            side = 'sell';\n        } else {\n            side = 'buy';\n        }\n        let price = this.safeFloat (order, 'price', 0.0);\n        let cost = this.safeFloat (order, 'commissionByTrade', 0.0);\n        let remaining = this.safeFloat (order, 'remainingQuantity', 0.0);\n        let amount = this.safeFloat (order, 'quantity', remaining);\n        let filled = amount - remaining;\n        return {\n            'info': order,\n            'id': order['id'],\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'status': status,\n            'symbol': symbol,\n            'type': type,\n            'side': side,\n            'price': price,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'trades': trades,\n            'fee': {\n                'cost': cost,\n                'currency': quote,\n            },\n        };\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol)\n            market = this.market (symbol);\n        let pair = market ? market['id'] : undefined;\n        let request = {};\n        if (pair)\n            request['currencyPair'] = pair;\n        if (since)\n            request['issuedFrom'] = parseInt (since);\n        if (limit)\n            request['endRow'] = limit - 1;\n        let response = await this.privateGetExchangeClientOrders (this.extend (request, params));\n        let result = [];\n        let rawOrders = [];\n        if (response['data'])\n            rawOrders = response['data'];\n        for (let i = 0; i < rawOrders.length; i++) {\n            let order = rawOrders[i];\n            result.push (this.parseOrder (order, market));\n        }\n        return result;\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        let result = await this.fetchOrders (symbol, since, limit, this.extend ({\n            'openClosed': 'OPEN',\n        }, params));\n        return result;\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        let result = await this.fetchOrders (symbol, since, limit, this.extend ({\n            'openClosed': 'CLOSED',\n        }, params));\n        return result;\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let method = 'privatePostExchange' + this.capitalize (side) + type;\n        let market = this.market (symbol);\n        let order = {\n            'quantity': this.amountToPrecision (symbol, amount),\n            'currencyPair': market['id'],\n        };\n        if (type == 'limit')\n            order['price'] = this.priceToPrecision (symbol, price);\n        let response = await this[method] (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['orderId'].toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (!symbol)\n            throw new ExchangeError (this.id + ' cancelOrder requires a symbol argument');\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let currencyPair = market['id'];\n        let response = await this.privatePostExchangeCancellimit (this.extend ({\n            'orderId': id,\n            'currencyPair': currencyPair,\n        }, params));\n        let message = this.safeString (response, 'message', this.json (response));\n        if ('success' in response) {\n            if (!response['success']) {\n                throw new InvalidOrder (message);\n            } else if ('cancelled' in response) {\n                if (response['cancelled']) {\n                    return response;\n                } else {\n                    throw new OrderNotFound (message);\n                }\n            }\n        }\n        throw new ExchangeError (this.id + ' cancelOrder() failed: ' + this.json (response));\n    }\n\n    async fetchDepositAddress (currency, params = {}) {\n        let request = {\n            'currency': currency,\n        };\n        let response = await this.privateGetPaymentGetAddress (this.extend (request, params));\n        let address = this.safeString (response, 'wallet');\n        return {\n            'currency': currency,\n            'address': address,\n            'status': 'ok',\n            'info': response,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + path;\n        let query = this.urlencode (this.keysort (params));\n        if (method == 'GET') {\n            if (Object.keys (params).length) {\n                url += '?' + query;\n            }\n        }\n        if (api == 'private') {\n            this.checkRequiredCredentials ();\n            if (method == 'POST')\n                body = query;\n            let signature = this.hmac (this.encode (query), this.encode (this.secret), 'sha256');\n            headers = {\n                'Api-Key': this.apiKey,\n                'Sign': signature.toUpperCase (),\n                'Content-Type': 'application/x-www-form-urlencoded',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    handleErrors (code, reason, url, method, headers, body) {\n        if (code >= 300) {\n            if (body[0] == \"{\") {\n                let response = JSON.parse (body);\n                if ('errorCode' in response) {\n                    let error = response['errorCode'];\n                    if (error == 1) {\n                        throw new ExchangeError (this.id + ' ' + this.json (response));\n                    } else if (error == 2) {\n                        if ('errorMessage' in response) {\n                            if (response['errorMessage'] == 'User not found')\n                                throw new AuthenticationError (this.id + ' ' + response['errorMessage']);\n                        } else {\n                            throw new ExchangeError (this.id + ' ' + this.json (response));\n                        }\n                    } else if ((error == 10) || (error == 11) || (error == 12) || (error == 20) || (error == 30) || (error == 101) || (error == 102)) {\n                        throw new AuthenticationError (this.id + ' ' + this.json (response));\n                    } else if (error == 31) {\n                        throw new NotSupported (this.id + ' ' + this.json (response));\n                    } else if (error == 32) {\n                        throw new ExchangeError (this.id + ' ' + this.json (response));\n                    } else if (error == 100) {\n                        throw new ExchangeError (this.id + ': Invalid parameters ' + this.json (response));\n                    } else if (error == 103) {\n                        throw new InvalidOrder (this.id + ': Invalid currency ' + this.json (response));\n                    } else if (error == 104) {\n                        throw new InvalidOrder (this.id + ': Invalid amount ' + this.json (response));\n                    } else if (error == 105) {\n                        throw new InvalidOrder (this.id + ': Unable to block funds ' + this.json (response));\n                    } else {\n                        throw new ExchangeError (this.id + ' ' + this.json (response));\n                    }\n                }\n            }\n            throw new ExchangeError (this.id + ' ' + body);\n        }\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('success' in response) {\n            if (!response['success']) {\n                throw new ExchangeError (this.id + ' error: ' + this.json (response));\n            }\n        }\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/livecoin.js\n// module id = 426\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class luno extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'luno',\n            'name': 'luno',\n            'countries': [ 'GB', 'SG', 'ZA' ],\n            'rateLimit': 10000,\n            'version': '1',\n            'hasCORS': false,\n            'hasFetchTickers': true,\n            'hasFetchOrder': true,\n            'has': {\n                'fetchTickers': true,\n                'fetchOrder': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766607-8c1a69d8-5ede-11e7-930c-540b5eb9be24.jpg',\n                'api': 'https://api.mybitx.com/api',\n                'www': 'https://www.luno.com',\n                'doc': [\n                    'https://www.luno.com/en/api',\n                    'https://npmjs.org/package/bitx',\n                    'https://github.com/bausmeier/node-bitx',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'orderbook',\n                        'ticker',\n                        'tickers',\n                        'trades',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'accounts/{id}/pending',\n                        'accounts/{id}/transactions',\n                        'balance',\n                        'fee_info',\n                        'funding_address',\n                        'listorders',\n                        'listtrades',\n                        'orders/{id}',\n                        'quotes/{id}',\n                        'withdrawals',\n                        'withdrawals/{id}',\n                    ],\n                    'post': [\n                        'accounts',\n                        'postorder',\n                        'marketorder',\n                        'stoporder',\n                        'funding_address',\n                        'withdrawals',\n                        'send',\n                        'quotes',\n                        'oauth2/grant',\n                    ],\n                    'put': [\n                        'quotes/{id}',\n                    ],\n                    'delete': [\n                        'quotes/{id}',\n                        'withdrawals/{id}',\n                    ],\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetTickers ();\n        let result = [];\n        for (let p = 0; p < markets['tickers'].length; p++) {\n            let market = markets['tickers'][p];\n            let id = market['pair'];\n            let base = id.slice (0, 3);\n            let quote = id.slice (3, 6);\n            base = this.commonCurrencyCode (base);\n            quote = this.commonCurrencyCode (quote);\n            let symbol = base + '/' + quote;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privateGetBalance ();\n        let balances = response['balance'];\n        let result = { 'info': response };\n        for (let b = 0; b < balances.length; b++) {\n            let balance = balances[b];\n            let currency = this.commonCurrencyCode (balance['asset']);\n            let reserved = parseFloat (balance['reserved']);\n            let unconfirmed = parseFloat (balance['unconfirmed']);\n            let account = {\n                'free': 0.0,\n                'used': this.sum (reserved, unconfirmed),\n                'total': parseFloat (balance['balance']),\n            };\n            account['free'] = account['total'] - account['used'];\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let orderbook = await this.publicGetOrderbook (this.extend ({\n            'pair': this.marketId (symbol),\n        }, params));\n        let timestamp = orderbook['timestamp'];\n        return this.parseOrderBook (orderbook, timestamp, 'bids', 'asks', 'price', 'volume');\n    }\n\n    parseOrder (order, market = undefined) {\n        let timestamp = order['creation_timestamp'];\n        let status = (order['state'] == 'PENDING') ? 'open' : 'closed';\n        let side = (order['type'] == 'ASK') ? 'sell' : 'buy';\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        let price = this.safeFloat (order, 'limit_price');\n        let amount = this.safeFloat (order, 'limit_volume');\n        let quoteFee = this.safeFloat (order, 'fee_counter');\n        let baseFee = this.safeFloat (order, 'fee_base');\n        let fee = { 'currency': undefined };\n        if (quoteFee) {\n            fee['side'] = 'quote';\n            fee['cost'] = quoteFee;\n        } else {\n            fee['side'] = 'base';\n            fee['cost'] = baseFee;\n        }\n        return {\n            'id': order['order_id'],\n            'datetime': this.iso8601 (timestamp),\n            'timestamp': timestamp,\n            'status': status,\n            'symbol': symbol,\n            'type': undefined,\n            'side': side,\n            'price': price,\n            'amount': amount,\n            'filled': undefined,\n            'remaining': undefined,\n            'trades': undefined,\n            'fee': fee,\n            'info': order,\n        };\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privateGetOrdersId (this.extend ({\n            'id': id,\n        }, params));\n        return this.parseOrder (response);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = ticker['timestamp'];\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': parseFloat (ticker['bid']),\n            'ask': parseFloat (ticker['ask']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last_trade']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['rolling_24_hour_volume']),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.publicGetTickers (params);\n        let tickers = this.indexBy (response['tickers'], 'pair');\n        let ids = Object.keys (tickers);\n        let result = {};\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            let market = this.markets_by_id[id];\n            let symbol = market['symbol'];\n            let ticker = tickers[id];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let ticker = await this.publicGetTicker (this.extend ({\n            'pair': market['id'],\n        }, params));\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market) {\n        let side = (trade['is_buy']) ? 'buy' : 'sell';\n        return {\n            'info': trade,\n            'id': undefined,\n            'order': undefined,\n            'timestamp': trade['timestamp'],\n            'datetime': this.iso8601 (trade['timestamp']),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': side,\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['volume']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetTrades (this.extend ({\n            'pair': market['id'],\n        }, params));\n        return this.parseTrades (response['trades'], market, since, limit);\n    }\n\n    async createOrder (market, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let method = 'privatePost';\n        let order = { 'pair': this.marketId (market) };\n        if (type == 'market') {\n            method += 'Marketorder';\n            order['type'] = side.toUpperCase ();\n            if (side == 'buy')\n                order['counter_volume'] = amount;\n            else\n                order['base_volume'] = amount;\n        } else {\n            method += 'Order';\n            order['volume'] = amount;\n            order['price'] = price;\n            if (side == 'buy')\n                order['type'] = 'BID';\n            else\n                order['type'] = 'ASK';\n        }\n        let response = await this[method] (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['order_id'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privatePostStoporder ({ 'order_id': id });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (Object.keys (query).length)\n            url += '?' + this.urlencode (query);\n        if (api == 'private') {\n            this.checkRequiredCredentials ();\n            let auth = this.encode (this.apiKey + ':' + this.secret);\n            auth = this.stringToBase64 (auth);\n            headers = { 'Authorization': 'Basic ' + this.decode (auth) };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('error' in response)\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/luno.js\n// module id = 427\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class mercado extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'mercado',\n            'name': 'Mercado Bitcoin',\n            'countries': 'BR', // Brazil\n            'rateLimit': 1000,\n            'version': 'v3',\n            'hasCORS': true,\n            'hasWithdraw': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27837060-e7c58714-60ea-11e7-9192-f05e86adb83f.jpg',\n                'api': {\n                    'public': 'https://www.mercadobitcoin.net/api',\n                    'private': 'https://www.mercadobitcoin.net/tapi',\n                },\n                'www': 'https://www.mercadobitcoin.com.br',\n                'doc': [\n                    'https://www.mercadobitcoin.com.br/api-doc',\n                    'https://www.mercadobitcoin.com.br/trade-api',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        '{coin}/orderbook/', // last slash critical\n                        '{coin}/ticker/',\n                        '{coin}/trades/',\n                        '{coin}/trades/{from}/',\n                        '{coin}/trades/{from}/{to}',\n                        '{coin}/day-summary/{year}/{month}/{day}/',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'cancel_order',\n                        'get_account_info',\n                        'get_order',\n                        'get_withdrawal',\n                        'list_system_messages',\n                        'list_orders',\n                        'list_orderbook',\n                        'place_buy_order',\n                        'place_sell_order',\n                        'withdraw_coin',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/BRL': { 'id': 'BRLBTC', 'symbol': 'BTC/BRL', 'base': 'BTC', 'quote': 'BRL', 'suffix': 'Bitcoin' },\n                'LTC/BRL': { 'id': 'BRLLTC', 'symbol': 'LTC/BRL', 'base': 'LTC', 'quote': 'BRL', 'suffix': 'Litecoin' },\n                'BCH/BRL': { 'id': 'BRLBCH', 'symbol': 'BCH/BRL', 'base': 'BCH', 'quote': 'BRL', 'suffix': 'BCash' },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.3 / 100,\n                    'taker': 0.7 / 100,\n                },\n            },\n        });\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let market = this.market (symbol);\n        let orderbook = await this.publicGetCoinOrderbook (this.extend ({\n            'coin': market['base'],\n        }, params));\n        return this.parseOrderBook (orderbook);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetCoinTicker (this.extend ({\n            'coin': market['base'],\n        }, params));\n        let ticker = response['ticker'];\n        let timestamp = parseInt (ticker['date']) * 1000;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['buy']),\n            'ask': parseFloat (ticker['sell']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['vol']),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = trade['date'] * 1000;\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'id': trade['tid'].toString (),\n            'order': undefined,\n            'type': undefined,\n            'side': trade['type'],\n            'price': trade['price'],\n            'amount': trade['amount'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetCoinTrades (this.extend ({\n            'coin': market['base'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        let response = await this.privatePostGetAccountInfo ();\n        let balances = response['response_data']['balance'];\n        let result = { 'info': response };\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let lowercase = currency.toLowerCase ();\n            let account = this.account ();\n            if (lowercase in balances) {\n                account['free'] = parseFloat (balances[lowercase]['available']);\n                account['total'] = parseFloat (balances[lowercase]['total']);\n                account['used'] = account['total'] - account['free'];\n            }\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type == 'market')\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        let method = 'privatePostPlace' + this.capitalize (side) + 'Order';\n        let order = {\n            'coin_pair': this.marketId (symbol),\n            'quantity': amount,\n            'limit_price': price,\n        };\n        let response = await this[method] (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['response_data']['order']['order_id'].toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        if (!symbol)\n            throw new ExchangeError (this.id + ' cancelOrder() requires a symbol argument');\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        return await this.privatePostCancelOrder (this.extend ({\n            'coin_pair': market['id'],\n            'order_id': id,\n        }, params));\n    }\n\n    parseOrder (order, market = undefined) {\n        let side = undefined;\n        if ('order_type' in order)\n            side = (order['order_type'] == 1) ? 'buy' : 'sell';\n        let status = order['status'];\n        let symbol = undefined;\n        if (!market) {\n            if ('coin_pair' in order)\n                if (order['coin_pair'] in this.markets_by_id)\n                    market = this.markets_by_id[order['coin_pair']];\n        }\n        if (market)\n            symbol = market['symbol'];\n        let timestamp = undefined;\n        if ('created_timestamp' in order)\n            timestamp = parseInt (order['created_timestamp']) * 1000;\n        if ('updated_timestamp' in order)\n            timestamp = parseInt (order['updated_timestamp']) * 1000;\n        let fee = {\n            'cost': parseFloat (order['fee']),\n            'currency': market['quote'],\n        };\n        let price = this.safeFloat (order, 'limit_price');\n        // price = this.safeFloat (order, 'executed_price_avg', price);\n        let average = this.safeFloat (order, 'executed_price_avg');\n        let amount = this.safeFloat (order, 'quantity');\n        let filled = this.safeFloat (order, 'executed_quantity');\n        let remaining = amount - filled;\n        let cost = amount * average;\n        let result = {\n            'info': order,\n            'id': order['order_id'].toString (),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'type': 'limit',\n            'side': side,\n            'price': price,\n            'cost': cost,\n            'average': average,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'status': status,\n            'fee': fee,\n        };\n        return result;\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        if (!symbol)\n            throw new ExchangeError (this.id + ' cancelOrder() requires a symbol argument');\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = undefined;\n        response = await this.privatePostGetOrder (this.extend ({\n            'coin_pair': market['id'],\n            'order_id': parseInt (id),\n        }, params));\n        return this.parseOrder (response['response_data']['order']);\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        await this.loadMarkets ();\n        let request = {\n            'coin': currency,\n            'quantity': amount.toFixed (10),\n            'address': address,\n        };\n        if (currency == 'BRL') {\n            let account_ref = ('account_ref' in params);\n            if (!account_ref)\n                throw new ExchangeError (this.id + ' requires account_ref parameter to withdraw ' + currency);\n        } else if (currency != 'LTC') {\n            let tx_fee = ('tx_fee' in params);\n            if (!tx_fee)\n                throw new ExchangeError (this.id + ' requires tx_fee parameter to withdraw ' + currency);\n        }\n        let response = await this.privatePostWithdrawCoin (this.extend (request, params));\n        return {\n            'info': response,\n            'id': response['response_data']['withdrawal']['id'],\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api] + '/';\n        if (api == 'public') {\n            url += this.implodeParams (path, params);\n        } else {\n            this.checkRequiredCredentials ();\n            url += this.version + '/';\n            let nonce = this.nonce ();\n            body = this.urlencode (this.extend ({\n                'tapi_method': path,\n                'tapi_nonce': nonce,\n            }, params));\n            let auth = '/tapi/' + this.version + '/' + '?' + body;\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'TAPI-ID': this.apiKey,\n                'TAPI-MAC': this.hmac (this.encode (auth), this.encode (this.secret), 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('error_message' in response)\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/mercado.js\n// module id = 428\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class mixcoins extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'mixcoins',\n            'name': 'MixCoins',\n            'countries': [ 'GB', 'HK' ],\n            'rateLimit': 1500,\n            'version': 'v1',\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/30237212-ed29303c-9535-11e7-8af8-fcd381cfa20c.jpg',\n                'api': 'https://mixcoins.com/api',\n                'www': 'https://mixcoins.com',\n                'doc': 'https://mixcoins.com/help/api/',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'ticker',\n                        'trades',\n                        'depth',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'cancel',\n                        'info',\n                        'orders',\n                        'order',\n                        'transactions',\n                        'trade',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/USD': { 'id': 'btc_usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'maker': 0.0015, 'taker': 0.0025 },\n                'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'maker': 0.001, 'taker': 0.0015 },\n                'BCH/BTC': { 'id': 'bcc_btc', 'symbol': 'BCH/BTC', 'base': 'BCH', 'quote': 'BTC', 'maker': 0.001, 'taker': 0.0015 },\n                'LSK/BTC': { 'id': 'lsk_btc', 'symbol': 'LSK/BTC', 'base': 'LSK', 'quote': 'BTC', 'maker': 0.0015, 'taker': 0.0025 },\n                'BCH/USD': { 'id': 'bcc_usd', 'symbol': 'BCH/USD', 'base': 'BCH', 'quote': 'USD', 'maker': 0.001, 'taker': 0.0015 },\n                'ETH/USD': { 'id': 'eth_usd', 'symbol': 'ETH/USD', 'base': 'ETH', 'quote': 'USD', 'maker': 0.001, 'taker': 0.0015 },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        let response = await this.privatePostInfo ();\n        let balance = response['result']['wallet'];\n        let result = { 'info': balance };\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let lowercase = currency.toLowerCase ();\n            let account = this.account ();\n            if (lowercase in balance) {\n                account['free'] = parseFloat (balance[lowercase]['avail']);\n                account['used'] = parseFloat (balance[lowercase]['lock']);\n                account['total'] = this.sum (account['free'], account['used']);\n            }\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let response = await this.publicGetDepth (this.extend ({\n            'market': this.marketId (symbol),\n        }, params));\n        return this.parseOrderBook (response['result']);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let response = await this.publicGetTicker (this.extend ({\n            'market': this.marketId (symbol),\n        }, params));\n        let ticker = response['result'];\n        let timestamp = this.milliseconds ();\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['buy']),\n            'ask': parseFloat (ticker['sell']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['vol']),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = parseInt (trade['date']) * 1000;\n        return {\n            'id': trade['id'].toString (),\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': undefined,\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['amount']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetTrades (this.extend ({\n            'market': market['id'],\n        }, params));\n        return this.parseTrades (response['result'], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        let order = {\n            'market': this.marketId (symbol),\n            'op': side,\n            'amount': amount,\n        };\n        if (type == 'market') {\n            order['order_type'] = 1;\n            order['price'] = price;\n        } else {\n            order['order_type'] = 0;\n        }\n        let response = await this.privatePostTrade (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['result']['id'].toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostCancel ({ 'id': id });\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version + '/' + path;\n        if (api == 'public') {\n            if (Object.keys (params).length)\n                url += '?' + this.urlencode (params);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            body = this.urlencode (this.extend ({\n                'nonce': nonce,\n            }, params));\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': this.apiKey,\n                'Sign': this.hmac (this.encode (body), this.secret, 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('status' in response)\n            if (response['status'] == 200)\n                return response;\n        throw new ExchangeError (this.id + ' ' + this.json (response));\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/mixcoins.js\n// module id = 429\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class nova extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'nova',\n            'name': 'Novaexchange',\n            'countries': 'TZ', // Tanzania\n            'rateLimit': 2000,\n            'version': 'v2',\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/30518571-78ca0bca-9b8a-11e7-8840-64b83a4a94b2.jpg',\n                'api': 'https://novaexchange.com/remote',\n                'www': 'https://novaexchange.com',\n                'doc': 'https://novaexchange.com/remote/faq',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'markets/',\n                        'markets/{basecurrency}/',\n                        'market/info/{pair}/',\n                        'market/orderhistory/{pair}/',\n                        'market/openorders/{pair}/buy/',\n                        'market/openorders/{pair}/sell/',\n                        'market/openorders/{pair}/both/',\n                        'market/openorders/{pair}/{ordertype}/',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'getbalances/',\n                        'getbalance/{currency}/',\n                        'getdeposits/',\n                        'getwithdrawals/',\n                        'getnewdepositaddress/{currency}/',\n                        'getdepositaddress/{currency}/',\n                        'myopenorders/',\n                        'myopenorders_market/{pair}/',\n                        'cancelorder/{orderid}/',\n                        'withdraw/{currency}/',\n                        'trade/{pair}/',\n                        'tradehistory/',\n                        'getdeposithistory/',\n                        'getwithdrawalhistory/',\n                        'walletstatus/',\n                        'walletstatus/{currency}/',\n                    ],\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let response = await this.publicGetMarkets ();\n        let markets = response['markets'];\n        let result = [];\n        for (let i = 0; i < markets.length; i++) {\n            let market = markets[i];\n            if (!market['disabled']) {\n                let id = market['marketname'];\n                let [ quote, base ] = id.split ('_');\n                let symbol = base + '/' + quote;\n                result.push ({\n                    'id': id,\n                    'symbol': symbol,\n                    'base': base,\n                    'quote': quote,\n                    'info': market,\n                });\n            }\n        }\n        return result;\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let orderbook = await this.publicGetMarketOpenordersPairBoth (this.extend ({\n            'pair': this.marketId (symbol),\n        }, params));\n        return this.parseOrderBook (orderbook, undefined, 'buyorders', 'sellorders', 'price', 'amount');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.publicGetMarketInfoPair (this.extend ({\n            'pair': this.marketId (symbol),\n        }, params));\n        let ticker = response['markets'][0];\n        let timestamp = this.milliseconds ();\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high24h']),\n            'low': parseFloat (ticker['low24h']),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'ask': this.safeFloat (ticker, 'ask'),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last_price']),\n            'change': parseFloat (ticker['change24h']),\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': undefined,\n            'quoteVolume': parseFloat (ticker['volume24h']),\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = trade['unix_t_datestamp'] * 1000;\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'id': undefined,\n            'order': undefined,\n            'type': undefined,\n            'side': trade['tradetype'].toLowerCase (),\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['amount']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetMarketOrderhistoryPair (this.extend ({\n            'pair': market['id'],\n        }, params));\n        return this.parseTrades (response['items'], market, since, limit);\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostGetbalances ();\n        let balances = response['balances'];\n        let result = { 'info': response };\n        for (let b = 0; b < balances.length; b++) {\n            let balance = balances[b];\n            let currency = balance['currency'];\n            let lockbox = parseFloat (balance['amount_lockbox']);\n            let trades = parseFloat (balance['amount_trades']);\n            let account = {\n                'free': parseFloat (balance['amount']),\n                'used': this.sum (lockbox, trades),\n                'total': parseFloat (balance['amount_total']),\n            };\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type == 'market')\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        await this.loadMarkets ();\n        amount = amount.toString ();\n        price = price.toString ();\n        let market = this.market (symbol);\n        let order = {\n            'tradetype': side.toUpperCase (),\n            'tradeamount': amount,\n            'tradeprice': price,\n            'tradebase': 1,\n            'pair': market['id'],\n        };\n        let response = await this.privatePostTradePair (this.extend (order, params));\n        return {\n            'info': response,\n            'id': undefined,\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostCancelorder (this.extend ({\n            'orderid': id,\n        }, params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version + '/';\n        if (api == 'private')\n            url += api + '/';\n        url += this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'public') {\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ().toString ();\n            url += '?' + this.urlencode ({ 'nonce': nonce });\n            let signature = this.hmac (this.encode (url), this.encode (this.secret), 'sha512', 'base64');\n            body = this.urlencode (this.extend ({\n                'apikey': this.apiKey,\n                'signature': signature,\n            }, query));\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('status' in response)\n            if (response['status'] != 'success')\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/nova.js\n// module id = 430\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst okcoinusd = require ('./okcoinusd.js')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class okcoincny extends okcoinusd {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'okcoincny',\n            'name': 'OKCoin CNY',\n            'countries': 'CN',\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766792-8be9157a-5ee5-11e7-926c-6d69b8d3378d.jpg',\n                'api': {\n                    'web': 'https://www.okcoin.cn',\n                    'public': 'https://www.okcoin.cn/pai',\n                    'private': 'https://www.okcoin.cn/api',\n                },\n                'www': 'https://www.okcoin.cn',\n                'doc': 'https://www.okcoin.cn/rest_getStarted.html',\n            },\n            'markets': {\n                'BTC/CNY': { 'id': 'btc_cny', 'symbol': 'BTC/CNY', 'base': 'BTC', 'quote': 'CNY', 'type': 'spot', 'spot': true, 'future': false },\n                'LTC/CNY': { 'id': 'ltc_cny', 'symbol': 'LTC/CNY', 'base': 'LTC', 'quote': 'CNY', 'type': 'spot', 'spot': true, 'future': false },\n                'ETH/CNY': { 'id': 'eth_cny', 'symbol': 'ETH/CNY', 'base': 'ETH', 'quote': 'CNY', 'type': 'spot', 'spot': true, 'future': false },\n                'ETC/CNY': { 'id': 'etc_cny', 'symbol': 'ETC/CNY', 'base': 'ETC', 'quote': 'CNY', 'type': 'spot', 'spot': true, 'future': false },\n                'BCH/CNY': { 'id': 'bcc_cny', 'symbol': 'BCH/CNY', 'base': 'BCH', 'quote': 'CNY', 'type': 'spot', 'spot': true, 'future': false },\n            },\n        });\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/okcoincny.js\n// module id = 431\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst okcoinusd = require ('./okcoinusd.js')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class okex extends okcoinusd {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'okex',\n            'name': 'OKEX',\n            'countries': [ 'CN', 'US' ],\n            'hasCORS': false,\n            'hasFutureMarkets': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/32552768-0d6dd3c6-c4a6-11e7-90f8-c043b64756a7.jpg',\n                'api': {\n                    'web': 'https://www.okex.com/v2',\n                    'public': 'https://www.okex.com/api',\n                    'private': 'https://www.okex.com/api',\n                },\n                'www': 'https://www.okex.com',\n                'doc': 'https://www.okex.com/rest_getStarted.html',\n            },\n        });\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/okex.js\n// module id = 432\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class paymium extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'paymium',\n            'name': 'Paymium',\n            'countries': [ 'FR', 'EU' ],\n            'rateLimit': 2000,\n            'version': 'v1',\n            'hasCORS': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27790564-a945a9d4-5ff9-11e7-9d2d-b635763f2f24.jpg',\n                'api': 'https://paymium.com/api',\n                'www': 'https://www.paymium.com',\n                'doc': [\n                    'https://github.com/Paymium/api-documentation',\n                    'https://www.paymium.com/page/developers',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'countries',\n                        'data/{id}/ticker',\n                        'data/{id}/trades',\n                        'data/{id}/depth',\n                        'bitcoin_charts/{id}/trades',\n                        'bitcoin_charts/{id}/depth',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'merchant/get_payment/{UUID}',\n                        'user',\n                        'user/addresses',\n                        'user/addresses/{btc_address}',\n                        'user/orders',\n                        'user/orders/{UUID}',\n                        'user/price_alerts',\n                    ],\n                    'post': [\n                        'user/orders',\n                        'user/addresses',\n                        'user/payment_requests',\n                        'user/price_alerts',\n                        'merchant/create_payment',\n                    ],\n                    'delete': [\n                        'user/orders/{UUID}/cancel',\n                        'user/price_alerts/{id}',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/EUR': { 'id': 'eur', 'symbol': 'BTC/EUR', 'base': 'BTC', 'quote': 'EUR' },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.0059,\n                    'taker': 0.0059,\n                },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        let balances = await this.privateGetUser ();\n        let result = { 'info': balances };\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let lowercase = currency.toLowerCase ();\n            let account = this.account ();\n            let balance = 'balance_' + lowercase;\n            let locked = 'locked_' + lowercase;\n            if (balance in balances)\n                account['free'] = balances[balance];\n            if (locked in balances)\n                account['used'] = balances[locked];\n            account['total'] = this.sum (account['free'], account['used']);\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let orderbook = await this.publicGetDataIdDepth (this.extend ({\n            'id': this.marketId (symbol),\n        }, params));\n        let result = this.parseOrderBook (orderbook, undefined, 'bids', 'asks', 'price', 'amount');\n        result['bids'] = this.sortBy (result['bids'], 0, true);\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let ticker = await this.publicGetDataIdTicker (this.extend ({\n            'id': this.marketId (symbol),\n        }, params));\n        let timestamp = ticker['at'] * 1000;\n        let vwap = parseFloat (ticker['vwap']);\n        let baseVolume = parseFloat (ticker['volume']);\n        let quoteVolume = baseVolume * vwap;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'bid'),\n            'ask': this.safeFloat (ticker, 'ask'),\n            'vwap': vwap,\n            'open': this.safeFloat (ticker, 'open'),\n            'close': undefined,\n            'first': undefined,\n            'last': this.safeFloat (ticker, 'price'),\n            'change': undefined,\n            'percentage': this.safeFloat (ticker, 'variation'),\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = parseInt (trade['created_at_int']) * 1000;\n        let volume = 'traded_' + market['base'].toLowerCase ();\n        return {\n            'info': trade,\n            'id': trade['uuid'],\n            'order': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': trade['side'],\n            'price': trade['price'],\n            'amount': trade[volume],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetDataIdTrades (this.extend ({\n            'id': market['id'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (market, type, side, amount, price = undefined, params = {}) {\n        let order = {\n            'type': this.capitalize (type) + 'Order',\n            'currency': this.marketId (market),\n            'direction': side,\n            'amount': amount,\n        };\n        if (type == 'market')\n            order['price'] = price;\n        let response = await this.privatePostUserOrders (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['uuid'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostCancelOrder (this.extend ({\n            'orderNumber': id,\n        }, params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'public') {\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            body = this.json (params);\n            let nonce = this.nonce ().toString ();\n            let auth = nonce + url + body;\n            headers = {\n                'Api-Key': this.apiKey,\n                'Api-Signature': this.hmac (this.encode (auth), this.secret),\n                'Api-Nonce': nonce,\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('errors' in response)\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/paymium.js\n// module id = 433\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, InsufficientFunds, OrderNotFound, OrderNotCached } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class poloniex extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'poloniex',\n            'name': 'Poloniex',\n            'countries': 'US',\n            'rateLimit': 1000, // up to 6 calls per second\n            'hasCORS': true,\n            // obsolete metainfo interface\n            'hasFetchMyTrades': true,\n            'hasFetchOrder': true,\n            'hasFetchOrders': true,\n            'hasFetchOpenOrders': true,\n            'hasFetchClosedOrders': true,\n            'hasFetchTickers': true,\n            'hasFetchCurrencies': true,\n            'hasWithdraw': true,\n            'hasFetchOHLCV': true,\n            // new metainfo interface\n            'has': {\n                'fetchOHLCV': true,\n                'fetchMyTrades': true,\n                'fetchOrder': 'emulated',\n                'fetchOrders': 'emulated',\n                'fetchOpenOrders': true,\n                'fetchClosedOrders': 'emulated',\n                'fetchTickers': true,\n                'fetchCurrencies': true,\n                'withdraw': true,\n            },\n            'timeframes': {\n                '5m': 300,\n                '15m': 900,\n                '30m': 1800,\n                '2h': 7200,\n                '4h': 14400,\n                '1d': 86400,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766817-e9456312-5ee6-11e7-9b3c-b628ca5626a5.jpg',\n                'api': {\n                    'public': 'https://poloniex.com/public',\n                    'private': 'https://poloniex.com/tradingApi',\n                },\n                'www': 'https://poloniex.com',\n                'doc': [\n                    'https://poloniex.com/support/api/',\n                    'http://pastebin.com/dMX7mZE0',\n                ],\n                'fees': 'https://poloniex.com/fees',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'return24hVolume',\n                        'returnChartData',\n                        'returnCurrencies',\n                        'returnLoanOrders',\n                        'returnOrderBook',\n                        'returnTicker',\n                        'returnTradeHistory',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'buy',\n                        'cancelLoanOffer',\n                        'cancelOrder',\n                        'closeMarginPosition',\n                        'createLoanOffer',\n                        'generateNewAddress',\n                        'getMarginPosition',\n                        'marginBuy',\n                        'marginSell',\n                        'moveOrder',\n                        'returnActiveLoans',\n                        'returnAvailableAccountBalances',\n                        'returnBalances',\n                        'returnCompleteBalances',\n                        'returnDepositAddresses',\n                        'returnDepositsWithdrawals',\n                        'returnFeeInfo',\n                        'returnLendingHistory',\n                        'returnMarginAccountSummary',\n                        'returnOpenLoanOffers',\n                        'returnOpenOrders',\n                        'returnOrderTrades',\n                        'returnTradableBalances',\n                        'returnTradeHistory',\n                        'sell',\n                        'toggleAutoRenew',\n                        'transferBalance',\n                        'withdraw',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.0015,\n                    'taker': 0.0025,\n                },\n                'funding': 0.0,\n            },\n            'limits': {\n                'amount': {\n                    'min': 0.00000001,\n                    'max': 1000000000,\n                },\n                'price': {\n                    'min': 0.00000001,\n                    'max': 1000000000,\n                },\n                'cost': {\n                    'min': 0.00000000,\n                    'max': 1000000000,\n                },\n            },\n            'precision': {\n                'amount': 8,\n                'price': 8,\n            },\n        });\n    }\n\n    calculateFee (symbol, type, side, amount, price, takerOrMaker = 'taker', params = {}) {\n        let market = this.markets[symbol];\n        let key = 'quote';\n        let rate = market[takerOrMaker];\n        let cost = parseFloat (this.costToPrecision (symbol, amount * rate));\n        if (side == 'sell') {\n            cost *= price;\n        } else {\n            key = 'base';\n        }\n        return {\n            'type': takerOrMaker,\n            'currency': market[key],\n            'rate': rate,\n            'cost': parseFloat (this.feeToPrecision (symbol, cost)),\n        };\n    }\n\n    commonCurrencyCode (currency) {\n        if (currency == 'BTM')\n            return 'Bitmark';\n        if (currency == 'STR')\n            return 'XLM';\n        return currency;\n    }\n\n    currencyId (currency) {\n        if (currency == 'Bitmark')\n            return 'BTM';\n        if (currency == 'XLM')\n            return 'STR';\n        return currency;\n    }\n\n    parseOHLCV (ohlcv, market = undefined, timeframe = '5m', since = undefined, limit = undefined) {\n        return [\n            ohlcv['date'] * 1000,\n            ohlcv['open'],\n            ohlcv['high'],\n            ohlcv['low'],\n            ohlcv['close'],\n            ohlcv['volume'],\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '5m', since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        if (!since)\n            since = 0;\n        let request = {\n            'currencyPair': market['id'],\n            'period': this.timeframes[timeframe],\n            'start': parseInt (since / 1000),\n        };\n        if (limit)\n            request['end'] = this.sum (request['start'], limit * this.timeframes[timeframe]);\n        let response = await this.publicGetReturnChartData (this.extend (request, params));\n        return this.parseOHLCVs (response, market, timeframe, since, limit);\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetReturnTicker ();\n        let keys = Object.keys (markets);\n        let result = [];\n        for (let p = 0; p < keys.length; p++) {\n            let id = keys[p];\n            let market = markets[id];\n            let [ quote, base ] = id.split ('_');\n            base = this.commonCurrencyCode (base);\n            quote = this.commonCurrencyCode (quote);\n            let symbol = base + '/' + quote;\n            result.push (this.extend (this.fees['trading'], {\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'active': true,\n                'lot': this.limits['amount']['min'],\n                'info': market,\n            }));\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let balances = await this.privatePostReturnCompleteBalances (this.extend ({\n            'account': 'all',\n        }, params));\n        let result = { 'info': balances };\n        let currencies = Object.keys (balances);\n        for (let c = 0; c < currencies.length; c++) {\n            let id = currencies[c];\n            let balance = balances[id];\n            let currency = this.commonCurrencyCode (id);\n            let account = {\n                'free': parseFloat (balance['available']),\n                'used': parseFloat (balance['onOrders']),\n                'total': 0.0,\n            };\n            account['total'] = this.sum (account['free'], account['used']);\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchFees (params = {}) {\n        await this.loadMarkets ();\n        let fees = await this.privatePostReturnFeeInfo ();\n        return {\n            'info': fees,\n            'maker': parseFloat (fees['makerFee']),\n            'taker': parseFloat (fees['takerFee']),\n            'withdraw': 0.0,\n        };\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let orderbook = await this.publicGetReturnOrderBook (this.extend ({\n            'currencyPair': this.marketId (symbol),\n        }, params));\n        return this.parseOrderBook (orderbook);\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high24hr']),\n            'low': parseFloat (ticker['low24hr']),\n            'bid': parseFloat (ticker['highestBid']),\n            'ask': parseFloat (ticker['lowestAsk']),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': parseFloat (ticker['percentChange']),\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['quoteVolume']),\n            'quoteVolume': parseFloat (ticker['baseVolume']),\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let tickers = await this.publicGetReturnTicker (params);\n        let ids = Object.keys (tickers);\n        let result = {};\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            let market = this.markets_by_id[id];\n            let symbol = market['symbol'];\n            let ticker = tickers[id];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchCurrencies (params = {}) {\n        let currencies = await this.publicGetReturnCurrencies (params);\n        let ids = Object.keys (currencies);\n        let result = {};\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            let currency = currencies[id];\n            // todo: will need to rethink the fees\n            // to add support for multiple withdrawal/deposit methods and\n            // differentiated fees for each particular method\n            let precision = 8; // default precision, todo: fix \"magic constants\"\n            let code = this.commonCurrencyCode (id);\n            let active = (currency['delisted'] == 0);\n            let status = (currency['disabled']) ? 'disabled' : 'ok';\n            if (status != 'ok')\n                active = false;\n            result[code] = {\n                'id': id,\n                'code': code,\n                'info': currency,\n                'name': currency['name'],\n                'active': active,\n                'status': status,\n                'fee': currency['txFee'], // todo: redesign\n                'precision': precision,\n                'limits': {\n                    'amount': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'price': {\n                        'min': Math.pow (10, -precision),\n                        'max': Math.pow (10, precision),\n                    },\n                    'cost': {\n                        'min': undefined,\n                        'max': undefined,\n                    },\n                    'withdraw': {\n                        'min': currency['txFee'],\n                        'max': Math.pow (10, precision),\n                    },\n                },\n            };\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let tickers = await this.publicGetReturnTicker (params);\n        let ticker = tickers[market['id']];\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        let timestamp = this.parse8601 (trade['date']);\n        let symbol = undefined;\n        if ((!market) && ('currencyPair' in trade))\n            market = this.markets_by_id[trade['currencyPair']];\n        if (market)\n            symbol = market['symbol'];\n        let side = trade['type'];\n        let fee = undefined;\n        let cost = this.safeFloat (trade, 'total');\n        let amount = parseFloat (trade['amount']);\n        if ('fee' in trade) {\n            let rate = parseFloat (trade['fee']);\n            let feeCost = undefined;\n            let currency = undefined;\n            if (side == 'buy') {\n                currency = market['base'];\n                feeCost = amount * rate;\n            } else {\n                currency = market['quote'];\n                if (typeof cost != 'undefined')\n                    feeCost = cost * rate;\n            }\n            fee = {\n                'type': undefined,\n                'rate': rate,\n                'cost': feeCost,\n                'currency': currency,\n            };\n        }\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': symbol,\n            'id': this.safeString (trade, 'tradeID'),\n            'order': this.safeString (trade, 'orderNumber'),\n            'type': 'limit',\n            'side': side,\n            'price': parseFloat (trade['rate']),\n            'amount': amount,\n            'cost': cost,\n            'fee': fee,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let request = {\n            'currencyPair': market['id'],\n        };\n        if (since) {\n            request['start'] = parseInt (since / 1000);\n            request['end'] = this.seconds (); // last 50000 trades by default\n        }\n        let trades = await this.publicGetReturnTradeHistory (this.extend (request, params));\n        return this.parseTrades (trades, market, since, limit);\n    }\n\n    async fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol)\n            market = this.market (symbol);\n        let pair = market ? market['id'] : 'all';\n        let request = { 'currencyPair': pair };\n        if (since) {\n            request['start'] = parseInt (since / 1000);\n            request['end'] = this.seconds ();\n        }\n        // limit is disabled (does not really work as expected)\n        // if (limit)\n        //     request['limit'] = parseInt (limit);\n        let response = await this.privatePostReturnTradeHistory (this.extend (request, params));\n        let result = [];\n        if (market) {\n            result = this.parseTrades (response, market);\n        } else {\n            if (response) {\n                let ids = Object.keys (response);\n                for (let i = 0; i < ids.length; i++) {\n                    let id = ids[i];\n                    let market = this.markets_by_id[id];\n                    let symbol = market['symbol'];\n                    let trades = this.parseTrades (response[id], market);\n                    for (let j = 0; j < trades.length; j++) {\n                        result.push (trades[j]);\n                    }\n                }\n            }\n        }\n        return this.filterBySinceLimit (result, since, limit);\n    }\n\n    parseOrder (order, market = undefined) {\n        let timestamp = this.safeInteger (order, 'timestamp');\n        if (!timestamp)\n            timestamp = this.parse8601 (order['date']);\n        let trades = undefined;\n        if ('resultingTrades' in order)\n            trades = this.parseTrades (order['resultingTrades'], market);\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        let price = parseFloat (order['price']);\n        let cost = this.safeFloat (order, 'total', 0.0);\n        let remaining = this.safeFloat (order, 'amount');\n        let amount = this.safeFloat (order, 'startingAmount', remaining);\n        let filled = amount - remaining;\n        return {\n            'info': order,\n            'id': order['orderNumber'],\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'status': order['status'],\n            'symbol': symbol,\n            'type': order['type'],\n            'side': order['side'],\n            'price': price,\n            'cost': cost,\n            'amount': amount,\n            'filled': filled,\n            'remaining': remaining,\n            'trades': trades,\n            'fee': undefined,\n        };\n    }\n\n    parseOpenOrders (orders, market, result = []) {\n        for (let i = 0; i < orders.length; i++) {\n            let order = orders[i];\n            let extended = this.extend (order, {\n                'status': 'open',\n                'type': 'limit',\n                'side': order['type'],\n                'price': order['rate'],\n            });\n            result.push (this.parseOrder (extended, market));\n        }\n        return result;\n    }\n\n    async fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        if (symbol)\n            market = this.market (symbol);\n        let pair = market ? market['id'] : 'all';\n        let response = await this.privatePostReturnOpenOrders (this.extend ({\n            'currencyPair': pair,\n        }));\n        let openOrders = [];\n        if (market) {\n            openOrders = this.parseOpenOrders (response, market, openOrders);\n        } else {\n            let marketIds = Object.keys (response);\n            for (let i = 0; i < marketIds.length; i++) {\n                let marketId = marketIds[i];\n                let orders = response[marketId];\n                let m = this.markets_by_id[marketId];\n                openOrders = this.parseOpenOrders (orders, m, openOrders);\n            }\n        }\n        for (let j = 0; j < openOrders.length; j++) {\n            this.orders[openOrders[j]['id']] = openOrders[j];\n        }\n        let openOrdersIndexedById = this.indexBy (openOrders, 'id');\n        let cachedOrderIds = Object.keys (this.orders);\n        let result = [];\n        for (let k = 0; k < cachedOrderIds.length; k++) {\n            let id = cachedOrderIds[k];\n            if (id in openOrdersIndexedById) {\n                this.orders[id] = this.extend (this.orders[id], openOrdersIndexedById[id]);\n            } else {\n                let order = this.orders[id];\n                if (order['status'] == 'open') {\n                    this.orders[id] = this.extend (order, {\n                        'status': 'closed',\n                        'cost': order['amount'] * order['price'],\n                        'filled': order['amount'],\n                        'remaining': 0.0,\n                    });\n                }\n            }\n            let order = this.orders[id];\n            if (market) {\n                if (order['symbol'] == symbol)\n                    result.push (order);\n            } else {\n                result.push (order);\n            }\n        }\n        return this.filterBySinceLimit (result, since, limit);\n    }\n\n    async fetchOrder (id, symbol = undefined, params = {}) {\n        let since = this.safeValue (params, 'since');\n        let limit = this.safeValue (params, 'limit');\n        let request = this.omit (params, [ 'since', 'limit' ]);\n        let orders = await this.fetchOrders (symbol, since, limit, request);\n        for (let i = 0; i < orders.length; i++) {\n            if (orders[i]['id'] == id)\n                return orders[i];\n        }\n        throw new OrderNotCached (this.id + ' order id ' + id.toString () + ' not found in cache');\n    }\n\n    filterOrdersByStatus (orders, status) {\n        let result = [];\n        for (let i = 0; i < orders.length; i++) {\n            if (orders[i]['status'] == status)\n                result.push (orders[i]);\n        }\n        return result;\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        let orders = await this.fetchOrders (symbol, since, limit, params);\n        return this.filterOrdersByStatus (orders, 'open');\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        let orders = await this.fetchOrders (symbol, since, limit, params);\n        return this.filterOrdersByStatus (orders, 'closed');\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        if (type == 'market')\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        await this.loadMarkets ();\n        let method = 'privatePost' + this.capitalize (side);\n        let market = this.market (symbol);\n        price = parseFloat (price);\n        amount = parseFloat (amount);\n        let response = await this[method] (this.extend ({\n            'currencyPair': market['id'],\n            'rate': this.priceToPrecision (symbol, price),\n            'amount': this.amountToPrecision (symbol, amount),\n        }, params));\n        let timestamp = this.milliseconds ();\n        let order = this.parseOrder (this.extend ({\n            'timestamp': timestamp,\n            'status': 'open',\n            'type': type,\n            'side': side,\n            'price': price,\n            'amount': amount,\n        }, response), market);\n        let id = order['id'];\n        this.orders[id] = order;\n        return this.extend ({ 'info': response }, order);\n    }\n\n    async editOrder (id, symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        price = parseFloat (price);\n        amount = parseFloat (amount);\n        let request = {\n            'orderNumber': id,\n            'rate': this.priceToPrecision (symbol, price),\n            'amount': this.amountToPrecision (symbol, amount),\n        };\n        let response = await this.privatePostMoveOrder (this.extend (request, params));\n        let result = undefined;\n        if (id in this.orders) {\n            this.orders[id]['status'] = 'canceled';\n            let newid = response['orderNumber'];\n            this.orders[newid] = this.extend (this.orders[id], {\n                'id': newid,\n                'price': price,\n                'amount': amount,\n                'status': 'open',\n            });\n            result = this.extend (this.orders[newid], { 'info': response });\n        } else {\n            result = {\n                'info': response,\n                'id': response['orderNumber'],\n            };\n        }\n        return result;\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = undefined;\n        try {\n            response = await this.privatePostCancelOrder (this.extend ({\n                'orderNumber': id,\n            }, params));\n            if (id in this.orders)\n                this.orders[id]['status'] = 'canceled';\n        } catch (e) {\n            if (this.last_http_response) {\n                if (this.last_http_response.indexOf ('Invalid order') >= 0)\n                    throw new OrderNotFound (this.id + ' cancelOrder() error: ' + this.last_http_response);\n            }\n            throw e;\n        }\n        return response;\n    }\n\n    async fetchOrderStatus (id, symbol = undefined) {\n        await this.loadMarkets ();\n        let orders = await this.fetchOpenOrders (symbol);\n        let indexed = this.indexBy (orders, 'id');\n        return (id in indexed) ? 'open' : 'closed';\n    }\n\n    async fetchOrderTrades (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        let trades = await this.privatePostReturnOrderTrades (this.extend ({\n            'orderNumber': id,\n        }, params));\n        return this.parseTrades (trades);\n    }\n\n    async createDepositAddress (currency, params = {}) {\n        let currencyId = this.currencyId (currency);\n        let response = await this.privatePostGenerateNewAddress ({\n            'currency': currencyId\n        });\n        let address = undefined;\n        if (response['success'] == 1)\n            address = this.safeString (response, 'response');\n        if (!address)\n            throw new ExchangeError (this.id + ' createDepositAddress failed: ' + this.last_http_response);\n        return {\n            'currency': currency,\n            'address': address,\n            'status': 'ok',\n            'info': response,\n        };\n    }\n\n    async fetchDepositAddress (currency, params = {}) {\n        let response = await this.privatePostReturnDepositAddresses ();\n        let currencyId = this.currencyId (currency);\n        let address = this.safeString (response, currencyId);\n        let status = address ? 'ok' : 'none';\n        return {\n            'currency': currency,\n            'address': address,\n            'status': status,\n            'info': response,\n        };\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        await this.loadMarkets ();\n        let currencyId = this.currencyId (currency);\n        let result = await this.privatePostWithdraw (this.extend ({\n            'currency': currencyId,\n            'amount': amount,\n            'address': address,\n        }, params));\n        return {\n            'info': result,\n            'id': result['response'],\n        };\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api];\n        let query = this.extend ({ 'command': path }, params);\n        if (api == 'public') {\n            url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            query['nonce'] = this.nonce ();\n            body = this.urlencode (query);\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': this.apiKey,\n                'Sign': this.hmac (this.encode (body), this.encode (this.secret), 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('error' in response) {\n            let error = this.id + ' ' + this.json (response);\n            let failed = response['error'].indexOf ('Not enough') >= 0;\n            if (failed)\n                throw new InsufficientFunds (error);\n            throw new ExchangeError (error);\n        }\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/poloniex.js\n// module id = 434\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, AuthenticationError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class quadrigacx extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'quadrigacx',\n            'name': 'QuadrigaCX',\n            'countries': 'CA',\n            'rateLimit': 1000,\n            'version': 'v2',\n            'hasCORS': true,\n            // obsolete metainfo interface\n            'hasWithdraw': true,\n            // new metainfo interface\n            'has': {\n                'withdraw': true,\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766825-98a6d0de-5ee7-11e7-9fa4-38e11a2c6f52.jpg',\n                'api': 'https://api.quadrigacx.com',\n                'www': 'https://www.quadrigacx.com',\n                'doc': 'https://www.quadrigacx.com/api_info',\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n                'uid': true,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'order_book',\n                        'ticker',\n                        'transactions',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'balance',\n                        'bitcoin_deposit_address',\n                        'bitcoin_withdrawal',\n                        'buy',\n                        'cancel_order',\n                        'ether_deposit_address',\n                        'ether_withdrawal',\n                        'lookup_order',\n                        'open_orders',\n                        'sell',\n                        'user_transactions',\n                    ],\n                },\n            },\n            'markets': {\n                'BTC/CAD': { 'id': 'btc_cad', 'symbol': 'BTC/CAD', 'base': 'BTC', 'quote': 'CAD', 'maker': 0.005, 'taker': 0.005 },\n                'BTC/USD': { 'id': 'btc_usd', 'symbol': 'BTC/USD', 'base': 'BTC', 'quote': 'USD', 'maker': 0.005, 'taker': 0.005 },\n                'ETH/BTC': { 'id': 'eth_btc', 'symbol': 'ETH/BTC', 'base': 'ETH', 'quote': 'BTC', 'maker': 0.002, 'taker': 0.002 },\n                'ETH/CAD': { 'id': 'eth_cad', 'symbol': 'ETH/CAD', 'base': 'ETH', 'quote': 'CAD', 'maker': 0.005, 'taker': 0.005 },\n                'LTC/CAD': { 'id': 'ltc_cad', 'symbol': 'LTC/CAD', 'base': 'LTC', 'quote': 'CAD', 'maker': 0.005, 'taker': 0.005 },\n                'BCH/CAD': { 'id': 'btc_cad', 'symbol': 'BCH/CAD', 'base': 'BCH', 'quote': 'CAD', 'maker': 0.005, 'taker': 0.005 },\n                'BTG/CAD': { 'id': 'btg_cad', 'symbol': 'BTG/CAD', 'base': 'BTG', 'quote': 'CAD', 'maker': 0.005, 'taker': 0.005 },\n            },\n        });\n    }\n\n    async fetchBalance (params = {}) {\n        let balances = await this.privatePostBalance ();\n        let result = { 'info': balances };\n        let currencies = Object.keys (this.currencies);\n        for (let i = 0; i < currencies.length; i++) {\n            let currency = currencies[i];\n            let lowercase = currency.toLowerCase ();\n            let account = {\n                'free': parseFloat (balances[lowercase + '_available']),\n                'used': parseFloat (balances[lowercase + '_reserved']),\n                'total': parseFloat (balances[lowercase + '_balance']),\n            };\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        let orderbook = await this.publicGetOrderBook (this.extend ({\n            'book': this.marketId (symbol),\n        }, params));\n        let timestamp = parseInt (orderbook['timestamp']) * 1000;\n        return this.parseOrderBook (orderbook, timestamp);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        let ticker = await this.publicGetTicker (this.extend ({\n            'book': this.marketId (symbol),\n        }, params));\n        let timestamp = parseInt (ticker['timestamp']) * 1000;\n        let vwap = parseFloat (ticker['vwap']);\n        let baseVolume = parseFloat (ticker['volume']);\n        let quoteVolume = baseVolume * vwap;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['bid']),\n            'ask': parseFloat (ticker['ask']),\n            'vwap': vwap,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = parseInt (trade['date']) * 1000;\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'id': trade['tid'].toString (),\n            'order': undefined,\n            'type': undefined,\n            'side': trade['side'],\n            'price': parseFloat (trade['price']),\n            'amount': parseFloat (trade['amount']),\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        let market = this.market (symbol);\n        let response = await this.publicGetTransactions (this.extend ({\n            'book': market['id'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        let method = 'privatePost' + this.capitalize (side);\n        let order = {\n            'amount': amount,\n            'book': this.marketId (symbol),\n        };\n        if (type == 'limit')\n            order['price'] = price;\n        let response = await this[method] (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['id'].toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostCancelOrder (this.extend ({\n            'id': id,\n        }, params));\n    }\n\n    async fetchDepositAddress (currency, params = {}) {\n        let method = 'privatePost' + this.getCurrencyName (currency) + 'DepositAddress';\n        let response = await this[method] (params);\n        let address = undefined;\n        let status = undefined;\n        // [E|e]rror\n        if (response.indexOf ('rror') >= 0) {\n            status = 'error';\n        } else {\n            address = response;\n            status = 'ok';\n        }\n        return {\n            'currency': currency,\n            'address': address,\n            'status': status,\n            'info': this.last_http_response,\n        };\n    }\n\n    getCurrencyName (currency) {\n        if (currency == 'ETH')\n            return 'Ether';\n        if (currency == 'BTC')\n            return 'Bitcoin';\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        await this.loadMarkets ();\n        let request = {\n            'amount': amount,\n            'address': address\n        };\n        let method = 'privatePost' + this.getCurrencyName (currency) + 'Withdrawal';\n        let response = await this[method] (this.extend (request, params));\n        return {\n            'info': response,\n            'id': undefined,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version + '/' + path;\n        if (api == 'public') {\n            url += '?' + this.urlencode (params);\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            let request = [ nonce.toString (), this.uid, this.apiKey ].join ('');\n            let signature = this.hmac (this.encode (request), this.encode (this.secret));\n            let query = this.extend ({\n                'key': this.apiKey,\n                'nonce': nonce,\n                'signature': signature,\n            }, params);\n            body = this.json (query);\n            headers = {\n                'Content-Type': 'application/json',\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if (typeof response == 'string')\n            return response;\n        if ('error' in response)\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/quadrigacx.js\n// module id = 435\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst qryptos = require ('./qryptos.js')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class quoine extends qryptos {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'quoine',\n            'name': 'QUOINE',\n            'countries': [ 'JP', 'SG', 'VN' ],\n            'version': '2',\n            'rateLimit': 1000,\n            'hasFetchTickers': true,\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766844-9615a4e8-5ee8-11e7-8814-fcd004db8cdd.jpg',\n                'api': 'https://api.quoine.com',\n                'www': 'https://www.quoine.com',\n                'doc': 'https://developers.quoine.com',\n            },\n        });\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/quoine.js\n// module id = 436\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class southxchange extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'southxchange',\n            'name': 'SouthXchange',\n            'countries': 'AR', // Argentina\n            'rateLimit': 1000,\n            'hasFetchTickers': true,\n            'hasCORS': false,\n            'hasWithdraw': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27838912-4f94ec8a-60f6-11e7-9e5d-bbf9bd50a559.jpg',\n                'api': 'https://www.southxchange.com/api',\n                'www': 'https://www.southxchange.com',\n                'doc': 'https://www.southxchange.com/Home/Api',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'markets',\n                        'price/{symbol}',\n                        'prices',\n                        'book/{symbol}',\n                        'trades/{symbol}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'cancelMarketOrders',\n                        'cancelOrder',\n                        'generatenewaddress',\n                        'listOrders',\n                        'listBalances',\n                        'placeOrder',\n                        'withdraw',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'maker': 0.2 / 100,\n                    'taker': 0.2 / 100,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetMarkets ();\n        let result = [];\n        for (let p = 0; p < markets.length; p++) {\n            let market = markets[p];\n            let base = market[0];\n            let quote = market[1];\n            let symbol = base + '/' + quote;\n            let id = symbol;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let balances = await this.privatePostListBalances ();\n        if (!balances)\n            throw new ExchangeError (this.id + ' fetchBalance got an unrecognized response');\n        let result = { 'info': balances };\n        for (let b = 0; b < balances.length; b++) {\n            let balance = balances[b];\n            let currency = balance['Currency'];\n            let uppercase = currency.toUpperCase ();\n            let free = parseFloat (balance['Available']);\n            let used = parseFloat (balance['Unconfirmed']);\n            let total = this.sum (free, used);\n            let account = {\n                'free': free,\n                'used': used,\n                'total': total,\n            };\n            result[uppercase] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let orderbook = await this.publicGetBookSymbol (this.extend ({\n            'symbol': this.marketId (symbol),\n        }, params));\n        return this.parseOrderBook (orderbook, undefined, 'BuyOrders', 'SellOrders', 'Price', 'Amount');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': undefined,\n            'low': undefined,\n            'bid': this.safeFloat (ticker, 'Bid'),\n            'ask': this.safeFloat (ticker, 'Ask'),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': this.safeFloat (ticker, 'Last'),\n            'change': this.safeFloat (ticker, 'Variation24Hr'),\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': this.safeFloat (ticker, 'Volume24Hr'),\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.publicGetPrices (params);\n        let tickers = this.indexBy (response, 'Market');\n        let ids = Object.keys (tickers);\n        let result = {};\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            let symbol = id;\n            let market = undefined;\n            if (id in this.markets_by_id) {\n                market = this.markets_by_id[id];\n                symbol = market['symbol'];\n            }\n            let ticker = tickers[id];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let ticker = await this.publicGetPriceSymbol (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = trade['At'] * 1000;\n        return {\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'id': undefined,\n            'order': undefined,\n            'type': undefined,\n            'side': trade['Type'],\n            'price': trade['Price'],\n            'amount': trade['Amount'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetTradesSymbol (this.extend ({\n            'symbol': market['id'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let order = {\n            'listingCurrency': market['base'],\n            'referenceCurrency': market['quote'],\n            'type': side,\n            'amount': amount,\n        };\n        if (type == 'limit')\n            order['limitPrice'] = price;\n        let response = await this.privatePostPlaceOrder (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response.toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privatePostCancelOrder (this.extend ({\n            'orderCode': id,\n        }, params));\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        let response = await this.privatePostWithdraw (this.extend ({\n            'currency': currency,\n            'address': address,\n            'amount': amount,\n        }, params));\n        return {\n            'info': response,\n            'id': undefined,\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'private') {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            query = this.extend ({\n                'key': this.apiKey,\n                'nonce': nonce,\n            }, query);\n            body = this.json (query);\n            headers = {\n                'Content-Type': 'application/json',\n                'Hash': this.hmac (this.encode (body), this.encode (this.secret), 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/southxchange.js\n// module id = 437\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst foxbit = require ('./foxbit.js')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class surbitcoin extends foxbit {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'surbitcoin',\n            'name': 'SurBitcoin',\n            'countries': 'VE',\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27991511-f0a50194-6481-11e7-99b5-8f02932424cc.jpg',\n                'api': {\n                    'public': 'https://api.blinktrade.com/api',\n                    'private': 'https://api.blinktrade.com/tapi',\n                },\n                'www': 'https://surbitcoin.com',\n                'doc': 'https://blinktrade.com/docs',\n            },\n        });\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/surbitcoin.js\n// module id = 438\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class therock extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'therock',\n            'name': 'TheRockTrading',\n            'countries': 'MT',\n            'rateLimit': 1000,\n            'version': 'v1',\n            'hasCORS': false,\n            'hasFetchTickers': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766869-75057fa2-5ee9-11e7-9a6f-13e641fa4707.jpg',\n                'api': 'https://api.therocktrading.com',\n                'www': 'https://therocktrading.com',\n                'doc': [\n                    'https://api.therocktrading.com/doc/v1/index.html',\n                    'https://api.therocktrading.com/doc/',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'funds/{id}/orderbook',\n                        'funds/{id}/ticker',\n                        'funds/{id}/trades',\n                        'funds/tickers',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'balances',\n                        'balances/{id}',\n                        'discounts',\n                        'discounts/{id}',\n                        'funds',\n                        'funds/{id}',\n                        'funds/{id}/trades',\n                        'funds/{fund_id}/orders',\n                        'funds/{fund_id}/orders/{id}',\n                        'funds/{fund_id}/position_balances',\n                        'funds/{fund_id}/positions',\n                        'funds/{fund_id}/positions/{id}',\n                        'transactions',\n                        'transactions/{id}',\n                        'withdraw_limits/{id}',\n                        'withdraw_limits',\n                    ],\n                    'post': [\n                        'atms/withdraw',\n                        'funds/{fund_id}/orders',\n                    ],\n                    'delete': [\n                        'funds/{fund_id}/orders/{id}',\n                        'funds/{fund_id}/orders/remove_all',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.02 / 100,\n                    'taker': 0.2 / 100,\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetFundsTickers ();\n        let result = [];\n        for (let p = 0; p < markets['tickers'].length; p++) {\n            let market = markets['tickers'][p];\n            let id = market['fund_id'];\n            let base = id.slice (0, 3);\n            let quote = id.slice (3, 6);\n            let symbol = base + '/' + quote;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privateGetBalances ();\n        let balances = response['balances'];\n        let result = { 'info': response };\n        for (let b = 0; b < balances.length; b++) {\n            let balance = balances[b];\n            let currency = balance['currency'];\n            let free = balance['trading_balance'];\n            let total = balance['balance'];\n            let used = total - free;\n            let account = {\n                'free': free,\n                'used': used,\n                'total': total,\n            };\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let orderbook = await this.publicGetFundsIdOrderbook (this.extend ({\n            'id': this.marketId (symbol),\n        }, params));\n        let timestamp = this.parse8601 (orderbook['date']);\n        return this.parseOrderBook (orderbook, timestamp, 'bids', 'asks', 'price', 'amount');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = this.parse8601 (ticker['date']);\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': parseFloat (ticker['bid']),\n            'ask': parseFloat (ticker['ask']),\n            'vwap': undefined,\n            'open': parseFloat (ticker['open']),\n            'close': parseFloat (ticker['close']),\n            'first': undefined,\n            'last': parseFloat (ticker['last']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['volume_traded']),\n            'quoteVolume': parseFloat (ticker['volume']),\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.publicGetFundsTickers (params);\n        let tickers = this.indexBy (response['tickers'], 'fund_id');\n        let ids = Object.keys (tickers);\n        let result = {};\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            let market = this.markets_by_id[id];\n            let symbol = market['symbol'];\n            let ticker = tickers[id];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let ticker = await this.publicGetFundsIdTicker (this.extend ({\n            'id': market['id'],\n        }, params));\n        return this.parseTicker (ticker, market);\n    }\n\n    parseTrade (trade, market = undefined) {\n        if (!market)\n            market = this.markets_by_id[trade['fund_id']];\n        let timestamp = this.parse8601 (trade['date']);\n        return {\n            'info': trade,\n            'id': trade['id'].toString (),\n            'order': undefined,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': trade['side'],\n            'price': trade['price'],\n            'amount': trade['amount'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetFundsIdTrades (this.extend ({\n            'id': market['id'],\n        }, params));\n        return this.parseTrades (response['trades'], market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (type == 'market')\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        let response = await this.privatePostFundsFundIdOrders (this.extend ({\n            'fund_id': this.marketId (symbol),\n            'side': side,\n            'amount': amount,\n            'price': price,\n        }, params));\n        return {\n            'info': response,\n            'id': response['id'].toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privateDeleteFundsFundIdOrdersId (this.extend ({\n            'id': id,\n        }, params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/' + this.version + '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'private') {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ().toString ();\n            let auth = nonce + url;\n            headers = {\n                'X-TRT-KEY': this.apiKey,\n                'X-TRT-NONCE': nonce,\n                'X-TRT-SIGN': this.hmac (this.encode (auth), this.encode (this.secret), 'sha512'),\n            };\n            if (Object.keys (query).length) {\n                body = this.json (query);\n                headers['Content-Type'] = 'application/json';\n            }\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('errors' in response)\n            throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/therock.js\n// module id = 439\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst liqui = require ('./liqui.js')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class tidex extends liqui {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'tidex',\n            'name': 'Tidex',\n            'countries': 'UK',\n            'rateLimit': 2000,\n            'version': '3',\n            // 'hasCORS': false,\n            // 'hasFetchTickers': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/30781780-03149dc4-a12e-11e7-82bb-313b269d24d4.jpg',\n                'api': {\n                    'public': 'https://api.tidex.com/api',\n                    'private': 'https://api.tidex.com/tapi',\n                },\n                'www': 'https://tidex.com',\n                'doc': 'https://tidex.com/public-api',\n                'fees': 'https://tidex.com/pairs-spec',\n            },\n            'fees': {\n                'trading': {\n                    'tierBased': false,\n                    'percentage': true,\n                    'taker': 0.1 / 100,\n                    'maker': 0.1 / 100,\n                },\n                'funding': {\n                    'tierBased': false,\n                    'percentage': false,\n                    'withdraw': {\n                        'BTC': 0.0012,\n                        'ETH': 0.01,\n                        'LTC': 0.001,\n                        'DOGE': 0.01,\n                        'ICN': 2,\n                        'DASH': 0.002,\n                        'GNO': 2,\n                        'EOS': 2,\n                        'BCH': 2,\n                        'USDT': 0,\n                    },\n                    'deposit': {\n                        'BTC': 0,\n                        'ETH': 0,\n                        'LTC': 0,\n                        'DOGE': 0,\n                        'ICN': 0,\n                        'DASH': 0,\n                        'GNO': 0,\n                        'EOS': 0,\n                        'BCH': 0,\n                        'USDT': 0,\n                    },\n                },\n            },\n        });\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/tidex.js\n// module id = 440\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst foxbit = require ('./foxbit.js')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class urdubit extends foxbit {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'urdubit',\n            'name': 'UrduBit',\n            'countries': 'PK',\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27991453-156bf3ae-6480-11e7-82eb-7295fe1b5bb4.jpg',\n                'api': {\n                    'public': 'https://api.blinktrade.com/api',\n                    'private': 'https://api.blinktrade.com/tapi',\n                },\n                'www': 'https://urdubit.com',\n                'doc': 'https://blinktrade.com/docs',\n            },\n        });\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/urdubit.js\n// module id = 441\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class vaultoro extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'vaultoro',\n            'name': 'Vaultoro',\n            'countries': 'CH',\n            'rateLimit': 1000,\n            'version': '1',\n            'hasCORS': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766880-f205e870-5ee9-11e7-8fe2-0d5b15880752.jpg',\n                'api': 'https://api.vaultoro.com',\n                'www': 'https://www.vaultoro.com',\n                'doc': 'https://api.vaultoro.com',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'bidandask',\n                        'buyorders',\n                        'latest',\n                        'latesttrades',\n                        'markets',\n                        'orderbook',\n                        'sellorders',\n                        'transactions/day',\n                        'transactions/hour',\n                        'transactions/month',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'balance',\n                        'mytrades',\n                        'orders',\n                    ],\n                    'post': [\n                        'buy/{symbol}/{type}',\n                        'cancel/{id}',\n                        'sell/{symbol}/{type}',\n                        'withdraw',\n                    ],\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let result = [];\n        let markets = await this.publicGetMarkets ();\n        let market = markets['data'];\n        let base = market['BaseCurrency'];\n        let quote = market['MarketCurrency'];\n        let symbol = base + '/' + quote;\n        let baseId = base;\n        let quoteId = quote;\n        let id = market['MarketName'];\n        result.push ({\n            'id': id,\n            'symbol': symbol,\n            'base': base,\n            'quote': quote,\n            'baseId': baseId,\n            'quoteId': quoteId,\n            'info': market,\n        });\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privateGetBalance ();\n        let balances = response['data'];\n        let result = { 'info': balances };\n        for (let b = 0; b < balances.length; b++) {\n            let balance = balances[b];\n            let currency = balance['currency_code'];\n            let uppercase = currency.toUpperCase ();\n            let free = balance['cash'];\n            let used = balance['reserved'];\n            let total = this.sum (free, used);\n            let account = {\n                'free': free,\n                'used': used,\n                'total': total,\n            };\n            result[uppercase] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.publicGetOrderbook (params);\n        let orderbook = {\n            'bids': response['data'][0]['b'],\n            'asks': response['data'][1]['s'],\n        };\n        let result = this.parseOrderBook (orderbook, undefined, 'bids', 'asks', 'Gold_Price', 'Gold_Amount');\n        result['bids'] = this.sortBy (result['bids'], 0, true);\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let quote = await this.publicGetBidandask (params);\n        let bidsLength = quote['bids'].length;\n        let bid = quote['bids'][bidsLength - 1];\n        let ask = quote['asks'][0];\n        let response = await this.publicGetMarkets (params);\n        let ticker = response['data'];\n        let timestamp = this.milliseconds ();\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['24hHigh']),\n            'low': parseFloat (ticker['24hLow']),\n            'bid': bid[0],\n            'ask': ask[0],\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': parseFloat (ticker['LastPrice']),\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': undefined,\n            'quoteVolume': parseFloat (ticker['24hVolume']),\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market) {\n        let timestamp = this.parse8601 (trade['Time']);\n        return {\n            'id': undefined,\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'order': undefined,\n            'type': undefined,\n            'side': undefined,\n            'price': trade['Gold_Price'],\n            'amount': trade['Gold_Amount'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetTransactionsDay (params);\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let method = 'privatePost' + this.capitalize (side) + 'SymbolType';\n        let response = await this[method] (this.extend ({\n            'symbol': market['quoteId'].toLowerCase (),\n            'type': type,\n            'gld': amount,\n            'price': price || 1,\n        }, params));\n        return {\n            'info': response,\n            'id': response['data']['Order_ID'],\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        await this.loadMarkets ();\n        return await this.privatePostCancelId (this.extend ({\n            'id': id,\n        }, params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/';\n        if (api == 'public') {\n            url += path;\n        } else {\n            this.checkRequiredCredentials ();\n            let nonce = this.nonce ();\n            url += this.version + '/' + this.implodeParams (path, params);\n            let query = this.extend ({\n                'nonce': nonce,\n                'apikey': this.apiKey,\n            }, this.omit (params, this.extractParams (path)));\n            url += '?' + this.urlencode (query);\n            headers = {\n                'Content-Type': 'application/json',\n                'X-Signature': this.hmac (this.encode (url), this.encode (this.secret))\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/vaultoro.js\n// module id = 442\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst foxbit = require ('./foxbit.js')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class vbtc extends foxbit {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'vbtc',\n            'name': 'VBTC',\n            'countries': 'VN',\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27991481-1f53d1d8-6481-11e7-884e-21d17e7939db.jpg',\n                'api': {\n                    'public': 'https://api.blinktrade.com/api',\n                    'private': 'https://api.blinktrade.com/tapi',\n                },\n                'www': 'https://vbtc.exchange',\n                'doc': 'https://blinktrade.com/docs',\n            },\n        });\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/vbtc.js\n// module id = 443\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class virwox extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'virwox',\n            'name': 'VirWoX',\n            'countries': [ 'AT', 'EU' ],\n            'rateLimit': 1000,\n            'hasCORS': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766894-6da9d360-5eea-11e7-90aa-41f2711b7405.jpg',\n                'api': {\n                    'public': 'http://api.virwox.com/api/json.php',\n                    'private': 'https://www.virwox.com/api/trading.php',\n                },\n                'www': 'https://www.virwox.com',\n                'doc': 'https://www.virwox.com/developers.php',\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': false,\n                'login': true,\n                'password': true\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'getInstruments',\n                        'getBestPrices',\n                        'getMarketDepth',\n                        'estimateMarketOrder',\n                        'getTradedPriceVolume',\n                        'getRawTradeData',\n                        'getStatistics',\n                        'getTerminalList',\n                        'getGridList',\n                        'getGridStatistics',\n                    ],\n                    'post': [\n                        'getInstruments',\n                        'getBestPrices',\n                        'getMarketDepth',\n                        'estimateMarketOrder',\n                        'getTradedPriceVolume',\n                        'getRawTradeData',\n                        'getStatistics',\n                        'getTerminalList',\n                        'getGridList',\n                        'getGridStatistics',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'cancelOrder',\n                        'getBalances',\n                        'getCommissionDiscount',\n                        'getOrders',\n                        'getTransactions',\n                        'placeOrder',\n                    ],\n                    'post': [\n                        'cancelOrder',\n                        'getBalances',\n                        'getCommissionDiscount',\n                        'getOrders',\n                        'getTransactions',\n                        'placeOrder',\n                    ],\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetInstruments ();\n        let keys = Object.keys (markets['result']);\n        let result = [];\n        for (let p = 0; p < keys.length; p++) {\n            let market = markets['result'][keys[p]];\n            let id = market['instrumentID'];\n            let symbol = market['symbol'];\n            let base = market['longCurrency'];\n            let quote = market['shortCurrency'];\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostGetBalances ();\n        let balances = response['result']['accountList'];\n        let result = { 'info': balances };\n        for (let b = 0; b < balances.length; b++) {\n            let balance = balances[b];\n            let currency = balance['currency'];\n            let total = balance['balance'];\n            let account = {\n                'free': total,\n                'used': 0.0,\n                'total': total,\n            };\n            result[currency] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchMarketPrice (symbol, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.publicPostGetBestPrices (this.extend ({\n            'symbols': [ symbol ],\n        }, params));\n        let result = response['result'];\n        return {\n            'bid': this.safeFloat (result[0], 'bestBuyPrice'),\n            'ask': this.safeFloat (result[0], 'bestSellPrice'),\n        };\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.publicPostGetMarketDepth (this.extend ({\n            'symbols': [ symbol ],\n            'buyDepth': 100,\n            'sellDepth': 100,\n        }, params));\n        let orderbook = response['result'][0];\n        return this.parseOrderBook (orderbook, undefined, 'buy', 'sell', 'price', 'volume');\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let end = this.milliseconds ();\n        let start = end - 86400000;\n        let response = await this.publicGetTradedPriceVolume (this.extend ({\n            'instrument': symbol,\n            'endDate': this.YmdHMS (end),\n            'startDate': this.YmdHMS (start),\n            'HLOC': 1,\n        }, params));\n        let marketPrice = await this.fetchMarketPrice (symbol, params);\n        let tickers = response['result']['priceVolumeList'];\n        let keys = Object.keys (tickers);\n        let length = keys.length;\n        let lastKey = keys[length - 1];\n        let ticker = tickers[lastKey];\n        let timestamp = this.milliseconds ();\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': parseFloat (ticker['high']),\n            'low': parseFloat (ticker['low']),\n            'bid': marketPrice['bid'],\n            'ask': marketPrice['ask'],\n            'vwap': undefined,\n            'open': parseFloat (ticker['open']),\n            'close': parseFloat (ticker['close']),\n            'first': undefined,\n            'last': undefined,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': parseFloat (ticker['longVolume']),\n            'quoteVolume': parseFloat (ticker['shortVolume']),\n            'info': ticker,\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        return await this.publicGetRawTradeData (this.extend ({\n            'instrument': market['id'],\n            'timespan': 3600,\n        }, params));\n    }\n\n    async createOrder (market, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        let order = {\n            'instrument': this.symbol (market),\n            'orderType': side.toUpperCase (),\n            'amount': amount,\n        };\n        if (type == 'limit')\n            order['price'] = price;\n        let response = await this.privatePostPlaceOrder (this.extend (order, params));\n        return {\n            'info': response,\n            'id': response['orderID'].toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostCancelOrder (this.extend ({\n            'orderID': id,\n        }, params));\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'][api];\n        let auth = {};\n        if (api == 'private') {\n            this.checkRequiredCredentials ();\n            auth['key'] = this.apiKey;\n            auth['user'] = this.login;\n            auth['pass'] = this.password;\n        }\n        let nonce = this.nonce ();\n        if (method == 'GET') {\n            url += '?' + this.urlencode (this.extend ({\n                'method': path,\n                'id': nonce,\n            }, auth, params));\n        } else {\n            headers = { 'Content-Type': 'application/json' };\n            body = this.json ({\n                'method': path,\n                'params': this.extend (auth, params),\n                'id': nonce,\n            });\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('error' in response)\n            if (response['error'])\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/virwox.js\n// module id = 444\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst liqui = require ('./liqui.js')\nconst { ExchangeError, InsufficientFunds, OrderNotFound, DDoSProtection } = require ('./base/errors')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class wex extends liqui {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'wex',\n            'name': 'WEX',\n            'countries': 'NZ', // New Zealand\n            'version': '3',\n            'hasFetchTickers': true,\n            'hasCORS': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/30652751-d74ec8f8-9e31-11e7-98c5-71469fcef03e.jpg',\n                'api': {\n                    'public': 'https://wex.nz/api',\n                    'private': 'https://wex.nz/tapi',\n                },\n                'www': 'https://wex.nz',\n                'doc': [\n                    'https://wex.nz/api/3/docs',\n                    'https://wex.nz/tapi/docs',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'info',\n                        'ticker/{pair}',\n                        'depth/{pair}',\n                        'trades/{pair}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'getInfo',\n                        'Trade',\n                        'ActiveOrders',\n                        'OrderInfo',\n                        'CancelOrder',\n                        'TradeHistory',\n                        'TransHistory',\n                        'CoinDepositAddress',\n                        'WithdrawCoin',\n                        'CreateCoupon',\n                        'RedeemCoupon',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.2 / 100,\n                    'taker': 0.2 / 100,\n                },\n            },\n        });\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = ticker['updated'] * 1000;\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': this.safeFloat (ticker, 'high'),\n            'low': this.safeFloat (ticker, 'low'),\n            'bid': this.safeFloat (ticker, 'sell'),\n            'ask': this.safeFloat (ticker, 'buy'),\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': this.safeFloat (ticker, 'last'),\n            'change': undefined,\n            'percentage': undefined,\n            'average': this.safeFloat (ticker, 'avg'),\n            'baseVolume': this.safeFloat (ticker, 'vol_cur'),\n            'quoteVolume': this.safeFloat (ticker, 'vol'),\n            'info': ticker,\n        };\n    }\n\n    handleErrors (code, reason, url, method, headers, body) {\n        if (code == 200) {\n            if (body[0] != '{') {\n                // response is not JSON\n                throw new ExchangeError (this.id + ' returned a non-JSON reply: ' + body);\n            }\n            let response = JSON.parse (body);\n            if ('success' in response) {\n                if (!response['success']) {\n                    let error = this.safeValue (response, 'error');\n                    if (!error) {\n                        throw new ExchangeError (this.id + ' returned a malformed error: ' + body);\n                    } else if (error == 'bad status') {\n                        throw new OrderNotFound (this.id + ' ' + error);\n                    } else if (error.indexOf ('It is not enough') >= 0) {\n                        throw new InsufficientFunds (this.id + ' ' + error);\n                    } else if (error == 'Requests too often') {\n                        throw new DDoSProtection (this.id + ' ' + error);\n                    } else if (error == 'not available') {\n                        throw new DDoSProtection (this.id + ' ' + error);\n                    } else if (error == 'external service unavailable') {\n                        throw new DDoSProtection (this.id + ' ' + error);\n                    // that's what fetchOpenOrders return if no open orders (fix for #489)\n                    } else if (error != 'no orders') {\n                        throw new ExchangeError (this.id + ' ' + error);\n                    }\n                }\n            }\n        }\n    }\n\n    request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        return this.fetch2 (path, api, method, params, headers, body);\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/wex.js\n// module id = 445\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError, NotSupported, AuthenticationError } = require ('./base/errors')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class xbtce extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'xbtce',\n            'name': 'xBTCe',\n            'countries': 'RU',\n            'rateLimit': 2000, // responses are cached every 2 seconds\n            'version': 'v1',\n            'hasPublicAPI': false,\n            'hasCORS': false,\n            'hasFetchTickers': true,\n            'hasFetchOHLCV': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/28059414-e235970c-662c-11e7-8c3a-08e31f78684b.jpg',\n                'api': 'https://cryptottlivewebapi.xbtce.net:8443/api',\n                'www': 'https://www.xbtce.com',\n                'doc': [\n                    'https://www.xbtce.com/tradeapi',\n                    'https://support.xbtce.info/Knowledgebase/Article/View/52/25/xbtce-exchange-api',\n                ],\n            },\n            'requiredCredentials': {\n                'apiKey': true,\n                'secret': true,\n                'uid': true,\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'currency',\n                        'currency/{filter}',\n                        'level2',\n                        'level2/{filter}',\n                        'quotehistory/{symbol}/{periodicity}/bars/ask',\n                        'quotehistory/{symbol}/{periodicity}/bars/bid',\n                        'quotehistory/{symbol}/level2',\n                        'quotehistory/{symbol}/ticks',\n                        'symbol',\n                        'symbol/{filter}',\n                        'tick',\n                        'tick/{filter}',\n                        'ticker',\n                        'ticker/{filter}',\n                        'tradesession',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'tradeserverinfo',\n                        'tradesession',\n                        'currency',\n                        'currency/{filter}',\n                        'level2',\n                        'level2/{filter}',\n                        'symbol',\n                        'symbol/{filter}',\n                        'tick',\n                        'tick/{filter}',\n                        'account',\n                        'asset',\n                        'asset/{id}',\n                        'position',\n                        'position/{id}',\n                        'trade',\n                        'trade/{id}',\n                        'quotehistory/{symbol}/{periodicity}/bars/ask',\n                        'quotehistory/{symbol}/{periodicity}/bars/ask/info',\n                        'quotehistory/{symbol}/{periodicity}/bars/bid',\n                        'quotehistory/{symbol}/{periodicity}/bars/bid/info',\n                        'quotehistory/{symbol}/level2',\n                        'quotehistory/{symbol}/level2/info',\n                        'quotehistory/{symbol}/periodicities',\n                        'quotehistory/{symbol}/ticks',\n                        'quotehistory/{symbol}/ticks/info',\n                        'quotehistory/cache/{symbol}/{periodicity}/bars/ask',\n                        'quotehistory/cache/{symbol}/{periodicity}/bars/bid',\n                        'quotehistory/cache/{symbol}/level2',\n                        'quotehistory/cache/{symbol}/ticks',\n                        'quotehistory/symbols',\n                        'quotehistory/version',\n                    ],\n                    'post': [\n                        'trade',\n                        'tradehistory',\n                    ],\n                    'put': [\n                        'trade',\n                    ],\n                    'delete': [\n                        'trade',\n                    ],\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.privateGetSymbol ();\n        let result = [];\n        for (let p = 0; p < markets.length; p++) {\n            let market = markets[p];\n            let id = market['Symbol'];\n            let base = market['MarginCurrency'];\n            let quote = market['ProfitCurrency'];\n            if (base == 'DSH')\n                base = 'DASH';\n            let symbol = base + '/' + quote;\n            symbol = market['IsTradeAllowed'] ? symbol : id;\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let balances = await this.privateGetAsset ();\n        let result = { 'info': balances };\n        for (let b = 0; b < balances.length; b++) {\n            let balance = balances[b];\n            let currency = balance['Currency'];\n            let uppercase = currency.toUpperCase ();\n            // xbtce names DASH incorrectly as DSH\n            if (uppercase == 'DSH')\n                uppercase = 'DASH';\n            let account = {\n                'free': balance['FreeAmount'],\n                'used': balance['LockedAmount'],\n                'total': balance['Amount'],\n            };\n            result[uppercase] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let orderbook = await this.privateGetLevel2Filter (this.extend ({\n            'filter': market['id'],\n        }, params));\n        orderbook = orderbook[0];\n        let timestamp = orderbook['Timestamp'];\n        return this.parseOrderBook (orderbook, timestamp, 'Bids', 'Asks', 'Price', 'Volume');\n    }\n\n    parseTicker (ticker, market = undefined) {\n        let timestamp = 0;\n        let last = undefined;\n        if ('LastBuyTimestamp' in ticker)\n            if (timestamp < ticker['LastBuyTimestamp']) {\n                timestamp = ticker['LastBuyTimestamp'];\n                last = ticker['LastBuyPrice'];\n            }\n        if ('LastSellTimestamp' in ticker)\n            if (timestamp < ticker['LastSellTimestamp']) {\n                timestamp = ticker['LastSellTimestamp'];\n                last = ticker['LastSellPrice'];\n            }\n        if (!timestamp)\n            timestamp = this.milliseconds ();\n        let symbol = undefined;\n        if (market)\n            symbol = market['symbol'];\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': ticker['DailyBestBuyPrice'],\n            'low': ticker['DailyBestSellPrice'],\n            'bid': ticker['BestBid'],\n            'ask': ticker['BestAsk'],\n            'vwap': undefined,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': last,\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': ticker['DailyTradedTotalVolume'],\n            'quoteVolume': undefined,\n            'info': ticker,\n        };\n    }\n\n    async fetchTickers (symbols = undefined, params = {}) {\n        await this.loadMarkets ();\n        let tickers = await this.publicGetTicker (params);\n        tickers = this.indexBy (tickers, 'Symbol');\n        let ids = Object.keys (tickers);\n        let result = {};\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            let market = undefined;\n            let symbol = undefined;\n            if (id in this.markets_by_id) {\n                market = this.markets_by_id[id];\n                symbol = market['symbol'];\n            } else {\n                let base = id.slice (0, 3);\n                let quote = id.slice (3, 6);\n                if (base == 'DSH')\n                    base = 'DASH';\n                if (quote == 'DSH')\n                    quote = 'DASH';\n                symbol = base + '/' + quote;\n            }\n            let ticker = tickers[id];\n            result[symbol] = this.parseTicker (ticker, market);\n        }\n        return result;\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let tickers = await this.publicGetTickerFilter (this.extend ({\n            'filter': market['id'],\n        }, params));\n        let length = tickers.length;\n        if (length < 1)\n            throw new ExchangeError (this.id + ' fetchTicker returned empty response, xBTCe public API error');\n        tickers = this.indexBy (tickers, 'Symbol');\n        let ticker = tickers[market['id']];\n        return this.parseTicker (ticker, market);\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        // no method for trades?\n        return await this.privateGetTrade (params);\n    }\n\n    parseOHLCV (ohlcv, market = undefined, timeframe = '1m', since = undefined, limit = undefined) {\n        return [\n            ohlcv['Timestamp'],\n            ohlcv['Open'],\n            ohlcv['High'],\n            ohlcv['Low'],\n            ohlcv['Close'],\n            ohlcv['Volume'],\n        ];\n    }\n\n    async fetchOHLCV (symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {\n        throw new NotSupported (this.id + ' fetchOHLCV is disabled by the exchange');\n        let minutes = parseInt (timeframe / 60); // 1 minute by default\n        let periodicity = minutes.toString ();\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        if (!since)\n            since = this.seconds () - 86400 * 7; // last day by defulat\n        if (!limit)\n            limit = 1000; // default\n        let response = await this.privateGetQuotehistorySymbolPeriodicityBarsBid (this.extend ({\n            'symbol': market['id'],\n            'periodicity': periodicity,\n            'timestamp': since,\n            'count': limit,\n        }, params));\n        return this.parseOHLCVs (response['Bars'], market, timeframe, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (type == 'market')\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        let response = await this.tapiPostTrade (this.extend ({\n            'pair': this.marketId (symbol),\n            'type': side,\n            'amount': amount,\n            'rate': price,\n        }, params));\n        return {\n            'info': response,\n            'id': response['Id'].toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privateDeleteTrade (this.extend ({\n            'Type': 'Cancel',\n            'Id': id,\n        }, params));\n    }\n\n    nonce () {\n        return this.milliseconds ();\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        if (!this.apiKey)\n            throw new AuthenticationError (this.id + ' requires apiKey for all requests, their public API is always busy');\n        if (!this.uid)\n            throw new AuthenticationError (this.id + ' requires uid property for authentication and trading, their public API is always busy');\n        let url = this.urls['api'] + '/' + this.version;\n        if (api == 'public')\n            url += '/' + api;\n        url += '/' + this.implodeParams (path, params);\n        let query = this.omit (params, this.extractParams (path));\n        if (api == 'public') {\n            if (Object.keys (query).length)\n                url += '?' + this.urlencode (query);\n        } else {\n            this.checkRequiredCredentials ();\n            headers = { 'Accept-Encoding': 'gzip, deflate' };\n            let nonce = this.nonce ().toString ();\n            if (method == 'POST') {\n                if (Object.keys (query).length) {\n                    headers['Content-Type'] = 'application/json';\n                    body = this.json (query);\n                } else {\n                    url += '?' + this.urlencode (query);\n                }\n            }\n            let auth = nonce + this.uid + this.apiKey + method + url;\n            if (body)\n                auth += body;\n            let signature = this.hmac (this.encode (auth), this.encode (this.secret), 'sha256', 'base64');\n            let credentials = this.uid + ':' + this.apiKey + ':' + nonce + ':' + this.binaryToString (signature);\n            headers['Authorization'] = 'HMAC ' + credentials;\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/xbtce.js\n// module id = 446\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst liqui = require ('./liqui.js')\nconst { ExchangeError, InsufficientFunds, DDoSProtection } = require ('./base/errors')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class yobit extends liqui {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'yobit',\n            'name': 'YoBit',\n            'countries': 'RU',\n            'rateLimit': 3000, // responses are cached every 2 seconds\n            'version': '3',\n            'hasCORS': false,\n            'hasWithdraw': true,\n            'hasFetchTickers': false,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766910-cdcbfdae-5eea-11e7-9859-03fea873272d.jpg',\n                'api': {\n                    'public': 'https://yobit.net/api',\n                    'private': 'https://yobit.net/tapi',\n                },\n                'www': 'https://www.yobit.net',\n                'doc': 'https://www.yobit.net/en/api/',\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'depth/{pair}',\n                        'info',\n                        'ticker/{pair}',\n                        'trades/{pair}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'ActiveOrders',\n                        'CancelOrder',\n                        'GetDepositAddress',\n                        'getInfo',\n                        'OrderInfo',\n                        'Trade',\n                        'TradeHistory',\n                        'WithdrawCoinsToAddress',\n                    ],\n                },\n            },\n            'fees': {\n                'trading': {\n                    'maker': 0.002,\n                    'taker': 0.002,\n                },\n                'funding': 0.0,\n            },\n        });\n    }\n\n    commonCurrencyCode (currency) {\n        let substitutions = {\n            'AIR': 'AirCoin',\n            'ANI': 'ANICoin',\n            'ANT': 'AntsCoin',\n            'ATM': 'Autumncoin',\n            'BCC': 'BCH',\n            'BTS': 'Bitshares2',\n            'DCT': 'Discount',\n            'DGD': 'DarkGoldCoin',\n            'ICN': 'iCoin',\n            'LIZI': 'LiZi',\n            'LUN': 'LunarCoin',\n            'NAV': 'NavajoCoin',\n            'OMG': 'OMGame',\n            'PAY': 'EPAY',\n            'REP': 'Republicoin',\n        };\n        if (currency in substitutions)\n            return substitutions[currency];\n        return currency;\n    }\n\n    currencyId (commonCode) {\n        let substitutions = {\n            'AirCoin': 'AIR',\n            'ANICoin': 'ANI',\n            'AntsCoin': 'ANT',\n            'Autumncoin': 'ATM',\n            'BCH': 'BCC',\n            'Bitshares2': 'BTS',\n            'Discount': 'DCT',\n            'DarkGoldCoin': 'DGD',\n            'iCoin': 'ICN',\n            'LiZi': 'LIZI',\n            'LunarCoin': 'LUN',\n            'NavajoCoin': 'NAV',\n            'OMGame': 'OMG',\n            'EPAY': 'PAY',\n            'Republicoin': 'REP',\n        };\n        if (commonCode in substitutions)\n            return substitutions[commonCode];\n        return commonCode;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostGetInfo ();\n        let balances = response['return'];\n        let result = { 'info': balances };\n        let sides = { 'free': 'funds', 'total': 'funds_incl_orders' };\n        let keys = Object.keys (sides);\n        for (let i = 0; i < keys.length; i++) {\n            let key = keys[i];\n            let side = sides[key];\n            if (side in balances) {\n                let currencies = Object.keys (balances[side]);\n                for (let j = 0; j < currencies.length; j++) {\n                    let lowercase = currencies[j];\n                    let uppercase = lowercase.toUpperCase ();\n                    let currency = this.commonCurrencyCode (uppercase);\n                    let account = undefined;\n                    if (currency in result) {\n                        account = result[currency];\n                    } else {\n                        account = this.account ();\n                    }\n                    account[key] = balances[side][lowercase];\n                    if (account['total'] && account['free'])\n                        account['used'] = account['total'] - account['free'];\n                    result[currency] = account;\n                }\n            }\n        }\n        return this.parseBalance (result);\n    }\n\n    async createDepositAddress (currency, params = {}) {\n        let response = await this.fetchDepositAddress (currency, this.extend ({\n            'need_new': 1,\n        }, params));\n        return {\n            'currency': currency,\n            'address': response['address'],\n            'status': 'ok',\n            'info': response['info'],\n        };\n    }\n\n    async fetchDepositAddress (currency, params = {}) {\n        let currencyId = this.currencyId (currency);\n        let request = {\n            'coinName': currencyId,\n            'need_new': 0,\n        };\n        let response = await this.privatePostGetDepositAddress (this.extend (request, params));\n        let address = this.safeString (response['return'], 'address');\n        return {\n            'currency': currency,\n            'address': address,\n            'status': 'ok',\n            'info': response,\n        };\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostWithdrawCoinsToAddress (this.extend ({\n            'coinName': currency,\n            'amount': amount,\n            'address': address,\n        }, params));\n        return {\n            'info': response,\n            'id': undefined,\n        };\n    }\n\n    async request (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('success' in response) {\n            if (!response['success']) {\n                if (response['error'].indexOf ('Insufficient funds') >= 0) { // not enougTh is a typo inside Liqui's own API...\n                    throw new InsufficientFunds (this.id + ' ' + this.json (response));\n                } else if (response['error'] == 'Requests too often') {\n                    throw new DDoSProtection (this.id + ' ' + this.json (response));\n                } else if ((response['error'] == 'not available') || (response['error'] == 'external service unavailable')) {\n                    throw new DDoSProtection (this.id + ' ' + this.json (response));\n                } else {\n                    throw new ExchangeError (this.id + ' ' + this.json (response));\n                }\n            }\n        }\n        return response;\n    }\n\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/yobit.js\n// module id = 447\n// module chunks = 0","\"use strict\";\n\n// ---------------------------------------------------------------------------\n\nconst acx = require ('./acx.js')\n\n// ---------------------------------------------------------------------------\n\nmodule.exports = class yunbi extends acx {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'yunbi',\n            'name': 'YUNBI',\n            'countries': 'CN',\n            'rateLimit': 1000,\n            'version': 'v2',\n            'hasCORS': false,\n            'hasFetchTickers': true,\n            'hasFetchOHLCV': true,\n            'timeframes': {\n                '1m': '1',\n                '5m': '5',\n                '15m': '15',\n                '30m': '30',\n                '1h': '60',\n                '2h': '120',\n                '4h': '240',\n                '12h': '720',\n                '1d': '1440',\n                '3d': '4320',\n                '1w': '10080',\n            },\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/28570548-4d646c40-7147-11e7-9cf6-839b93e6d622.jpg',\n                'extension': '.json', // default extension appended to endpoint URLs\n                'api': 'https://yunbi.com',\n                'www': 'https://yunbi.com',\n                'doc': [\n                    'https://yunbi.com/documents/api/guide',\n                    'https://yunbi.com/swagger/',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'tickers',\n                        'tickers/{market}',\n                        'markets',\n                        'order_book',\n                        'k',\n                        'depth',\n                        'trades',\n                        'k_with_pending_trades',\n                        'timestamp',\n                        'addresses/{address}',\n                        'partners/orders/{id}/trades',\n                    ],\n                },\n                'private': {\n                    'get': [\n                        'deposits',\n                        'members/me',\n                        'deposit',\n                        'deposit_address',\n                        'order',\n                        'orders',\n                        'trades/my',\n                    ],\n                    'post': [\n                        'order/delete',\n                        'orders',\n                        'orders/multi',\n                        'orders/clear',\n                    ],\n                },\n            },\n        });\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/yunbi.js\n// module id = 448\n// module chunks = 0","\"use strict\";\n\n//  ---------------------------------------------------------------------------\n\nconst Exchange = require ('./base/Exchange')\nconst { ExchangeError } = require ('./base/errors')\n\n//  ---------------------------------------------------------------------------\n\nmodule.exports = class zaif extends Exchange {\n\n    describe () {\n        return this.deepExtend (super.describe (), {\n            'id': 'zaif',\n            'name': 'Zaif',\n            'countries': 'JP',\n            'rateLimit': 2000,\n            'version': '1',\n            'hasCORS': false,\n            'hasFetchOpenOrders': true,\n            'hasFetchClosedOrders': true,\n            'hasWithdraw': true,\n            'urls': {\n                'logo': 'https://user-images.githubusercontent.com/1294454/27766927-39ca2ada-5eeb-11e7-972f-1b4199518ca6.jpg',\n                'api': 'https://api.zaif.jp',\n                'www': 'https://zaif.jp',\n                'doc': [\n                    'http://techbureau-api-document.readthedocs.io/ja/latest/index.html',\n                    'https://corp.zaif.jp/api-docs',\n                    'https://corp.zaif.jp/api-docs/api_links',\n                    'https://www.npmjs.com/package/zaif.jp',\n                    'https://github.com/you21979/node-zaif',\n                ],\n            },\n            'api': {\n                'public': {\n                    'get': [\n                        'depth/{pair}',\n                        'currencies/{pair}',\n                        'currencies/all',\n                        'currency_pairs/{pair}',\n                        'currency_pairs/all',\n                        'last_price/{pair}',\n                        'ticker/{pair}',\n                        'trades/{pair}',\n                    ],\n                },\n                'private': {\n                    'post': [\n                        'active_orders',\n                        'cancel_order',\n                        'deposit_history',\n                        'get_id_info',\n                        'get_info',\n                        'get_info2',\n                        'get_personal_info',\n                        'trade',\n                        'trade_history',\n                        'withdraw',\n                        'withdraw_history',\n                    ],\n                },\n                'ecapi': {\n                    'post': [\n                        'createInvoice',\n                        'getInvoice',\n                        'getInvoiceIdsByOrderNumber',\n                        'cancelInvoice',\n                    ],\n                },\n                'tlapi': {\n                    'post': [\n                        'get_positions',\n                        'position_history',\n                        'active_positions',\n                        'create_position',\n                        'change_position',\n                        'cancel_position',\n                    ],\n                },\n                'fapi': {\n                    'get': [\n                        'groups/{group_id}',\n                        'last_price/{group_id}/{pair}',\n                        'ticker/{group_id}/{pair}',\n                        'trades/{group_id}/{pair}',\n                        'depth/{group_id}/{pair}',\n                    ],\n                },\n            },\n        });\n    }\n\n    async fetchMarkets () {\n        let markets = await this.publicGetCurrencyPairsAll ();\n        let result = [];\n        for (let p = 0; p < markets.length; p++) {\n            let market = markets[p];\n            let id = market['currency_pair'];\n            let symbol = market['name'];\n            let [ base, quote ] = symbol.split ('/');\n            result.push ({\n                'id': id,\n                'symbol': symbol,\n                'base': base,\n                'quote': quote,\n                'info': market,\n            });\n        }\n        return result;\n    }\n\n    async fetchBalance (params = {}) {\n        await this.loadMarkets ();\n        let response = await this.privatePostGetInfo ();\n        let balances = response['return'];\n        let result = { 'info': balances };\n        let currencies = Object.keys (balances['funds']);\n        for (let c = 0; c < currencies.length; c++) {\n            let currency = currencies[c];\n            let balance = balances['funds'][currency];\n            let uppercase = currency.toUpperCase ();\n            let account = {\n                'free': balance,\n                'used': 0.0,\n                'total': balance,\n            };\n            if ('deposit' in balances) {\n                if (currency in balances['deposit']) {\n                    account['total'] = balances['deposit'][currency];\n                    account['used'] = account['total'] - account['free'];\n                }\n            }\n            result[uppercase] = account;\n        }\n        return this.parseBalance (result);\n    }\n\n    async fetchOrderBook (symbol, params = {}) {\n        await this.loadMarkets ();\n        let orderbook = await this.publicGetDepthPair (this.extend ({\n            'pair': this.marketId (symbol),\n        }, params));\n        return this.parseOrderBook (orderbook);\n    }\n\n    async fetchTicker (symbol, params = {}) {\n        await this.loadMarkets ();\n        let ticker = await this.publicGetTickerPair (this.extend ({\n            'pair': this.marketId (symbol),\n        }, params));\n        let timestamp = this.milliseconds ();\n        let vwap = ticker['vwap'];\n        let baseVolume = ticker['volume'];\n        let quoteVolume = baseVolume * vwap;\n        return {\n            'symbol': symbol,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'high': ticker['high'],\n            'low': ticker['low'],\n            'bid': ticker['bid'],\n            'ask': ticker['ask'],\n            'vwap': vwap,\n            'open': undefined,\n            'close': undefined,\n            'first': undefined,\n            'last': ticker['last'],\n            'change': undefined,\n            'percentage': undefined,\n            'average': undefined,\n            'baseVolume': baseVolume,\n            'quoteVolume': quoteVolume,\n            'info': ticker,\n        };\n    }\n\n    parseTrade (trade, market = undefined) {\n        let side = (trade['trade_type'] == 'bid') ? 'buy' : 'sell';\n        let timestamp = trade['date'] * 1000;\n        let id = this.safeString (trade, 'id');\n        id = this.safeString (trade, 'tid', id);\n        if (!market)\n            market = this.markets_by_id[trade['currency_pair']];\n        return {\n            'id': id.toString (),\n            'info': trade,\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'symbol': market['symbol'],\n            'type': undefined,\n            'side': side,\n            'price': trade['price'],\n            'amount': trade['amount'],\n        };\n    }\n\n    async fetchTrades (symbol, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = this.market (symbol);\n        let response = await this.publicGetTradesPair (this.extend ({\n            'pair': market['id'],\n        }, params));\n        return this.parseTrades (response, market, since, limit);\n    }\n\n    async createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n        await this.loadMarkets ();\n        if (type == 'market')\n            throw new ExchangeError (this.id + ' allows limit orders only');\n        let response = await this.privatePostTrade (this.extend ({\n            'currency_pair': this.marketId (symbol),\n            'action': (side == 'buy') ? 'bid' : 'ask',\n            'amount': amount,\n            'price': price,\n        }, params));\n        return {\n            'info': response,\n            'id': response['return']['order_id'].toString (),\n        };\n    }\n\n    async cancelOrder (id, symbol = undefined, params = {}) {\n        return await this.privatePostCancelOrder (this.extend ({\n            'order_id': id,\n        }, params));\n    }\n\n    parseOrder (order, market = undefined) {\n        let side = (order['action'] == 'bid') ? 'buy' : 'sell';\n        let timestamp = parseInt (order['timestamp']) * 1000;\n        if (!market)\n            market = this.markets_by_id[order['currency_pair']];\n        let price = order['price'];\n        let amount = order['amount'];\n        return {\n            'id': order['id'].toString (),\n            'timestamp': timestamp,\n            'datetime': this.iso8601 (timestamp),\n            'status': 'open',\n            'symbol': market['symbol'],\n            'type': 'limit',\n            'side': side,\n            'price': price,\n            'cost': price * amount,\n            'amount': amount,\n            'filled': undefined,\n            'remaining': undefined,\n            'trades': undefined,\n            'fee': undefined,\n        };\n    }\n\n    parseOrders (orders, market = undefined, since = undefined, limit = undefined) {\n        let ids = Object.keys (orders);\n        let result = [];\n        for (let i = 0; i < ids.length; i++) {\n            let id = ids[i];\n            let order = orders[id];\n            let extended = this.extend (order, { 'id': id });\n            result.push (this.parseOrder (extended, market));\n        }\n        return this.filterBySinceLimit (result, since, limit);\n    }\n\n    async fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        let request = {\n            // 'is_token': false,\n            // 'is_token_both': false,\n        };\n        if (symbol) {\n            market = this.market (symbol);\n            request['currency_pair'] = market['id'];\n        }\n        let response = await this.privatePostActiveOrders (this.extend (request, params));\n        return this.parseOrders (response['return'], market, since, limit);\n    }\n\n    async fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {}) {\n        await this.loadMarkets ();\n        let market = undefined;\n        let request = {\n            // 'from': 0,\n            // 'count': 1000,\n            // 'from_id': 0,\n            // 'end_id': 1000,\n            // 'order': 'DESC',\n            // 'since': 1503821051,\n            // 'end': 1503821051,\n            // 'is_token': false,\n        };\n        if (symbol) {\n            market = this.market (symbol);\n            request['currency_pair'] = market['id'];\n        }\n        let response = await this.privatePostTradeHistory (this.extend (request, params));\n        return this.parseOrders (response['return'], market, since, limit);\n    }\n\n    async withdraw (currency, amount, address, params = {}) {\n        await this.loadMarkets ();\n        if (currency == 'JPY')\n            throw new ExchangeError (this.id + ' does not allow ' + currency + ' withdrawals');\n        let result = await this.privatePostWithdraw (this.extend ({\n            'currency': currency,\n            'amount': amount,\n            'address': address,\n            // 'message': 'Hi!', // XEM only\n            // 'opt_fee': 0.003, // BTC and MONA only\n        }, params));\n        return {\n            'info': result,\n            'id': result['return']['txid'],\n            'fee': result['return']['fee'],\n        };\n    }\n\n    sign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let url = this.urls['api'] + '/';\n        if (api == 'public') {\n            url += 'api/' + this.version + '/' + this.implodeParams (path, params);\n        } else if (api == 'fapi') {\n            url += 'fapi/' + this.version + '/' + this.implodeParams (path, params);\n        } else {\n            this.checkRequiredCredentials ();\n            if (api == 'ecapi') {\n                url += 'ecapi';\n            } else if (api == 'tlapi') {\n                url += 'tlapi';\n            } else {\n                url += 'tapi';\n            }\n            let nonce = this.nonce ();\n            body = this.urlencode (this.extend ({\n                'method': path,\n                'nonce': nonce,\n            }, params));\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Key': this.apiKey,\n                'Sign': this.hmac (this.encode (body), this.encode (this.secret), 'sha512'),\n            };\n        }\n        return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n    }\n\n    async request (path, api = 'api', method = 'GET', params = {}, headers = undefined, body = undefined) {\n        let response = await this.fetch2 (path, api, method, params, headers, body);\n        if ('error' in response)\n            throw new ExchangeError (this.id + ' ' + response['error']);\n        if ('success' in response)\n            if (!response['success'])\n                throw new ExchangeError (this.id + ' ' + this.json (response));\n        return response;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ccxt/js/zaif.js\n// module id = 449\n// module chunks = 0"],"sourceRoot":""}